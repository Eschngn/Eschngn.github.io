/**
* @vue/shared v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Se={},ze=()=>{},Ce=Object.assign,Oe=Array.isArray,j=e=>typeof e=="function",Me=e=>typeof e=="string",Ne=e=>typeof e=="symbol";let X;const L=()=>X||(X=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});/**
* @vue/reactivity v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Ne));function P(e){const t=e&&e.__v_raw;return t?P(t):e}function Te(e){return e?e.__v_isRef===!0:!1}/**
* @vue/runtime-core v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const v=[];function kt(e){v.push(e)}function Et(){v.pop()}let W=!1;function It(e,...t){if(W)return;W=!0;const n=v.length?v[v.length-1].component:null,o=n&&n.appContext.config.warnHandler,s=Fe();if(o)A(o,n,11,[e+t.map(r=>{var i,c;return(c=(i=r.toString)==null?void 0:i.call(r))!=null?c:JSON.stringify(r)}).join(""),n&&n.proxy,s.map(({vnode:r})=>`at <${re(n,r.type)}>`).join(`
`),s]);else{const r=[`[Vue warn]: ${e}`,...t];s.length&&r.push(`
`,...$e(s)),console.warn(...r)}W=!1}function Fe(){let e=v[v.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}function $e(e){const t=[];return e.forEach((n,o)=>{t.push(...o===0?[]:[`
`],...Ve(n))}),t}function Ve({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=e.component?e.component.parent==null:!1,s=` at <${re(e.component,e.type,o)}`,r=">"+n;return e.props?[s,...Re(e.props),r]:[s+r]}function Re(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(o=>{t.push(...Z(o,e[o]))}),n.length>3&&t.push(" ..."),t}function Z(e,t,n){return Me(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:Te(t)?(t=Z(e,P(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):j(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=P(t),n?t:[`${e}=`,t])}const vt={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function A(e,t,n,o){try{return o?e(...o):e()}catch(s){ee(s,t,n)}}function ee(e,t,n,o=!0){const s=t?t.vnode:null,{errorHandler:r,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||Se;if(t){let c=t.parent;const l=t.proxy,u=`https://vuejs.org/error-reference/#runtime-${n}`;for(;c;){const a=c.ec;if(a){for(let h=0;h<a.length;h++)if(a[h](e,l,u)===!1)return}c=c.parent}if(r){A(r,null,10,[e,l,u]);return}}De(e,n,s,o,i)}function De(e,t,n,o=!0,s=!1){if(s)throw e;console.error(e)}const b=[];let x=-1;const S=[];let k=null,z=0;const je=Promise.resolve();let q=null;const Le=100;function Pe(e){let t=x+1,n=b.length;for(;t<n;){const o=t+n>>>1,s=b[o],r=M(s);r<e||r===e&&s.flags&2?t=o+1:n=o}return t}function We(e){if(!(e.flags&1)){const t=M(e),n=b[b.length-1];!n||!(e.flags&2)&&t>=M(n)?b.push(e):b.splice(Pe(t),0,e),e.flags|=1,te()}}function te(){q||(q=je.then(ne))}function Ae(e){Oe(e)?S.push(...e):k&&e.id===-1?k.splice(z+1,0,e):e.flags&1||(S.push(e),e.flags|=1),te()}function qe(e){if(S.length){const t=[...new Set(S)].sort((n,o)=>M(n)-M(o));if(S.length=0,k){k.push(...t);return}for(k=t,z=0;z<k.length;z++){const n=k[z];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}k=null,z=0}}const M=e=>e.id==null?e.flags&2?-1:1/0:e.id;function ne(e){const t=ze;try{for(x=0;x<b.length;x++){const n=b[x];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),A(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;x<b.length;x++){const n=b[x];n&&(n.flags&=-2)}x=-1,b.length=0,qe(e),q=null,(b.length||S.length)&&ne(e)}}function St(e,t){const n=e.get(t)||0;if(n>Le){const o=t.i,s=o&&se(o.type);return ee(`Maximum recursive updates exceeded${s?` in component <${s}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}const H=new Map,F=new Map;function zt(e,t){return F.has(e)?!1:(F.set(e,{initialDef:$(t),instances:new Set}),!0)}function $(e){return Je(e)?e.__vccOpts:e}function Ct(e,t){const n=F.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(o=>{t&&(o.render=t,$(o.type).render=t),o.renderCache=[],o.update()}))}function Ot(e,t){const n=F.get(e);if(!n)return;t=$(t),oe(n.initialDef,t);const o=[...n.instances];for(let s=0;s<o.length;s++){const r=o[s],i=$(r.type);let c=H.get(i);c||(i!==n.initialDef&&oe(i,t),H.set(i,c=new Set)),c.add(r),r.appContext.propsCache.delete(r.type),r.appContext.emitsCache.delete(r.type),r.appContext.optionsCache.delete(r.type),r.ceReload?(c.add(r),r.ceReload(t.styles),c.delete(r)):r.parent?We(()=>{r.parent.update(),c.delete(r)}):r.appContext.reload?r.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required."),r.root.ce&&r!==r.root&&r.root.ce._removeChildStyle(i)}Ae(()=>{H.clear()})}function oe(e,t){Ce(e,t);for(const n in e)n!=="__file"&&!(n in t)&&delete e[n]}function Mt(e){return(t,n)=>{try{return e(t,n)}catch(o){console.error(o),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}L().requestIdleCallback,L().cancelIdleCallback;const Nt={};{const e=L(),t=(n,o)=>{let s;return(s=e[n])||(s=e[n]=[]),s.push(o),r=>{s.length>1?s.forEach(i=>i(r)):s[0](r)}};t("__VUE_INSTANCE_SETTERS__",n=>n),t("__VUE_SSR_SETTERS__",n=>n)}const He=/(?:^|[-_])(\w)/g,Ue=e=>e.replace(He,t=>t.toUpperCase()).replace(/[-_]/g,"");function se(e,t=!0){return j(e)?e.displayName||e.name:e.name||t&&e.__name}function re(e,t,n=!1){let o=se(t);if(!o&&t.__file){const s=t.__file.match(/([^/\\]+)\.\w+$/);s&&(o=s[1])}if(!o&&e&&e.parent){const s=r=>{for(const i in r)if(r[i]===t)return i};o=s(e.components||e.parent.type.components)||s(e.appContext.components)}return o?Ue(o):n?"App":"Anonymous"}function Je(e){return j(e)&&"__vccOpts"in e}[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:Ge}=Object,{fromEntries:Be}=Object,Ye="ENTRIES",ie="KEYS",ce="VALUES",y="";class U{set;_type;_path;constructor(t,n){const o=t._tree,s=Array.from(o.keys());this.set=t,this._type=n,this._path=s.length>0?[{node:o,keys:s}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:n}=C(this._path);if(C(n)===y)return{done:!1,value:this.result()};const o=t.get(C(n));return this._path.push({node:o,keys:Array.from(o.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=C(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>C(t)).filter(t=>t!==y).join("")}value(){return C(this._path).node.get(y)}result(){switch(this._type){case ce:return this.value();case ie:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const C=e=>e[e.length-1],Ke=(e,t,n)=>{const o=new Map;if(typeof t!="string")return o;const s=t.length+1,r=s+n,i=new Uint8Array(r*s).fill(n+1);for(let c=0;c<s;++c)i[c]=c;for(let c=1;c<r;++c)i[c*s]=c;return le(e,t,n,o,i,1,s,""),o},le=(e,t,n,o,s,r,i,c)=>{const l=r*i;e:for(const u of e.keys())if(u===y){const a=s[l-1];a<=n&&o.set(c,[e.get(u),a])}else{let a=r;for(let h=0;h<u.length;++h,++a){const g=u[h],m=i*a,w=m-i;let d=s[m];const f=Math.max(0,a-n-1),p=Math.min(i-1,a+n);for(let _=f;_<p;++_){const E=g!==t[_],D=s[w+_]+ +E,T=s[w+_+1]+1,I=s[m+_]+1,O=s[m+_+1]=Math.min(D,T,I);O<d&&(d=O)}if(d>n)continue e}le(e.get(u),t,n,o,s,a,i,c+u)}};let ue=class N{_tree;_prefix;_size=void 0;constructor(t=new Map,n=""){this._tree=t,this._prefix=n}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[n,o]=V(this._tree,t.slice(this._prefix.length));if(n===void 0){const[s,r]=B(o);for(const i of s.keys())if(i!==y&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),s.get(i)),new N(c,t)}}return new N(n,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,Qe(this._tree,t)}entries(){return new U(this,Ye)}forEach(t){for(const[n,o]of this)t(n,o,this)}fuzzyGet(t,n){return Ke(this._tree,t,n)}get(t){const n=J(this._tree,t);return n!==void 0?n.get(y):void 0}has(t){return J(this._tree,t)?.has(y)??!1}keys(){return new U(this,ie)}set(t,n){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,G(this._tree,t).set(y,n),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);return o.set(y,n(o.get(y))),this}fetch(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);let s=o.get(y);return s===void 0&&o.set(y,s=n()),s}values(){return new U(this,ce)}[Symbol.iterator](){return this.entries()}static from(t){const n=new N;for(const[o,s]of t)n.set(o,s);return n}static fromObject(t){return N.from(Object.entries(t))}};const V=(e,t,n=[])=>{if(t.length===0||e==null)return[e,n];for(const o of e.keys())if(o!==y&&t.startsWith(o))return n.push([e,o]),V(e.get(o),t.slice(o.length),n);return n.push([e,t]),V(void 0,"",n)},J=(e,t)=>{if(t.length===0||!e)return e;for(const n of e.keys())if(n!==y&&t.startsWith(n))return J(e.get(n),t.slice(n.length))},G=(e,t)=>{const n=t.length;e:for(let o=0;e&&o<n;){for(const r of e.keys())if(r!==y&&t[o]===r[0]){const i=Math.min(n-o,r.length);let c=1;for(;c<i&&t[o+c]===r[c];)++c;const l=e.get(r);if(c===r.length)e=l;else{const u=new Map;u.set(r.slice(c),l),e.set(t.slice(o,o+c),u),e.delete(r),e=u}o+=c;continue e}const s=new Map;return e.set(t.slice(o),s),s}return e},Qe=(e,t)=>{const[n,o]=V(e,t);if(n!==void 0){if(n.delete(y),n.size===0)ae(o);else if(n.size===1){const[s,r]=n.entries().next().value;fe(o,s,r)}}},ae=e=>{if(e.length===0)return;const[t,n]=B(e);if(t.delete(n),t.size===0)ae(e.slice(0,-1));else if(t.size===1){const[o,s]=t.entries().next().value;o!==y&&fe(e.slice(0,-1),o,s)}},fe=(e,t,n)=>{if(e.length===0)return;const[o,s]=B(e);o.set(s+t,n),o.delete(s)},B=e=>e[e.length-1],Xe=(e,t)=>{const n=e._idToShortId.get(t);if(n!=null)return e._storedFields.get(n)},Ze=/[\n\r\p{Z}\p{P}]+/u,Y="or",de="and",et="and_not",tt=(e,t)=>{e.includes(t)||e.push(t)},he=(e,t)=>{for(const n of t)e.includes(n)||e.push(n)},pe=({score:e},{score:t})=>t-e,nt=()=>new Map,R=e=>{const t=new Map;for(const n of Object.keys(e))t.set(parseInt(n,10),e[n]);return t},ge=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,me={[Y]:(e,t)=>{for(const n of t.keys()){const o=e.get(n);if(o==null)e.set(n,t.get(n));else{const{score:s,terms:r,match:i}=t.get(n);o.score=o.score+s,o.match=Object.assign(o.match,i),he(o.terms,r)}}return e},[de]:(e,t)=>{const n=new Map;for(const o of t.keys()){const s=e.get(o);if(s==null)continue;const{score:r,terms:i,match:c}=t.get(o);he(s.terms,i),n.set(o,{score:s.score+r,terms:s.terms,match:Object.assign(s.match,c)})}return n},[et]:(e,t)=>{for(const n of t.keys())e.delete(n);return e}},ot=(e,t,n,o,s,r)=>{const{k:i,b:c,d:l}=r;return Math.log(1+(n-t+.5)/(t+.5))*(l+e*(i+1)/(e+i*(1-c+c*o/s)))},st=e=>(t,n,o)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,n,o):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,n,o):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,n,o):1}),_e=(e,t,n,o)=>{for(const s of Object.keys(e._fieldIds))if(e._fieldIds[s]===n){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${o}" was not present in field "${s}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},rt=(e,t,n,o)=>{if(!e._index.has(o)){_e(e,n,t,o);return}const s=e._index.fetch(o,nt),r=s.get(t),i=r?.get(n);!r||typeof i>"u"?_e(e,n,t,o):i<=1?r.size<=1?s.delete(t):r.delete(n):r.set(n,i-1),e._index.get(o).size===0&&e._index.delete(o)},it={k:1.2,b:.7,d:.5},ct={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(Ze),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},ye={combineWith:Y,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:it},lt={combineWith:de,prefix:(e,t,n)=>t===n.length-1},ut={batchSize:1e3,batchWait:10},we={minDirtFactor:.1,minDirtCount:20},at={...ut,...we},be=Symbol("*"),ft=(e,t)=>{const n=new Map,o={...e._options.searchOptions,...t};for(const[s,r]of e._documentIds){const i=o.boostDocument?o.boostDocument(r,"",e._storedFields.get(s)):1;n.set(s,{score:i,terms:[],match:{}})}return n},xe=(e,t=Y)=>{if(e.length===0)return new Map;const n=t.toLowerCase();if(!(n in me))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(me[n])},K=(e,t,n,o,s,r,i,c,l,u=new Map)=>{if(r==null)return u;for(const a of Object.keys(i)){const h=i[a],g=e._fieldIds[a],m=r.get(g);if(m==null)continue;let w=m.size;const d=e._avgFieldLength[g];for(const f of m.keys()){if(!e._documentIds.has(f)){rt(e,g,f,n),w-=1;continue}const p=c?c(e._documentIds.get(f),n,e._storedFields.get(f)):1;if(!p)continue;const _=m.get(f),E=e._fieldLength.get(f)[g],D=ot(_,w,e._documentCount,E,d,l),T=o*s*h*p*D,I=u.get(f);if(I){I.score+=T,tt(I.terms,t);const O=ge(I.match,n);O?O.push(a):I.match[n]=[a]}else u.set(f,{score:T,terms:[t],match:{[n]:[a]}})}}return u},dt=(e,t,n)=>{const o={...e._options.searchOptions,...n},s=(o.fields??e._options.fields).reduce((d,f)=>({...d,[f]:ge(o.boost,f)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:l}=o,{fuzzy:u,prefix:a}={...ye.weights,...i},h=e._index.get(t.term),g=K(e,t.term,t.term,1,t.termBoost,h,s,r,l);let m,w;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,f=d<1?Math.min(c,Math.round(t.term.length*d)):d;f&&(w=e._index.fuzzyGet(t.term,f))}if(m)for(const[d,f]of m){const p=d.length-t.term.length;if(!p)continue;w?.delete(d);const _=a*d.length/(d.length+.3*p);K(e,t.term,d,_,t.termBoost,f,s,r,l,g)}if(w)for(const d of w.keys()){const[f,p]=w.get(d);if(!p)continue;const _=u*d.length/(d.length+p);K(e,t.term,d,_,t.termBoost,f,s,r,l,g)}return g},ke=(e,t,n={})=>{if(t===be)return ft(e,n);if(typeof t!="string"){const a={...n,...t,queries:void 0},h=t.queries.map(g=>ke(e,g,a));return xe(h,a.combineWith)}const{tokenize:o,processTerm:s,searchOptions:r}=e._options,i={tokenize:o,processTerm:s,...r,...n},{tokenize:c,processTerm:l}=i,u=c(t).flatMap(a=>l(a)).filter(a=>!!a).map(st(i)).map(a=>dt(e,a,i));return xe(u,i.combineWith)},Ee=(e,t,n={})=>{const{searchOptions:o}=e._options,s={...o,...n},r=ke(e,t,n),i=[];for(const[c,{score:l,terms:u,match:a}]of r){const h=u.length||1,g={id:e._documentIds.get(c),score:l*h,terms:Object.keys(a),queryTerms:u,match:a};Object.assign(g,e._storedFields.get(c)),(s.filter==null||s.filter(g))&&i.push(g)}return t===be&&s.boostDocument==null||i.sort(pe),i},ht=(e,t,n={})=>{n={...e._options.autoSuggestOptions,...n};const o=new Map;for(const{score:r,terms:i}of Ee(e,t,n)){const c=i.join(" "),l=o.get(c);l!=null?(l.score+=r,l.count+=1):o.set(c,{score:r,terms:i,count:1})}const s=[];for(const[r,{score:i,terms:c,count:l}]of o)s.push({suggestion:r,terms:c,score:i/l});return s.sort(pe),s};class pt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const n=t.autoVacuum==null||t.autoVacuum===!0?at:t.autoVacuum;this._options={...ct,...t,autoVacuum:n,searchOptions:{...ye,...t.searchOptions},autoSuggestOptions:{...lt,...t.autoSuggestOptions}},this._index=new ue,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=we,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[n,o]of this._index){const s={};for(const[r,i]of o)s[r]=Object.fromEntries(i);t.push([n,s])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let n=0;n<t.length;n++)this._fieldIds[t[n]]=n}}const gt=e=>new pt(e),mt=({documentCount:e,nextId:t,fieldIds:n,averageFieldLength:o,dirtCount:s,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=gt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=n,c._avgFieldLength=o,c._dirtCount=s??0,c._index=new ue,c},_t=(e,t)=>{const{index:n,documentIds:o,fieldLength:s,storedFields:r}=e,i=mt(e,t);i._documentIds=R(o),i._fieldLength=R(s),i._storedFields=R(r);for(const[c,l]of i._documentIds)i._idToShortId.set(l,c);for(const[c,l]of n){const u=new Map;for(const a of Object.keys(l))u.set(parseInt(a,10),R(l[a]));i._index.set(c,u)}return i},Q=(e,t)=>{const n=e.toLowerCase(),o=t.toLowerCase(),s=[];let r=0,i=0;const c=(u,a=!1)=>{let h;i===0?h=u.length>20?`… ${u.slice(-20)}`:u:a?h=u.length+i>100?`${u.slice(0,100-i)}… `:u:h=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,h&&s.push(h),i+=h.length,a||(s.push(["mark",t]),i+=t.length,i>=100&&s.push(" …"))};let l=n.indexOf(o,r);if(l===-1)return null;for(;l>=0;){const u=l+o.length;if(c(e.slice(r,l)),r=u,i>100)break;l=n.indexOf(o,r)}return i<100&&c(e.slice(r),!0),s},{entries:yt}=Object,wt=(e,t)=>t.contents.reduce((n,[,o])=>n+o,0)-e.contents.reduce((n,[,o])=>n+o,0),bt=(e,t)=>Math.max(...t.contents.map(([,n])=>n))-Math.max(...e.contents.map(([,n])=>n)),Ie=(e,t,n={},o="max")=>{const s={};return Ee(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...n}).forEach(r=>{const{id:i,terms:c,score:l}=r,u=i.includes("@"),a=i.includes("#"),[h,g]=i.split(/[#@]/),m=Number(h),w=c.sort((f,p)=>f.length-p.length).filter((f,p)=>c.slice(p+1).every(_=>!_.includes(f))),{contents:d}=s[m]??={title:"",contents:[]};if(u)d.push([{type:"customField",id:m,index:g,display:w.map(f=>r.c.map(p=>Q(p,f))).flat().filter(f=>f!==null)},l]);else{const f=w.map(p=>Q(r.h,p)).filter(p=>p!==null);if(f.length&&d.push([{type:a?"heading":"title",id:m,...a&&{anchor:g},display:f},l]),"t"in r&&r.t)for(const p of r.t){const _=w.map(E=>Q(p,E)).filter(E=>E!==null);_.length&&d.push([{type:"text",id:m,...a&&{anchor:g},display:_},l])}}}),yt(s).sort(([,r],[,i])=>(o?wt:bt)(r,i)).map(([r,{title:i,contents:c}])=>{if(!i){const l=Xe(t,r);l&&(i=l.h)}return{title:i,contents:c.map(([l])=>l)}})},ve=(e,t,n={})=>{const o=ht(t,e,{fuzzy:.2,maxFuzzy:3,...n}).map(({suggestion:s})=>s);return e.includes(" ")?o:o.filter(s=>!s.includes(" "))},xt=Be(Ge(JSON.parse("{\"/\":{\"documentCount\":69,\"nextId\":69,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2#java\",\"3\":\"3\",\"4\":\"3#自增自减运算符\",\"5\":\"3#移位运算符\",\"6\":\"3#continue、break-和-return\",\"7\":\"3#基本数据类型\",\"8\":\"3#基本类型和包装类型的区别\",\"9\":\"3#包装类型的缓存机制\",\"10\":\"3#自动装箱与自动拆箱\",\"11\":\"3#浮点数运算的精度丢失\",\"12\":\"3#变量\",\"13\":\"3#方法\",\"14\":\"3#修饰符\",\"15\":\"3#面向对象\",\"16\":\"3#为什么要用接口\",\"17\":\"3#接口和抽象类\",\"18\":\"3#深拷贝和浅拷贝\",\"19\":\"3#object\",\"20\":\"3#和-equals-的区别\",\"21\":\"3#hashcode\",\"22\":\"3#string\",\"23\":\"3#异常\",\"24\":\"3#泛型\",\"25\":\"3#反射\",\"26\":\"3#注解\",\"27\":\"3#序列化和反序列化\",\"28\":\"3#i-o\",\"29\":\"3#值传递\",\"30\":\"3#代理\",\"31\":\"3#静态代理\",\"32\":\"3#动态代理\",\"33\":\"3#jdk-动态代理\",\"34\":\"3#cglib-动态代理\",\"35\":\"3#两者对比\",\"36\":\"3#两者对比-1\",\"37\":\"3#bigdecimal\",\"38\":\"3#语法糖\",\"39\":\"3#静态、构造代码块等执行顺序\",\"40\":\"3#和-以及-和\",\"41\":\"4\",\"42\":\"4#标题-2\",\"43\":\"4#标题-3\",\"44\":\"5\",\"45\":\"5#标题-2\",\"46\":\"5#标题-3\",\"47\":\"6\",\"48\":\"6#标题-2\",\"49\":\"6#标题-3\",\"50\":\"7\",\"51\":\"7#标题-2\",\"52\":\"7#标题-3\",\"53\":\"8\",\"54\":\"8#标题-2\",\"55\":\"8#标题-3\",\"56\":\"9\",\"57\":\"9#标题-2\",\"58\":\"9#标题-3\",\"59\":\"10\",\"60\":\"10#标题-2\",\"61\":\"10#标题-3\",\"62\":\"11\",\"63\":\"12\",\"64\":\"13\",\"65\":\"14\",\"66\":\"15\",\"67\":\"16\",\"68\":\"17\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,11],\"1\":[1,7],\"2\":[1,2],\"3\":[3],\"4\":[3,98],\"5\":[2,291],\"6\":[6,72],\"7\":[2,222],\"8\":[6,172],\"9\":[5,135],\"10\":[4,92],\"11\":[5,113],\"12\":[1,176],\"13\":[1,172],\"14\":[1,207],\"15\":[1,345],\"16\":[4,3],\"17\":[3,240],\"18\":[4,117],\"19\":[1,159],\"20\":[8,95],\"21\":[3,270],\"22\":[1,459],\"23\":[1,242],\"24\":[1,274],\"25\":[1,243],\"26\":[1,100],\"27\":[3,141],\"28\":[3,117],\"29\":[2,189],\"30\":[1],\"31\":[2,180],\"32\":[2,71],\"33\":[4,187],\"34\":[4,207],\"35\":[2,54],\"36\":[2,66],\"37\":[1,184],\"38\":[2,52],\"39\":[8,31],\"40\":[5,21],\"41\":[4],\"42\":[3,4],\"43\":[3,4],\"44\":[4],\"45\":[3,4],\"46\":[3,4],\"47\":[4],\"48\":[3,4],\"49\":[3,4],\"50\":[2],\"51\":[3,4],\"52\":[3,5],\"53\":[1],\"54\":[3,4],\"55\":[3,4],\"56\":[1],\"57\":[3,4],\"58\":[3,5],\"59\":[1],\"60\":[3,4],\"61\":[3,5],\"62\":[0,4],\"63\":[1],\"64\":[1],\"65\":[1],\"66\":[1],\"67\":[1],\"68\":[1]},\"averageFieldLength\":[2.579710144927536,110.35465509452975],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"1\":{\"h\":\"知识库\",\"t\":[\"此处是整个知识库文档的目录\"]},\"2\":{\"h\":\"Java\",\"t\":[\"Java基础\"]},\"3\":{\"h\":\"Java 基础\"},\"4\":{\"h\":\"自增自减运算符\",\"t\":[\"在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1。Java 提供了自增运算符 (++) 和自减运算符 (--) 来简化这种操作。\",\"++ 和 -- 运算符可以放在变量之前，也可以放在变量之后：\",\"前缀形式（例如 ++a 或 --a）：先自增/自减变量的值，然后再使用该变量，例如，b = ++a 先将 a 增加 1，然后把增加后的值赋给 b。\",\"后缀形式（例如 a++ 或 a--）：先使用变量的当前值，然后再自增/自减变量的值。例如，b = a++ 先将 a 的当前值赋给 b，然后再将 a 增加 1。\",\"为了方便记忆，可以使用下面的口诀：符号在前就先加/减，符号在后就后加/减。\",\"下面来看一个考察自增自减运算符的高频笔试题：执行下面的代码后，a 、b 、 c 、d和e的值是？\",\"int a = 9; int b = a++; // b=9,a=10 int c = ++a; // c=11,a=11 int d = c--; // d=11,c=10 int e = --d; // e=10,d=10 // a=11,b=9,c=10,d=10,e=10\"]},\"5\":{\"h\":\"移位运算符\",\"t\":[\"移位运算符是最基本的运算符之一，几乎每种编程语言都包含这一运算符。移位操作中，被操作的数据被视为二进制数，移位就是将其向左或向右移动若干位的运算。\",\"移位运算符在各种框架以及 JDK 自身的源码中使用还是挺广泛的，HashMap（JDK1.8） 中的 hash 方法的源码就用到了移位运算符：\",\"static final int hash(Object key) { int h; // key.hashCode()：返回散列值也就是hashcode // ^：按位异或 // >>>:无符号右移，忽略符号位，空位都以0补齐 return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); }\",\"使用移位运算符的主要原因：\",\"高效：移位运算符直接对应于处理器的移位指令。现代处理器具有专门的硬件指令来执行这些移位操作，这些指令通常在一个时钟周期内完成。相比之下，乘法和除法等算术运算在硬件层面上需要更多的时钟周期来完成。\",\"节省内存：通过移位操作，可以使用一个整数（如 int 或 long）来存储多个布尔值或标志位，从而节省内存。\",\"移位运算符最常用于快速乘以或除以 2 的幂次方。除此之外，它还在以下方面发挥着重要作用：\",\"位字段管理：例如存储和操作多个布尔值。\",\"哈希算法和加密解密：通过移位和与、或等操作来混淆数据。\",\"数据压缩：例如霍夫曼编码通过移位运算符可以快速处理和操作二进制数据，以生成紧凑的压缩格式。\",\"数据校验：例如 CRC（循环冗余校验）通过移位和多项式除法生成和校验数据完整性。。\",\"内存对齐：通过移位操作，可以轻松计算和调整数据的对齐地址。\",\"掌握最基本的移位运算符知识还是很有必要的，这不光可以帮助我们在代码中使用，还可以帮助我们理解源码中涉及到移位运算符的代码。\",\"Java 中有三种移位运算符：\",\"<< :左移运算符，向左移若干位，高位丢弃，低位补零。x << n,相当于 x 乘以 2 的 n 次方(不溢出的情况下)。\",\">> :带符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。x >> n,相当于 x 除以 2 的 n 次方。\",\">>> :无符号右移，忽略符号位，空位都以 0 补齐。\",\"虽然移位运算本质上可以分为左移和右移，但在实际应用中，右移操作需要考虑符号位的处理方式。\",\"由于 double，float 在二进制中的表现比较特殊，因此不能来进行移位操作。\",\"移位操作符实际上支持的类型只有int和long，编译器在对short、byte、char类型进行移位前，都会将其转换为int类型再操作。\",\"如果移位的位数超过数值所占有的位数会怎样？\",\"当 int 类型左移/右移位数大于等于 32 位操作时，会先求余（%）后再进行左移/右移操作。也就是说左移/右移 32 位相当于不进行移位操作（32%32=0），左移/右移 42 位相当于左移/右移 10 位（42%32=10）。当 long 类型进行左移/右移操作时，由于 long 对应的二进制是 64 位，因此求余操作的基数也变成了 64。\",\"也就是说：x<<42等同于x<<10，x>>42等同于x>>10，x >>>42等同于x >>> 10。\",\"int i = -1; System.out.println(\\\"初始数据：\\\" + i); System.out.println(\\\"初始数据对应的二进制字符串：\\\" + Integer.toBinaryString(i)); i <<= 10; System.out.println(\\\"左移 10 位后的数据 \\\" + i); System.out.println(\\\"左移 10 位后的数据对应的二进制字符 \\\" + Integer.toBinaryString(i));\",\"输出：\",\"初始数据：-1 初始数据对应的二进制字符串：11111111111111111111111111111111 左移 10 位后的数据 -1024 左移 10 位后的数据对应的二进制字符 11111111111111111111110000000000\"]},\"6\":{\"h\":\"continue、break 和 return\",\"t\":[\"在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后 ，提前终止循环，这就需要用到下面几个关键词：\",\"continue：指跳出当前的这一次循环，继续下一次循环。\",\"break：指跳出整个循环体，继续执行循环下面的语句。\",\"return 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：\",\"return;：直接使用 return 结束方法执行，用于没有返回值函数的方法\",\"return value;：return 一个特定值，用于有返回值函数的方法\"]},\"7\":{\"h\":\"基本数据类型\",\"t\":[\"Java 中有 8 种基本数据类型，分别为：\",\"6 种数字类型： \",\"4 种整数型：byte、short、int、long\",\"2 种浮点型：float、double\",\"1 种字符类型：char\",\"1 种布尔型：boolean。\",\"这 8 种基本数据类型的默认值以及所占空间的大小如下：\",\"基本类型\",\"位数\",\"字节\",\"默认值\",\"取值范围\",\"byte\",\"8\",\"1\",\"0\",\"-128 ~ 127\",\"short\",\"16\",\"2\",\"0\",\"-32768（-2^15） ~ 32767（2^15 - 1）\",\"int\",\"32\",\"4\",\"0\",\"-2147483648 ~ 2147483647\",\"long\",\"64\",\"8\",\"0L\",\"-9223372036854775808（-2^63） ~ 9223372036854775807（2^63 -1）\",\"char\",\"16\",\"2\",\"'u0000'\",\"0 ~ 65535（2^16 - 1）\",\"float\",\"32\",\"4\",\"0f\",\"1.4E-45 ~ 3.4028235E38\",\"double\",\"64\",\"8\",\"0d\",\"4.9E-324 ~ 1.7976931348623157E308\",\"boolean\",\"1\",\"false\",\"true、false\",\"可以看到，像 byte、short、int、long能表示的最大正数都减 1 了。这是为什么呢？这是因为在二进制补码表示法中，最高位是用来表示符号的（0 表示正数，1 表示负数），其余位表示数值部分。所以，如果我们要表示最大的正数，我们需要把除了最高位之外的所有位都设为 1。如果我们再加 1，就会导致溢出，变成一个负数。\",\"对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。\",\"另外，Java 的每种基本类型所占存储空间的大小不会像其他大多数语言那样随机器硬件架构的变化而变化。这种所占存储空间大小的不变性是 Java 程序比用其他大多数语言编写的程序更具可移植性的原因之一（《Java 编程思想》2.2 节有提到）。\",\"注意：\",\"Java 里使用 long 类型的数据一定要在数值后面加上 L，否则将作为整型解析。\",\"Java 里使用 float 类型的数据一定要在数值后面加上 f 或 F，否则将无法通过编译。\",\"char a = 'h'char :单引号，String a = \\\"hello\\\" :双引号。\",\"这八种基本类型都有对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean 。\"]},\"8\":{\"h\":\"基本类型和包装类型的区别\",\"t\":[\"用途：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以。\",\"存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 static 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。\",\"占用空间：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。\",\"默认值：成员变量包装类型不赋值就是 null ，而基本类型有默认值且不是 null。\",\"比较方式：对于基本数据类型来说，== 比较的是值。对于包装数据类型来说，== 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 equals() 方法。\",\"为什么说是几乎所有对象实例都存在于堆中呢？ 这是因为 HotSpot 虚拟机引入了 JIT 优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存\",\"⚠️ 注意：基本数据类型存放在栈中是一个常见的误区！ 基本数据类型的存储位置取决于它们的作用域和声明方式。如果它们是局部变量，那么它们会存放在栈中；如果它们是成员变量，那么它们会存放在堆/方法区/元空间中。\",\"public class Test { // 成员变量，存放在堆中 int a = 10; // 被 static 修饰的成员变量，JDK 1.7 及之前位于方法区，1.8 后存放于元空间，均不存放于堆中。 // 变量属于类，不属于对象。 static int b = 20; public void method() { // 局部变量，存放在栈中 int c = 30; static int d = 40; // 编译错误，不能在方法中使用 static 修饰局部变量 } }\"]},\"9\":{\"h\":\"包装类型的缓存机制\",\"t\":[\"Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。\",\"Byte,Short,Integer,Long 这 4 种包装类默认创建了数值 [-128，127] 的相应类型的缓存数据，Character 创建了数值在 [0,127] 范围的缓存数据，Boolean 直接返回 True or False。\",\"如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。\",\"两种浮点数类型的包装类 Float,Double 并没有实现缓存机制。\",\"//Integer i1=40 这一行代码会发生装箱，也就是说这行代码等价于 Integer i1=Integer.valueOf(40) 。因此，i1 直接使用的是缓存中的对象。而Integer i2 = new Integer(40) 会直接创建新的对象。 ------ 著作权归JavaGuide(javaguide.cn)所有 基于MIT协议 原文链接：https://javaguide.cn/java/basis/java-basic-questions-01.htmlInteger i1 = 33; Integer i2 = 33; System.out.println(i1 == i2);// 输出 true Float i11 = 333f; Float i22 = 333f; System.out.println(i11 == i22);// 输出 false Double i3 = 1.2; Double i4 = 1.2; System.out.println(i3 == i4);// 输出 false Integer i1 = 40; Integer i2 = new Integer(40); System.out.println(i1==i2);// 输出 false //Integer i1=40 这一行代码会发生装箱，也就是说这行代码等价于 Integer i1=Integer.valueOf(40) 。因此，i1 直接使用的是缓存中的对象。而Integer i2 = new Integer(40) 会直接创建新的对象。\",\"所有整型包装类对象之间值的比较，全部使用 equals 方法比较。\",\"image-20241010205833833\"]},\"10\":{\"h\":\"自动装箱与自动拆箱\",\"t\":[\"什么是自动拆装箱？\",\"装箱：将基本类型用它们对应的引用类型包装起来；\",\"拆箱：将包装类型转换为基本数据类型；\",\"Integer i = 10; //装箱 int n = i; //拆箱\",\"上面这两行代码对应的字节码为：\",\" L1 LINENUMBER 8 L1 ALOAD 0 BIPUSH 10 INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer; PUTFIELD AutoBoxTest.i : Ljava/lang/Integer; L2 LINENUMBER 9 L2 ALOAD 0 ALOAD 0 GETFIELD AutoBoxTest.i : Ljava/lang/Integer; INVOKEVIRTUAL java/lang/Integer.intValue ()I PUTFIELD AutoBoxTest.n : I RETURN\",\"从字节码中，我们发现装箱其实就是调用了 包装类的valueOf()方法，拆箱其实就是调用了 xxxValue()方法。\",\"因此，\",\"Integer i = 10 等价于 Integer i = Integer.valueOf(10)\",\"int n = i 等价于 int n = i.intValue();\",\"注意：如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。\"]},\"11\":{\"h\":\"浮点数运算的精度丢失\",\"t\":[\"这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示。\",\"就比如说十进制下的 0.2 就没办法精确转换成二进制小数：\",\"// 0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止， // 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。 0.2 * 2 = 0.4 -> 0 0.4 * 2 = 0.8 -> 0 0.8 * 2 = 1.6 -> 1 0.6 * 2 = 1.2 -> 1 0.2 * 2 = 0.4 -> 0（发生循环） ...\",\"BigDecimal 可以实现对浮点数的运算，不会造成精度丢失。通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 BigDecimal 来做的。\"]},\"12\":{\"h\":\"变量\",\"t\":[\"成员变量与局部变量的区别\",\"语法形式：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\",\"存储方式：从变量在内存中的存储方式来看，如果成员变量是使用 static 修饰的，那么这个成员变量是属于类的，如果没有使用 static 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。\",\"生存时间：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。\",\"默认值：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。\",\"image-20241013235255230\",\"为什么成员变量有默认值？\",\"先不考虑变量类型，如果没有默认值会怎样？变量存储的是内存地址对应的任意随机值，程序读取该值运行会出现意外。\",\"默认值有两种设置方式：手动和自动，根据第一点，没有手动赋值一定要自动赋值。成员变量在运行时可借助反射等方法手动赋值，而局部变量不行。\",\"对于编译器（javac）来说，局部变量没赋值很好判断，可以直接报错。而成员变量可能是运行时赋值，无法判断，误报“没默认值”又会影响用户体验，所以采用自动赋默认值。\",\"静态变量\",\"静态变量也就是被 static 关键字修饰的变量。它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。也就是说，静态变量只会被分配一次内存，即使创建多个对象，这样可以节省内存。\",\"静态变量是通过类名来访问的，例如StaticVariableExample.staticVar（如果被 private关键字修饰就无法这样访问了）。\"]},\"13\":{\"h\":\"方法\",\"t\":[\"静态方法为什么不能调用非静态成员？\",\"这个需要结合 JVM 的相关知识，主要原因如下：\",\"静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。\",\"在类的非静态成员不存在的时候静态方法就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。\",\"静态方法和实例方法有何不同？\",\"1、调用方式\",\"在外部调用静态方法时，可以使用 类名.方法名 的方式，也可以使用 对象.方法名 的方式，而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象 。\",\"不过，需要注意的是一般不建议使用 对象.方法名 的方式来调用静态方法。这种方式非常容易造成混淆，静态方法不属于类的某个对象而是属于这个类。\",\"因此，一般建议使用 类名.方法名 的方式来调用静态方法。\",\"2、访问类成员是否存在限制\",\"静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。\",\"重载和重写的区别\",\"重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理\",\"重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法\",\"重载发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理\",\"重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。\",\"方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。\",\"如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。\",\"构造方法无法被重写\"]},\"14\":{\"h\":\"修饰符\",\"t\":[\"（1）public：修饰的类、方法和变量可以被任何其他类访问。\",\"（2）private：不能用于顶级类（即非嵌套类），只能用于内部类；方法和变量只能在定义它的类内部访问。\",\"（3）default：即不加任何访问修饰符，通常称为“默认访问模式“。修饰的类、方法和变量可以被同一包中的其他类访问。\",\"（4）protected：不能用于顶级类（即非嵌套类），只能用于内部类；方法和变量可以被同一包中的其他类访问，也可以被不同包中的子类访问。\",\"（5）static：static 修饰符用于表示类级别的成员，而不是实例级别的成员。也就是说，static 成员属于类，而不属于类的任何特定实例。\",\"静态变量（类变量）：定义在类中的变量，如果用 static 修饰，则该变量是所有对象共享的。\",\"public class MyClass { public static int staticVar = 0; public void incrementStaticVar() { staticVar++; } } public class Main { public static void main(String[] args) { MyClass obj1 = new MyClass(); MyClass obj2 = new MyClass(); obj1.incrementStaticVar(); obj2.incrementStaticVar(); System.out.println(MyClass.staticVar); // 输出：2 } }\",\"静态方法：静态方法可以直接通过类名调用，不需要创建类的实例。静态方法不能访问实例变量和实例方法，只能访问静态变量和静态方法。\",\"public class MyClass { public static void staticMethod() { System.out.println(\\\"This is a static method.\\\"); } } public class Main { public static void main(String[] args) { MyClass.staticMethod(); // 调用静态方法 } }\",\"静态块：静态块用于初始化静态变量，在类加载时执行。\",\"public class MyClass { static { System.out.println(\\\"Static block executed.\\\"); } } public class Main { public static void main(String[] args) { MyClass obj = new MyClass(); // 静态块在类加载时执行 } }\",\"（6）final：final 修饰符用于表示常量、不可继承的类或不可重写的方法。\",\"final变量：使用 final 修饰的变量不可改变，必须在声明时或通过构造方法初始化。\",\"public class MyClass { public final int finalVar = 10; public void changeFinalVar() { // finalVar = 20; // 错误：无法改变 final 变量 } }\",\"final方法：使用 final 修饰的方法不能被子类重写。\",\"public class Parent { public final void finalMethod() { System.out.println(\\\"This method cannot be overridden.\\\"); } } public class Child extends Parent { // public void finalMethod() { // 错误：无法重写 final 方法 // } }\",\"final类：使用 final 修饰的类不能被继承。\",\"public final class MyClass { // Class implementation } // public class SubClass extends MyClass { // 错误：无法继承 final 类 // }\",\"（7）synchronized\",\"synchronized 修饰符用于控制线程同步，以确保在同一时间只有一个线程可以访问某个代码块或方法。\",\"（8）abstract\",\"abstract 修饰符用于创建抽象类和抽象方法，抽象类不能被实例化，抽象方法没有方法体。\",\"可变长参数\",\"从 Java5 开始，Java 支持定义可变长参数，所谓可变长参数就是允许在调用方法时传入不定长度的参数。就比如下面这个方法就可以接受 0 个或者多个参数。\",\"public static void method1(String... args) { //...... }\",\"另外，可变参数只能作为函数的最后一个参数，但其前面可以有也可以没有任何其他参数。\",\"public static void method2(String arg1, String... args) { //...... }\"]},\"15\":{\"h\":\"面向对象\",\"t\":[\"面向过程编程（Procedural-Oriented Programming，POP）和面向对象编程（Object-Oriented Programming，OOP）是两种常见的编程范式，两者的主要区别在于解决问题的方式不同：\",\"面向过程编程（POP）：面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。\",\"面向对象编程（OOP）：面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。\",\"相比较于 POP，OOP 开发的程序一般具有下面这些优点：\",\"易维护：由于良好的结构和封装性，OOP 程序通常更容易维护。\",\"易复用：通过继承和多态，OOP 设计使得代码更具复用性，方便扩展功能。\",\"易扩展：模块化设计使得系统扩展变得更加容易和灵活。\",\"创建一个对象用 new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。\",\"一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）；\",\"一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。\",\"对象的相等和引用相等的区别\",\"对象的相等一般比较的是内存中存放的内容是否相等。\",\"引用相等一般比较的是他们指向的内存地址是否相等。\",\"String str1 = \\\"hello\\\"; String str2 = new String(\\\"hello\\\"); String str3 = \\\"hello\\\"; // 使用 == 比较字符串的引用相等 System.out.println(str1 == str2); // false System.out.println(str1 == str3); // true，它们都指向同一个字符串常量 \\\"hello\\\" // 使用 equals 方法比较字符串的相等 System.out.println(str1.equals(str2)); // true System.out.println(str1.equals(str3)); // true\",\"如果一个类没有声明构造方法，也可以执行！因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。如果我们自己添加了类的构造方法（无论是否有参），Java 就不会添加默认的无参数的构造方法了。\",\"我们一直在不知不觉地使用构造方法，这也是为什么我们在创建对象的时候后面要加一个括号（因为要调用无参的构造方法）。如果我们重载了有参的构造方法，记得都要把无参的构造方法也写出来（无论是否用到），因为这可以帮助我们在创建对象的时候少踩坑。\",\"构造方法具有以下特点：\",\"名称与类名相同：构造方法的名称必须与类名完全一致。\",\"没有返回值：构造方法没有返回类型，且不能使用 void 声明。\",\"自动执行：在生成类的对象时，构造方法会自动执行，无需显式调用。\",\"构造方法不能被重写（override），但可以被重载（overload）。因此，一个类中可以有多个构造方法，这些构造方法可以具有不同的参数列表，以提供不同的对象初始化方式。\",\"面向对象的三大特征\",\"封装\",\"封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界访问的方法来操作属性。就好像我们看不到挂在墙上的空调的内部的零件信息（也就是属性），但是可以通过遥控器（方法）来控制空调。如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。就好像如果没有空调遥控器，那么我们就无法操控空凋制冷，空调本身就没有意义了。\",\"继承\",\"不同类型的对象，相互之间经常有一定数量的共同点。例如，小明同学、小红同学、小李同学，都共享学生的特性（班级、学号等）。同时，每一个对象还定义了额外的特性使得他们与众不同。例如小明的数学比较好，小红的性格惹人喜爱；小李的力气比较大。继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。\",\"关于继承如下 3 点请记住：\",\"子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。\",\"子类可以拥有自己属性和方法，即子类可以对父类进行扩展。\",\"子类可以用自己的方式实现父类的方法。\",\"多态\",\"多态，顾名思义，表示一个对象具有多种的状态，具体表现为父类的引用指向子类的实例。\",\"多态的特点:\",\"对象类型和引用类型之间具有继承（类）/实现（接口）的关系；\",\"引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；\",\"多态不能调用“只在子类存在但在父类不存在”的方法；\",\"如果子类重写了父类的方法，真正执行的是子类重写的方法，如果子类没有重写父类的方法，执行的是父类的方法。\"]},\"16\":{\"h\":\"为什么要用接口？\",\"t\":[\"image-20241101134654836\"]},\"17\":{\"h\":\"接口和抽象类\",\"t\":[\"抽象类使用abstract修饰类\",\"抽象类当中可以包含普通类所能包含的成员\",\"抽象类和普通类不一样的是，抽象类当中可以包含抽象方法。\",\"抽象类方法是使用abstract修饰的，这个方法没有具体的实现\",\"abstract class Shape{ public int a; public abstract void draw(); public void func(){ } }\",\"不能实例化抽象类\",\"public class Test { public static void main(String[] args) { Shape shape = new Shape();//报错 } }\",\"抽象类存在的意义是为了被继承：如果一个普通类继承了抽象类，此时必须重写抽象类中的方法。\",\"class Rect extends Shape{ @Override public void draw() { System.out.println(\\\"矩形\\\"); } }\",\"一个抽象类A继承一个抽象类B，此时不需要重写B中的抽象方法，但当A被继承时，还是要重写B中的抽象方法。\",\"抽象类的方法不能是私有的（private）,要满足重写的规则。\",\"抽象类当中可以有构造方法，为了方便子类能够调用，来初始化抽象类当中的成员\",\"接口：在Java中，接口可以看成是多个类的公共规范，是一种引用数据类型。\",\"使用interface来修饰接口\",\"在接口中抽象方法默认是public abstract的方法\",\"接口当中的成员方法不能有具体的实现。\",\"从JDK1.8开始，允许有方法的实现，但是这个方法必须是有default修饰的\",\"可以实现有静态方法\",\"成员变量默认是public static final修饰的，子类如果重写抽象方法必须由public修饰\",\"接口不可以被实例化，也就是说接口不能有静态代码块和构造方法\",\"interface IShape { public static final int a = 10; int b = 20;//默认也是public static final修饰的 public abstract void func1(); void func();//默认也是public abstract修饰的 public void func2(){ //报错 } default public void func3(){ System.out.println(\\\"默认方法\\\"); } public static void func4(){ System.out.println(\\\"static修饰的方法\\\"); } }\",\"接口和抽象类的共同点\",\"实例化：接口和抽象类都不能直接实例化，只能被实现（接口）或继承（抽象类）后才能创建具体的对象。\",\"抽象方法：接口和抽象类都可以包含抽象方法。抽象方法没有方法体，必须在子类或实现类中实现。\",\"接口和抽象类的区别\",\"设计目的：接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系。\",\"继承和实现：一个类只能继承一个类（包括抽象类），因为 Java 不支持多继承。但一个类可以实现多个接口，一个接口也可以继承多个其他接口。\",\"成员变量：接口中的成员变量只能是 public static final 类型的，不能被修改且必须有初始值。抽象类的成员变量可以有任何修饰符（private, protected, public），可以在子类中被重新定义或赋值。\",\"方法： \",\"Java 8 之前，接口中的方法默认是 public abstract ，也就是只能有方法声明。自 Java 8 起，可以在接口中定义 default（默认） 方法和 static （静态）方法。 自 Java 9 起，接口可以包含 private 方法。\",\"抽象类可以包含抽象方法和非抽象方法。抽象方法没有方法体，必须在子类中实现。非抽象方法有具体实现，可以直接在抽象类中使用或在子类中重写。\",\"在 Java 8 及以上版本中，接口引入了新的方法类型：default 方法、static 方法和 private 方法。这些方法让接口的使用更加灵活。\",\"Java 8 引入的default 方法用于提供接口方法的默认实现，可以在实现类中被覆盖。这样就可以在不修改实现类的情况下向现有接口添加新功能，从而增强接口的扩展性和向后兼容性。\",\"public interface MyInterface { default void defaultMethod() { System.out.println(\\\"This is a default method.\\\"); } }\",\"Java 8 引入的static 方法无法在实现类中被覆盖，只能通过接口名直接调用（ MyInterface.staticMethod()），类似于类中的静态方法。static 方法通常用于定义一些通用的、与接口相关的工具方法，一般很少用。\",\"public interface MyInterface { static void staticMethod() { System.out.println(\\\"This is a static method in the interface.\\\"); } }\",\"Java 9 允许在接口中使用 private 方法。private方法可以用于在接口内部共享代码，不对外暴露。\",\"public interface MyInterface { // default 方法 default void defaultMethod() { commonMethod(); } // static 方法 static void staticMethod() { commonMethod(); } // 私有静态方法，可以被 static 和 default 方法调用 private static void commonMethod() { System.out.println(\\\"This is a private method used internally.\\\"); } // 实例私有方法，只能被 default 方法调用。 private void instanceCommonMethod() { System.out.println(\\\"This is a private instance method used internally.\\\"); } }\"]},\"18\":{\"h\":\"深拷贝和浅拷贝\",\"t\":[\"区别：\",\"浅拷贝：浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。\",\"深拷贝：深拷贝会完全复制整个对象，包括这个对象所包含的内部对象。\",\"浅拷贝：\",\"public class Address implements Cloneable{ private String name; // 省略构造函数、Getter&Setter方法 @Override public Address clone() { try { return (Address) super.clone(); } catch (CloneNotSupportedException e) { throw new AssertionError(); } } } public class Person implements Cloneable { private Address address; // 省略构造函数、Getter&Setter方法 @Override public Person clone() { try { Person person = (Person) super.clone(); return person; } catch (CloneNotSupportedException e) { throw new AssertionError(); } } }\",\"Person person1 = new Person(new Address(\\\"武汉\\\")); Person person1Copy = person1.clone(); // true System.out.println(person1.getAddress() == person1Copy.getAddress()); // person1 的克隆对象和 person1 使用的仍然是同一个 Address 对象。\",\"深拷贝：\",\"简单对 Person 类的 clone() 方法进行修改，连带着要把 Person 对象内部的 Address 对象一起复制。\",\"@Override public Person clone() { try { Person person = (Person) super.clone(); person.setAddress(person.getAddress().clone()); return person; } catch (CloneNotSupportedException e) { throw new AssertionError(); } }\",\"Person person1 = new Person(new Address(\\\"武汉\\\")); Person person1Copy = person1.clone(); // false System.out.println(person1.getAddress() == person1Copy.getAddress()); // 显然 person1 的克隆对象和 person1 包含的 Address 对象已经是不同的了。\",\"引用拷贝就是两个不同的引用指向同一个对象。\",\"shallow&deep-copy\"]},\"19\":{\"h\":\"Object\",\"t\":[\"Object 类是一个特殊的类，是所有类的父类，主要提供了以下 11 个方法：\",\"/** * native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。 */ public final native Class<?> getClass() /** * native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。 */ public native int hashCode() /** * 用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。 */ public boolean equals(Object obj) /** * native 方法，用于创建并返回当前对象的一份拷贝。 */ protected native Object clone() throws CloneNotSupportedException /** * 返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。 */ public String toString() /** * native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。 */ public final native void notify() /** * native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。 */ public final native void notifyAll() /** * native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。 */ public final native void wait(long timeout) throws InterruptedException /** * 多了 nanos 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 纳秒。。 */ public final void wait(long timeout, int nanos) throws InterruptedException /** * 跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念 */ public final void wait() throws InterruptedException /** * 实例被垃圾回收器回收的时候触发的操作 */ protected void finalize() throws Throwable { }\"]},\"20\":{\"h\":\"== 和 equals() 的区别\",\"t\":[\"== 对于基本类型和引用类型的作用效果是不同的：\",\"对于基本数据类型来说，== 比较的是值。\",\"对于引用数据类型来说，== 比较的是对象的内存地址。\",\"因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。\",\"equals() 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。equals()方法存在于Object类中，而Object类是所有类的直接或间接父类，因此所有的类都有equals()方法。\",\"Object 类 equals() 方法：\",\"public boolean equals(Object obj) { return (this == obj); }\",\"equals() 方法存在两种使用情况：\",\"类没有重写 equals()方法：通过equals()比较该类的两个对象时，等价于通过“==”比较这两个对象，使用的默认是 Object类equals()方法。\",\"类重写了 equals()方法：一般我们都重写 equals()方法来比较两个对象中的属性是否相等；若它们的属性相等，则返回 true(即，认为这两个对象相等)。\"]},\"21\":{\"h\":\"hashCode()\",\"t\":[\"hashCode() 的作用是获取哈希码（int 整数），也称为散列码。这个哈希码的作用是确定该对象在哈希表中的索引位置。\",\"hashCode() 方法\",\"hashCode() 定义在 JDK 的 Object 类中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。另外需要注意的是：Object 的 hashCode() 方法是本地方法，也就是用 C 语言或 C++ 实现的。\",\"散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）\",\"当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashCode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashCode 值作比较，如果没有相符的 hashCode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashCode 值的对象，这时会调用 equals() 方法来检查 hashCode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。\",\"其实， hashCode() 和 equals()都是用于比较两个对象是否相等。\",\"那为什么 JDK 还要同时提供这两个方法呢？\",\"这是因为在一些容器（比如 HashMap、HashSet）中，有了 hashCode() 之后，判断元素是否在对应容器中的效率会更高（参考添加元素进HashSet的过程）！\",\"我们在前面也提到了添加元素进HashSet的过程，如果 HashSet 在对比的时候，同样的 hashCode 有多个对象，它会继续使用 equals() 来判断是否真的相同。也就是说 hashCode 帮助我们大大缩小了查找成本。\",\"那为什么不只提供 hashCode() 方法呢？\",\"这是因为两个对象的hashCode 值相等并不代表两个对象就相等。\",\"那为什么两个对象有相同的 hashCode 值，它们也不一定是相等的？\",\"因为 hashCode() 所使用的哈希算法也许刚好会让多个对象传回相同的哈希值。越糟糕的哈希算法越容易碰撞，但这也与数据值域分布的特性有关（所谓哈希碰撞也就是指的是不同的对象得到相同的 hashCode )。\",\"总结下来就是：\",\"如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。\",\"如果两个对象的hashCode 值相等并且equals()方法也返回 true，我们才认为这两个对象相等。\",\"如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。\",\"为什么重写 equals() 时必须重写 hashCode() 方法？\",\"因为两个相等的对象的 hashCode 值必须是相等。也就是说如果 equals 方法判断两个对象是相等的，那这两个对象的 hashCode 值也要相等。\",\"如果重写 equals() 时没有重写 hashCode() 方法的话就可能会导致 equals 方法判断是相等的两个对象，hashCode 值却不相等。\",\"重写 equals() 时没有重写 hashCode() 方法的话，使用 HashMap 可能会出现什么问题？\",\"HashMap 的工作原理\",\"HashMap 是基于哈希表的数据结构，依赖于两个方法来定位存储和查找对象：\",\"hashCode() 用于确定对象在哈希表中的存储桶位置。\",\"equals() 用于在存储桶中找到匹配的键。\",\"当你向 HashMap 中插入键值对时，HashMap 会首先根据键的 hashCode() 值确定存储位置，然后在该位置使用 equals() 方法来检查是否存在相同的键。\",\"hashCode() 和 equals() 的关系\",\"Java 对 hashCode() 和 equals() 有一个明确的约定：\",\"如果两个对象通过 equals() 方法比较是相等的，那么它们的 hashCode() 值必须相等。\",\"如果 equals() 方法认为两个对象不相等，它们的 hashCode() 可以不同，但不一定必须不同。\",\"问题：重写 equals() 但没有重写 hashCode()\",\"如果你只重写了 equals() 方法，而没有重写 hashCode() 方法，那么：\",\"默认的 hashCode() 方法是继承自 Object 类的，它是基于对象的内存地址生成的哈希值。\",\"即使两个对象在逻辑上通过 equals() 被认为是相等的（内容相同），它们的 hashCode() 值可能是不同的，因为默认的 hashCode() 方法没有考虑对象内容，而是基于内存地址生成哈希值。\",\"在 HashMap 中可能出现的问题\",\"如果两个对象在逻辑上通过 equals() 方法是相等的，但它们的 hashCode() 不相等，使用 HashMap 可能会出现以下问题：\",\"键的查找失败： \",\"当你使用一个对象作为键存储在 HashMap 中，HashMap 会先根据该对象的 hashCode() 计算出存储位置。如果两个逻辑上相等的对象（根据 equals()）有不同的 hashCode() 值，那么 HashMap 会将它们存储在不同的存储桶中。\",\"当你使用另一个逻辑上相等的对象来尝试查找时，HashMap 会根据该对象的 hashCode() 再次计算存储桶位置，但因为 hashCode() 不一致，它会查找错误的存储桶，导致找不到这个键，即使它在 equals() 意义上是相等的。\",\"无法删除键： \",\"由于 hashCode() 不一致，你可能无法通过一个逻辑上相等的对象来删除另一个对象，因为 HashMap 会基于 hashCode() 查找错误的存储桶。\",\"重复存储相同的键： \",\"如果两个对象 equals() 相等但 hashCode() 不一致，HashMap 可能会将它们作为不同的键存储，从而导致相同逻辑键被多次存储，破坏了 HashMap 的唯一性。\"]},\"22\":{\"h\":\"String\",\"t\":[\"String、StringBuffer、StringBuilder 的区别？\",\"可变性\",\"String 是不可变的（后面会详细分析原因）。\",\"StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串，不过没有使用 final 和 private 关键字修饰，最关键的是这个 AbstractStringBuilder 类还提供了很多修改字符串的方法比如 append 方法。\",\"abstract class AbstractStringBuilder implements Appendable, CharSequence { char[] value; public AbstractStringBuilder append(String str) { if (str == null) return appendNull(); int len = str.length(); ensureCapacityInternal(count + len); str.getChars(0, len, value, count); count += len; return this; } //... }\",\"线程安全性\",\"String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。\",\"性能\",\"每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。\",\"对于三者使用的总结：\",\"操作少量的数据: 适用 String\",\"单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder\",\"多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer\",\"String 为什么是不可变的？\",\"String 类中使用 final 关键字修饰字符数组来保存字符串，这意味着引用（value 变量本身）是不可变的，也就是说，一旦 value 被赋值，就不能再指向其他数组。然而，final 修饰的数组的内容是可变的。虽然 final 确保了 value 不能再指向其他数组，但它并不会影响数组中元素的可变性。因此，数组中的元素是可以改变的。\",\"public final class String implements java.io.Serializable, Comparable<String>, CharSequence { private final char value[]; //... }\",\"被 final 关键字修饰的类不能被继承，修饰的方法不能被重写，修饰的变量是基本数据类型则值不能改变，修饰的变量是引用类型则不能再指向其他对象。因此，final 关键字修饰的数组保存字符串并不是 String 不可变的根本原因，因为这个数组保存的字符串是可变的（final 修饰引用类型变量的情况）。\",\"String 真正不可变有下面几点原因：\",\"保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法。\",\"String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变。\",\"在 Java 9 之后，String、StringBuilder 与 StringBuffer 的实现改用 byte 数组存储字符串。\",\"public final class String implements java.io.Serializable,Comparable<String>, CharSequence { // @Stable 注解表示变量最多被修改一次，称为“稳定的”。 @Stable private final byte[] value; } abstract class AbstractStringBuilder implements Appendable, CharSequence { byte[] value; }\",\"Java 9 为何要将 String 的底层实现由 char[] 改成了 byte[] ?\",\"新版的 String 其实支持两个编码方案：Latin-1 和 UTF-16。如果字符串中包含的汉字没有超过 Latin-1 可表示范围内的字符，那就会使用 Latin-1 作为编码方案。Latin-1 编码方案下，byte 占一个字节(8 位)，char 占用 2 个字节（16），byte 相较 char 节省一半的内存空间。\",\"JDK 官方就说了绝大部分字符串对象只包含 Latin-1 可表示的字符。\",\"img\",\"如果字符串中包含的汉字超过 Latin-1 可表示范围内的字符，byte 和 char 所占用的空间是一样的。\",\"字符串拼接用“+” 还是 StringBuilder?\",\"Java 语言本身并不支持运算符重载，“+”和“+=”是专门为 String 类重载过的运算符，也是 Java 中仅有的两个重载过的运算符。\",\"String str1 = \\\"he\\\"; String str2 = \\\"llo\\\"; String str3 = \\\"world\\\"; String str4 = str1 + str2 + str3;\",\"上面的代码对应的字节码如下：\",\"img\",\"可以看出，字符串对象通过“+”的字符串拼接方式，实际上是通过 StringBuilder 调用 append() 方法实现的，拼接完成之后调用 toString() 得到一个 String 对象 。\",\"不过，在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 StringBuilder 以复用，会导致创建过多的 StringBuilder 对象。\",\"String 中的 equals 方法是被重写过的，比较的是 String 字符串的值是否相等。 Object 的 equals 方法是比较的对象的内存地址。\",\"字符串常量池 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。\",\"String#intern 方法有什么作用?\",\"String.intern() 是一个 native (本地) 方法，用来处理字符串常量池中的字符串对象引用。它的工作流程可以概括为以下两种情况：\",\"常量池中已有相同内容的字符串对象：如果字符串常量池中已经有一个与调用 intern() 方法的字符串内容相同的 String 对象，intern() 方法会直接返回常量池中该对象的引用。\",\"常量池中没有相同内容的字符串对象：如果字符串常量池中还没有一个与调用 intern() 方法的字符串内容相同的对象，intern() 方法会将当前字符串对象的引用添加到字符串常量池中，并返回该引用。\",\"总结：\",\"intern() 方法的主要作用是确保字符串引用在常量池中的唯一性。\",\"当调用 intern() 时，如果常量池中已经存在相同内容的字符串，则返回常量池中已有对象的引用；否则，将该字符串添加到常量池并返回其引用。\",\"示例：\",\"// s1 指向字符串常量池中的 \\\"Java\\\" 对象 String s1 = \\\"Java\\\"; // s2 也指向字符串常量池中的 \\\"Java\\\" 对象，和 s1 是同一个对象 String s2 = s1.intern(); // 在堆中创建一个新的 \\\"Java\\\" 对象，s3 指向它 String s3 = new String(\\\"Java\\\"); // s4 指向字符串常量池中的 \\\"Java\\\" 对象，和 s1 是同一个对象 String s4 = s3.intern(); // s1 和 s2 指向的是同一个常量池中的对象 System.out.println(s1 == s2); // true // s3 指向堆中的对象，s4 指向常量池中的对象，所以不同 System.out.println(s3 == s4); // false // s1 和 s4 都指向常量池中的同一个对象 System.out.println(s1 == s4); // true\",\"String 类型的变量和常量做“+”运算时发生了什么？\",\"先来看字符串不加 final 关键字拼接的情况（JDK1.8）：\",\"String str1 = \\\"str\\\"; String str2 = \\\"ing\\\"; String str3 = \\\"str\\\" + \\\"ing\\\"; String str4 = str1 + str2; String str5 = \\\"string\\\"; System.out.println(str3 == str4);//false System.out.println(str3 == str5);//true System.out.println(str4 == str5);//false\",\"对于编译期可以确定值的字符串，也就是常量字符串 ，jvm 会将其存入字符串常量池。并且，字符串常量拼接得到的字符串常量在编译阶段就已经被存放字符串常量池，这个得益于编译器的优化。\",\"在编译过程中，Javac 编译器（下文中统称为编译器）会进行一个叫做 常量折叠(Constant Folding) 的代码优化。《深入理解 Java 虚拟机》中是也有介绍到：\",\"image-20241014130535051\",\"常量折叠会把常量表达式的值求出来作为常量嵌在最终生成的代码中，这是 Javac 编译器会对源代码做的极少量优化措施之一(代码优化几乎都在即时编译器中进行)。\",\"对于 String str3 = \\\"str\\\" + \\\"ing\\\"; 编译器会给你优化成 String str3 = \\\"string\\\"; 。\",\"并不是所有的常量都会进行折叠，只有编译器在程序编译期就可以确定值的常量才可以：\",\"基本数据类型( byte、boolean、short、char、int、float、long、double)以及字符串常量。\",\"final 修饰的基本数据类型和字符串变量\",\"字符串通过 “+”拼接得到的字符串、基本数据类型之间算数运算（加减乘除）、基本数据类型的位运算（<<、>>、>>> ）\",\"引用的值在程序编译期是无法确定的，编译器无法对其进行优化。\",\"对象引用和“+”的字符串拼接方式，实际上是通过 StringBuilder 调用 append() 方法实现的，拼接完成之后调用 toString() 得到一个 String 对象 。\",\"不过，字符串使用 final 关键字声明之后，可以让编译器当做常量来处理。\",\"示例代码：\",\"final String str1 = \\\"str\\\"; final String str2 = \\\"ing\\\"; // 下面两个表达式其实是等价的 String c = \\\"str\\\" + \\\"ing\\\";// 常量池中的对象 String d = str1 + str2; // 常量池中的对象 System.out.println(c == d);// true\",\"被 final 关键字修饰之后的 String 会被编译器当做常量来处理，编译器在程序编译期就可以确定它的值，其效果就相当于访问常量。\",\"如果 ，编译器在运行时才能知道其确切值的话，就无法对其优化。\",\"示例代码（str2 在运行时才能确定其值）：\",\"final String str1 = \\\"str\\\"; final String str2 = getStr(); String c = \\\"str\\\" + \\\"ing\\\";// 常量池中的对象 String d = str1 + str2; // 在堆上创建的新的对象 System.out.println(c == d);// false public static String getStr() { return \\\"ing\\\"; }\"]},\"23\":{\"h\":\"异常\",\"t\":[\"Java 异常类层次结构图概览：\",\"image-20241014131545112\",\"Exception 和 Error 有什么区别？\",\"在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类:\",\"Exception :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。\",\"Error：Error 属于程序无法处理的错误 ，不建议通过catch捕获 。例如 Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。\",\"Checked Exception 和 Unchecked Exception 有什么区别？\",\"Checked Exception 即 受检查异常 ，Java 代码在编译过程中，如果受检查异常没有被 catch或者throws 关键字处理的话，就没办法通过编译。\",\"比如下面这段 IO 操作的代码：\",\"image-20241014133049953\",\"除了RuntimeException及其子类以外，其他的Exception类及其子类都属于受检查异常 。常见的受检查异常有：IO 相关的异常、ClassNotFoundException、SQLException...。\",\"Unchecked Exception 即 不受检查异常 ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。\",\"RuntimeException 及其子类都统称为非受检查异常，常见的有（建议记下来，日常开发中会经常用到）：\",\"NullPointerException(空指针错误)\",\"IllegalArgumentException(参数错误比如方法入参类型错误)\",\"NumberFormatException（字符串转换为数字格式错误，IllegalArgumentException的子类）\",\"ArrayIndexOutOfBoundsException（数组越界错误）\",\"ClassCastException（类型转换错误）\",\"ArithmeticException（算术错误）\",\"SecurityException （安全错误比如权限不够）\",\"UnsupportedOperationException(不支持的操作错误比如重复创建同一用户)\",\"Throwable 类常用方法有哪些？\",\"String getMessage(): 返回异常发生时的详细信息\",\"String toString(): 返回异常发生时的简要描述\",\"String getLocalizedMessage(): 返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getMessage()返回的结果相同\",\"void printStackTrace(): 在控制台上打印 Throwable 对象封装的异常信息\",\"try-catch-finally 如何使用？\",\"try块：用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。\",\"catch块：用于处理 try 捕获到的异常。\",\"finally 块：无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。\",\"注意：不要在 finally 语句块中使用 return! 当 try 语句和 finally 语句中都有 return 语句时，try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。\",\"finally 中的代码一定会执行吗？\",\"不一定的！在某些情况下，finally 中的代码不会被执行。\",\"就比如说 finally 之前虚拟机被终止运行的话，finally 中的代码就不会被执行。\",\"另外，在以下 2 种特殊情况下，finally 块的代码也不会被执行：\",\"程序所在的线程死亡。\",\"关闭 CPU。\"]},\"24\":{\"h\":\"泛型\",\"t\":[\"Java 泛型（Generics） 是 JDK 5 中引入的一个新特性。使用泛型参数，可以增强代码的可读性以及稳定性。\",\"编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。比如 ArrayList<Person> persons = new ArrayList<Person>() 这行代码就指明了该 ArrayList 对象只能传入 Person 对象，如果传入其他类型的对象就会报错。\",\"ArrayList<E> extends AbstractList<E>\",\"并且，原生 List 返回类型是 Object ，需要手动转换类型才能使用，使用泛型后编译器自动转换。\",\"泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。\",\"1.泛型类：\",\"//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型 //在实例化泛型类时，必须指定T的具体类型 public class Generic<T>{ private T key; public Generic(T key) { this.key = key; } public T getKey(){ return key; } }\",\"如何实例化泛型类：\",\"Generic<Integer> genericInteger = new Generic<Integer>(123456);\",\"2.泛型接口：\",\"public interface Generator<T> { public T method(); }\",\"实现泛型接口，不指定类型：\",\"class GeneratorImpl<T> implements Generator<T>{ @Override public T method() { return null; } }\",\"实现泛型接口，指定类型：\",\"class GeneratorImpl implements Generator<String> { @Override public String method() { return \\\"hello\\\"; } }\",\"3.泛型方法：\",\" public static < E > void printArray( E[] inputArray ) { for ( E element : inputArray ){ System.out.printf( \\\"%s \\\", element ); } System.out.println(); }\",\"使用：\",\"// 创建不同类型数组：Integer, Double 和 Character Integer[] intArray = { 1, 2, 3 }; String[] stringArray = { \\\"Hello\\\", \\\"World\\\" }; printArray( intArray ); printArray( stringArray );\",\"注意: public static < E > void printArray( E[] inputArray ) 一般被称为静态泛型方法;在 java 中泛型只是一个占位符，必须在传递类型后才能使用。类在实例化时才能真正的传递类型参数，由于静态方法的加载先于类的实例化，也就是说类中的泛型还没有传递真正的类型参数，静态的方法的加载就已经完成了，所以静态泛型方法是没有办法使用类上声明的泛型的。只能使用自己声明的 <E>\",\"泛型擦除\",\"Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。\",\"编译器会在编译期间会动态地将泛型 T 擦除为 Object 或将 T extends xxx 擦除为其限定类型 xxx 。\",\"因此，泛型本质上其实还是编译器的行为，为了保证引入泛型机制但不创建新的类型，减少虚拟机的运行开销，编译器通过擦除将泛型类转化为一般类。\",\" List<Integer> list = new ArrayList<>(); list.add(12); //1.编译期间直接添加会报错 //list.add(\\\"a\\\"); Class<? extends List> clazz = list.getClass(); Method add = clazz.getDeclaredMethod(\\\"add\\\", Object.class); //2.运行期间通过反射添加，是可以的 add.invoke(list, \\\"kl\\\"); System.out.println(list);\",\"由于泛型擦除的问题，下面的方法重载会报错。\",\"image-20241014174541738\",\"原因也很简单，泛型擦除之后，List< String > 与 List< Integer > 在编译以后都变成了 List 。\",\"既然编译器要把泛型擦除，那为什么还要使用泛型呢？\",\"使用泛型可在编译期间进行类型检测。\",\"使用 Object 类型需要手动添加强制类型转换，降低代码可读性，提高出错概率。\",\"泛型可以使用自限定类型如 T extends Comparable 。\"]},\"25\":{\"h\":\"反射\",\"t\":[\"如果说大家研究过框架的底层原理或者咱们自己写过框架的话，一定对反射这个概念不陌生。反射之所以被称为框架的灵魂，主要是因为它赋予了我们在运行时分析类以及执行类中方法的能力。通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。\",\"反射可以让我们的代码更加灵活、为各种框架提供开箱即用的功能提供了便利。\",\"不过，反射让我们在运行时有了分析操作类的能力的同时，也增加了安全问题，比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。\",\"如果我们动态获取到这些信息，我们需要依靠 Class 对象。Class 类对象将一个类的方法、变量等信息告诉运行的程序。Java 提供了四种方式获取 Class 对象:\",\"1. 知道具体类的情况下可以使用：\",\"Class alunbarClass = TargetObject.class;\",\"但是我们一般是不知道具体类的，基本都是通过遍历包下面的类来获取 Class 对象，通过此方式获取 Class 对象不会进行初始化\",\"2. 通过 Class.forName()传入类的全路径获取：\",\"Class alunbarClass1 = Class.forName(\\\"cn.javaguide.TargetObject\\\");\",\"3. 通过对象实例instance.getClass()获取：\",\"TargetObject o = new TargetObject(); Class alunbarClass2 = o.getClass();\",\"4. 通过类加载器xxxClassLoader.loadClass()传入类路径获取:\",\"ClassLoader.getSystemClassLoader().loadClass(\\\"cn.javaguide.TargetObject\\\");\",\"通过类加载器获取 Class 对象不会进行初始化，意味着不进行包括初始化等一系列步骤，静态代码块和静态对象不会得到执行\",\"反射实战\",\"创建一个我们要使用反射操作的类 TargetObject。\",\"package cn.javaguide; public class TargetObject { private String value; public TargetObject() { value = \\\"JavaGuide\\\"; } public void publicMethod(String s) { System.out.println(\\\"I love \\\" + s); } private void privateMethod() { System.out.println(\\\"value is \\\" + value); } }\",\"2.使用反射操作这个类的方法以及参数\",\"package cn.javaguide; import java.lang.reflect.Field; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class Main { public static void main(String[] args) throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException, NoSuchFieldException { /** * 获取 TargetObject 类的 Class 对象并且创建 TargetObject 类实例 */ Class<?> targetClass = Class.forName(\\\"cn.javaguide.TargetObject\\\"); TargetObject targetObject = (TargetObject) targetClass.newInstance(); /** * 获取 TargetObject 类中定义的所有方法 */ Method[] methods = targetClass.getDeclaredMethods(); for (Method method : methods) { System.out.println(method.getName()); } /** * 获取指定方法并调用 */ Method publicMethod = targetClass.getDeclaredMethod(\\\"publicMethod\\\", String.class); publicMethod.invoke(targetObject, \\\"JavaGuide\\\"); /** * 获取指定参数并对参数进行修改 */ Field field = targetClass.getDeclaredField(\\\"value\\\"); //为了对类中的参数进行修改我们取消安全检查 field.setAccessible(true); field.set(targetObject, \\\"JavaGuide\\\"); /** * 调用 private 方法 */ Method privateMethod = targetClass.getDeclaredMethod(\\\"privateMethod\\\"); //为了调用private方法我们取消安全检查 privateMethod.setAccessible(true); privateMethod.invoke(targetObject); } }\",\"输出内容：\",\"publicMethod privateMethod I love JavaGuide value is JavaGuide\"]},\"26\":{\"h\":\"注解\",\"t\":[\"Annotation （注解） 是 Java5 开始引入的新特性，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。\",\"注解本质是一个继承了Annotation 的特殊接口：\",\"@Target(ElementType.METHOD) @Retention(RetentionPolicy.SOURCE) public @interface Override { } public interface Override extends Annotation{ }\",\"注解只有被解析之后才会生效，常见的解析方法有两种：\",\"编译期直接扫描：编译器在编译 Java 代码的时候扫描对应的注解并处理，比如某个方法使用@Override 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。\",\"运行期通过反射处理：像框架中自带的注解(比如 Spring 框架的 @Value、@Component)都是通过反射来进行处理的。\"]},\"27\":{\"h\":\"序列化和反序列化\",\"t\":[\"如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。\",\"简单来说：\",\"序列化：将数据结构或对象转换成可以存储或传输的形式，通常是二进制字节流，也可以是 JSON, XML 等文本格式\",\"反序列化：将在序列化过程中所生成的数据转换为原始数据结构或者对象的过程\",\"下面是序列化和反序列化常见应用场景：\",\"对象在进行网络传输（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；\",\"将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；\",\"将对象存储到数据库（如 Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；\",\"将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。\",\"序列化的主要目的是通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。\",\"image-20241014161106179\",\"对于不想进行序列化的变量，使用 transient 关键字修饰。\",\"transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。\",\"关于 transient 还有几点注意：\",\"transient 只能修饰变量，不能修饰类和方法。\",\"transient 修饰的变量，在反序列化后变量值将会被置成类型的默认值。例如，如果是修饰 int 类型，那么反序列后结果就是 0。\",\"static 变量因为不属于任何对象(Object)，所以无论有没有 transient 关键字修饰，均不会被序列化。\"]},\"28\":{\"h\":\"I/O\",\"t\":[\"IO 即 Input/Output，输入和输出。数据输入到计算机内存的过程即输入，反之输出到外部存储（比如数据库，文件，远程主机）的过程即输出。数据传输过程类似于水流，因此称为 IO 流。IO 流在 Java 中分为输入流和输出流，而根据数据的处理方式又分为字节流和字符流。\",\"Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。\",\"InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\",\"OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。\",\"I/O 流为什么要分为字节流和字符流呢?\",\"问题本质想问：不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？\",\"主要有两点原因：\",\"字符流是由 Java 虚拟机将字节转换得到的，这个过程还算是比较耗时；\",\"如果我们不知道编码类型的话，使用字节流的过程中很容易出现乱码问题。\"]},\"29\":{\"h\":\"值传递\",\"t\":[\"程序设计语言将实参传递给方法（或函数）的方式分为两种：\",\"值传递：方法接收的是实参值的拷贝，会创建副本。\",\"引用传递：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。\",\"很多程序设计语言（比如 C++、 Pascal )提供了两种参数传递的方式，不过，在 Java 中只有值传递。\",\"案例 1：传递基本类型参数\",\"代码：\",\"public static void main(String[] args) { int num1 = 10; int num2 = 20; swap(num1, num2); System.out.println(\\\"num1 = \\\" + num1); System.out.println(\\\"num2 = \\\" + num2); } public static void swap(int a, int b) { int temp = a; a = b; b = temp; System.out.println(\\\"a = \\\" + a); System.out.println(\\\"b = \\\" + b); }\",\"输出：\",\"a = 20 b = 10 num1 = 10 num2 = 20\",\"解析：\",\"在 swap() 方法中，a、b 的值进行交换，并不会影响到 num1、num2。因为，a、b 的值，只是从 num1、num2 的复制过来的。也就是说，a、b 相当于 num1、num2 的副本，副本的内容无论怎么修改，都不会影响到原件本身。\",\"image-20241014170916135\",\"案例 2：传递引用类型参数 1\",\"代码：\",\" public static void main(String[] args) { int[] arr = { 1, 2, 3, 4, 5 }; System.out.println(arr[0]); change(arr); System.out.println(arr[0]); } public static void change(int[] array) { // 将数组的第一个元素变为0 array[0] = 0; }\",\"输出：\",\"1 0\",\"解析：\",\"img\",\"看了这个案例很多人肯定觉得 Java 对引用类型的参数采用的是引用传递。\",\"实际上，并不是的，这里传递的还是值，不过，这个值是实参的地址罢了！\",\"也就是说 change 方法的参数拷贝的是 arr （实参）的地址，因此，它和 arr 指向的是同一个数组对象。这也就说明了为什么方法内部对形参的修改会影响到实参。\",\"image-20241014172036622\",\"笔试题：\",\"public class Test1 { private String name; Test1(){ } public void changeName(Test1 test1){ test1=new Test1(); test1.name=\\\"李四\\\"; } public void setName(String name) { this.name = name; } public String getName() { return name; } public static void main(String[] args) throws InterruptedException { Test1 test1 = new Test1(); test1.setName(\\\"张三\\\"); test1.changeName(test1); System.out.println(test1.getName()); } }\",\"输出结果：\",\"张三\",\"在Java中，对象的引用是通过 值传递 的，即传递的是引用的副本。所以在changeName方法中，test1是传入的参数，它是一个引用类型的副本。在changeName方法中执行test1 = new Test1();时，test1指向了一个新的Test1对象，而这个新对象的name字段被设置为\\\"李四\\\"。但是，原始的test1引用（即main中的test1）并没有被改变，它仍然指向原始对象。因此，main中的test1对象的name字段仍然是\\\"张三\\\"。\",\"image-20241209161628635\",\"如果希望修改原始对象的name字段，可以这样做：\",\"public void changeName(Test1 test1) { test1.name = \\\"李四\\\"; // 直接修改传入对象的属性 }\",\"这样，实参和形参指向的都是同一个 Test1 对象，输出结果：\",\"李四\"]},\"30\":{\"h\":\"代理\"},\"31\":{\"h\":\"静态代理\",\"t\":[\"静态代理中，我们对目标对象的每个方法的增强都是手动完成的，非常不灵活（比如接口一旦新增加方法，目标对象和代理对象都要进行修改\\\\）且麻烦\\\\需要对每个目标类都单独写一个代理类）。\",\"从 JVM 层面来说， 静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。\",\"静态代理实现步骤:\",\"定义一个接口及其实现类；\",\"创建一个代理类同样实现这个接口\",\"将目标对象注入进代理类，然后在代理类的对应方法调用目标类中的对应方法。这样的话，我们就可以通过代理类屏蔽对目标对象的访问，并且可以在目标方法执行前后做一些自己想做的事情。\",\"代码示例\",\"1.定义发送短信的接口\",\"public interface SmsService { String send(String message); }\",\"2.实现发送短信的接口\",\"public class SmsServiceImpl implements SmsService { public String send(String message) { System.out.println(\\\"send message:\\\" + message); return message; } }\",\"3.创建代理类并同样实现发送短信的接口\",\"public class SmsProxy implements SmsService { private final SmsService smsService; public SmsProxy(SmsService smsService) { this.smsService = smsService; } @Override public String send(String message) { //调用方法之前，我们可以添加自己的操作 System.out.println(\\\"before method send()\\\"); smsService.send(message); //调用方法之后，我们同样可以添加自己的操作 System.out.println(\\\"after method send()\\\"); return null; } }\",\"4.实际使用\",\"public class Main { public static void main(String[] args) { SmsService smsService = new SmsServiceImpl(); SmsProxy smsProxy = new SmsProxy(smsService); smsProxy.send(\\\"java\\\"); } }\",\"运行上述代码之后，控制台打印出：\",\"before method send() send message:java after method send()\",\"可以输出结果看出，我们已经增加了 SmsServiceImpl 的send()方法。\",\"其实，Thread 类与 Runnable 接口的设计使用的也是静态代理的设计模式，Thread 类是 Runnable 接口的一个代理类。\",\"Runnable 接口：\",\"@FunctionalInterface public interface Runnable { public abstract void run(); }\",\"Thread 类：\",\"public class Thread implements Runnable { private Runnable target; public Thread(Runnable target) { init(null, target, \\\"Thread-\\\" + nextThreadNum(), 0); } // 省略... @Override public void run() { if (target != null) { target.run(); } } }\",\"自定义 MyTask 类实现 Runnbale 接口：\",\"public class MyTask implements Runnable{ @Override public void run() { System.out.println(\\\"子线程...\\\"); } }\",\"实际使用：\",\"public static void main(String[] args) { Thread thread = new Thread(new MyTask()); thread.start(); System.out.println(\\\"主线程...\\\"); }\",\"输出：\",\"主线程... 子线程...\"]},\"32\":{\"h\":\"动态代理\",\"t\":[\"相比于静态代理来说，动态代理更加灵活。我们不需要针对每个目标类都单独创建一个代理类，并且也不需要我们必须实现接口，我们可以直接代理实现类( CGLIB 动态代理机制)。\",\"从 JVM 角度来说，动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\",\"说到动态代理，Spring AOP、RPC 框架应该是两个不得不提的，它们的实现都依赖了动态代理。\",\"就 Java 来说，动态代理的实现方式有很多种，比如 JDK 动态代理、CGLIB 动态代理等等。\"]},\"33\":{\"h\":\"JDK 动态代理\",\"t\":[\"在 Java 动态代理机制中 InvocationHandler 接口和 Proxy 类是核心。\",\"Proxy 类中使用频率最高的方法是：newProxyInstance() ，这个方法主要用来生成一个代理对象。\",\" public static Object newProxyInstance(ClassLoader loader, Class<?>[] interfaces, InvocationHandler h) throws IllegalArgumentException { ...... }\",\"这个方法一共有 3 个参数：\",\"loader :类加载器，用于加载代理对象。\",\"interfaces : 被代理类实现的一些接口；\",\"h : 实现了 InvocationHandler 接口的对象；\",\"要实现动态代理的话，还必须需要实现InvocationHandler 来自定义处理逻辑。 当我们的动态代理对象调用一个方法时，这个方法的调用就会被转发到实现InvocationHandler 接口类的 invoke 方法来调用。\",\"public interface InvocationHandler { /** * 当你使用代理对象调用方法的时候实际会调用到这个方法 */ public Object invoke(Object proxy, Method method, Object[] args) throws Throwable; }\",\"invoke() 方法有下面三个参数：\",\"proxy :动态生成的代理类\",\"method : 与代理类对象调用的方法相对应\",\"args : 当前 method 方法的参数\",\"也就是说：你通过Proxy 类的 newProxyInstance() 创建的代理对象在调用方法的时候，实际会调用到实现InvocationHandler 接口的类的 invoke()方法。 你可以在 invoke() 方法中自定义处理逻辑，比如在方法执行前后做什么事情。\",\"代码示例：\",\"1.定义发送短信的接口\",\"public interface SmsService { String send(String message); }\",\"2.实现发送短信的接口\",\"public class SmsServiceImpl implements SmsService { public String send(String message) { System.out.println(\\\"send message:\\\" + message); return message; } }\",\"3.定义一个 JDK 动态代理类\",\"import java.lang.reflect.InvocationHandler; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; public class DebugInvocationHandler implements InvocationHandler { /** * 代理类中的真实对象 */ private final Object target; public DebugInvocationHandler(Object target) { this.target = target; } @Override public Object invoke(Object proxy, Method method, Object[] args) throws InvocationTargetException, IllegalAccessException { //调用方法之前，我们可以添加自己的操作 System.out.println(\\\"before method \\\" + method.getName()); Object result = method.invoke(target, args); //调用方法之后，我们同样可以添加自己的操作 System.out.println(\\\"after method \\\" + method.getName()); return result; } }\",\"invoke() 方法: 当我们的动态代理对象调用原生方法的时候，最终实际上调用到的是 invoke() 方法，然后 invoke() 方法代替我们去调用了被代理对象的原生方法。\",\"4.获取代理对象的工厂类\",\"public class JdkProxyFactory { public static Object getProxy(Object target) { return Proxy.newProxyInstance( target.getClass().getClassLoader(), // 目标类的类加载器 target.getClass().getInterfaces(), // 代理需要实现的接口，可指定多个 new DebugInvocationHandler(target) // 代理对象对应的自定义 InvocationHandler ); } }\",\"5.实际使用\",\"SmsService smsService = (SmsService) JdkProxyFactory.getProxy(new SmsServiceImpl()); smsService.send(\\\"java\\\");\",\"运行上述代码之后，控制台打印出：\",\"before method send send message:java after method send\"]},\"34\":{\"h\":\"CGLIB 动态代理\",\"t\":[\"JDK 动态代理有一个最致命的问题是其只能代理实现了接口的类。\",\"为了解决这个问题，我们可以用 CGLIB 动态代理机制来避免。\",\"CGLIB(Code Generation Library)是一个基于ASM的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。很多知名的开源框架都使用到了CGLIB， 例如 Spring 中的 AOP 模块中：如果目标对象实现了接口，则默认采用 JDK 动态代理，否则采用 CGLIB 动态代理。\",\"在 CGLIB 动态代理机制中 MethodInterceptor 接口和 Enhancer 类是核心。\",\"你需要自定义 MethodInterceptor 并重写 intercept 方法，intercept 用于拦截增强被代理类的方法。\",\"public interface MethodInterceptor extends Callback{ // 拦截被代理类中的方法 public Object intercept(Object obj, java.lang.reflect.Method method, Object[] args,MethodProxy proxy) throws Throwable; }\",\"obj : 被代理的对象（需要增强的对象）\",\"method : 被拦截的方法（需要增强的方法）\",\"args : 方法入参\",\"proxy : 用于调用原始方法\",\"你可以通过 Enhancer类来动态获取被代理类，当代理类调用方法的时候，实际调用的是 MethodInterceptor 中的 intercept 方法。\",\"代码示例：\",\"不同于 JDK 动态代理不需要额外的依赖。CGLIB(Code Generation Library) 实际是属于一个开源项目，如果你要使用它的话，需要手动添加相关依赖。\",\"<dependency> <groupId>cglib</groupId> <artifactId>cglib</artifactId> <version>3.3.0</version> </dependency>\",\"1.实现一个使用阿里云发送短信的类\",\"public class AliSmsService { public String send(String message) { System.out.println(\\\"send message:\\\" + message); return message; } }\",\"2.自定义 MethodInterceptor（方法拦截器）\",\"import net.sf.cglib.proxy.MethodInterceptor; import net.sf.cglib.proxy.MethodProxy; import java.lang.reflect.Method; /** * 自定义MethodInterceptor */ public class DebugMethodInterceptor implements MethodInterceptor { /** * @param o 被代理的对象（需要增强的对象） * @param method 被拦截的方法（需要增强的方法） * @param args 方法入参 * @param methodProxy 用于调用原始方法 */ @Override public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable { //调用方法之前，我们可以添加自己的操作 System.out.println(\\\"before method \\\" + method.getName()); Object object = methodProxy.invokeSuper(o, args); //调用方法之后，我们同样可以添加自己的操作 System.out.println(\\\"after method \\\" + method.getName()); return object; } }\",\"3.获取代理类\",\"import net.sf.cglib.proxy.Enhancer; public class CglibProxyFactory { public static Object getProxy(Class<?> clazz) { // 创建动态代理增强类 Enhancer enhancer = new Enhancer(); // 设置类加载器 enhancer.setClassLoader(clazz.getClassLoader()); // 设置被代理类 enhancer.setSuperclass(clazz); // 设置方法拦截器 enhancer.setCallback(new DebugMethodInterceptor()); // 创建代理类 return enhancer.create(); } }\",\"4.实际使用\",\"AliSmsService aliSmsService = (AliSmsService) CglibProxyFactory.getProxy(AliSmsService.class); aliSmsService.send(\\\"java\\\");\",\"运行上述代码之后，控制台打印出：\",\"before method send send message:java after method send\"]},\"35\":{\"h\":\"两者对比\",\"t\":[\"JDK 动态代理只能代理实现了接口的类或者直接代理接口，而 CGLIB 可以代理未实现任何接口的类。 另外， CGLIB 动态代理是通过生成一个被代理类的子类来拦截被代理类的方法调用，因此不能代理声明为 final 类型的类和方法。\",\"就二者的效率来说，大部分情况都是 JDK 动态代理更优秀，随着 JDK 版本的升级，这个优势更加明显。\"]},\"36\":{\"h\":\"两者对比\",\"t\":[\"灵活性：动态代理更加灵活，不需要必须实现接口，可以直接代理实现类，并且可以不需要针对每个目标类都创建一个代理类。另外，静态代理中，接口一旦新增加方法，目标对象和代理对象都要进行修改，这是非常麻烦的！\",\"JVM 层面：静态代理在编译时就将接口、实现类、代理类这些都变成了一个个实际的 class 文件。而动态代理是在运行时动态生成类字节码，并加载到 JVM 中的。\"]},\"37\":{\"h\":\"BigDecimal\",\"t\":[\"我们在使用 BigDecimal 时，为了防止精度丢失，推荐使用它的BigDecimal(String val)构造方法或者 BigDecimal.valueOf(double val) 静态方法来创建对象。\",\"《阿里巴巴 Java 开发手册》对这部分内容也有提到，如下图所示。\",\"image-20241014194036399\",\"加减乘除\",\"add 方法用于将两个 BigDecimal 对象相加，subtract 方法用于将两个 BigDecimal 对象相减。multiply 方法用于将两个 BigDecimal 对象相乘，divide 方法用于将两个 BigDecimal 对象相除。\",\"BigDecimal a = new BigDecimal(\\\"1.0\\\"); BigDecimal b = new BigDecimal(\\\"0.9\\\"); System.out.println(a.add(b));// 1.9 System.out.println(a.subtract(b));// 0.1 System.out.println(a.multiply(b));// 0.90 System.out.println(a.divide(b));// 无法除尽，抛出 ArithmeticException 异常 System.out.println(a.divide(b, 2, RoundingMode.HALF_UP));// 1.11\",\"这里需要注意的是，在我们使用 divide 方法的时候尽量使用 3 个参数版本，并且RoundingMode 不要选择 UNNECESSARY，否则很可能会遇到 ArithmeticException（无法除尽出现无限循环小数的时候），其中 scale 表示要保留几位小数，roundingMode 代表保留规则。\",\"public BigDecimal divide(BigDecimal divisor, int scale, RoundingMode roundingMode) { return divide(divisor, scale, roundingMode.oldMode); }\",\"保留规则非常多，这里列举几种:\",\"public enum RoundingMode { // 2.5 -> 3 , 1.6 -> 2 // -1.6 -> -2 , -2.5 -> -3 UP(BigDecimal.ROUND_UP), // 2.5 -> 2 , 1.6 -> 1 // -1.6 -> -1 , -2.5 -> -2 DOWN(BigDecimal.ROUND_DOWN), // 2.5 -> 3 , 1.6 -> 2 // -1.6 -> -1 , -2.5 -> -2 CEILING(BigDecimal.ROUND_CEILING), // 2.5 -> 2 , 1.6 -> 1 // -1.6 -> -2 , -2.5 -> -3 FLOOR(BigDecimal.ROUND_FLOOR), // 2.5 -> 3 , 1.6 -> 2 // -1.6 -> -2 , -2.5 -> -3 HALF_UP(BigDecimal.ROUND_HALF_UP), //...... }\",\"大小比较\",\"a.compareTo(b) : 返回 -1 表示 a 小于 b，0 表示 a 等于 b ， 1 表示 a 大于 b。\",\"BigDecimal a = new BigDecimal(\\\"1.0\\\"); BigDecimal b = new BigDecimal(\\\"0.9\\\"); System.out.println(a.compareTo(b));// 1\",\"保留小数\",\"通过 setScale方法设置保留几位小数以及保留规则。保留规则有挺多种，不需要记，IDEA 会提示。\",\"BigDecimal m = new BigDecimal(\\\"1.255433\\\"); BigDecimal n = m.setScale(3,RoundingMode.HALF_DOWN); System.out.println(n);// 1.255\",\"等值比较\",\"《阿里巴巴 Java 开发手册》中提到：\",\"image-20241014195556937\",\"BigDecimal 使用 equals() 方法进行等值比较出现问题的代码示例：\",\"BigDecimal a = new BigDecimal(\\\"1\\\"); BigDecimal b = new BigDecimal(\\\"1.0\\\"); System.out.println(a.equals(b));//false\",\"这是因为 equals() 方法不仅仅会比较值的大小（value）还会比较精度（scale），而 compareTo() 方法比较的时候会忽略精度。\",\"1.0 的 scale 是 1，1 的 scale 是 0，因此 a.equals(b) 的结果是 false。\",\"img\"]},\"38\":{\"h\":\"语法糖\",\"t\":[\"语法糖（Syntactic Sugar） 也称糖衣语法，是英国计算机学家 Peter.J.Landin 发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。简而言之，语法糖让程序更加简洁，有更高的可读性。\",\"image-20241014220006225\"]},\"39\":{\"h\":\"静态、构造代码块等执行顺序\",\"t\":[\"执行顺序优先级：（静态块，静态变量）、（构造块，变量）、构造方法。\",\"详见文章 https://blog.csdn.net/m0_67589400/article/details/143080795\"]},\"40\":{\"h\":\"&& 和 & 以及 || 和 |\",\"t\":[\"&& 前后都为真，则为真，前面为 false，则不计算后面\",\"|| 前后有一个为真，就为真，前面 true，则不计算后面\",\"&， | 不管前面是否为真，都计算后面\"]},\"41\":{\"h\":\"Java基础 2\"},\"42\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"43\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"44\":{\"h\":\"Java集合 1\"},\"45\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"46\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"47\":{\"h\":\"Java集合 2\"},\"48\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"49\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"50\":{\"h\":\"执行计划\"},\"51\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"52\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\",\"这里是内容。\"]},\"53\":{\"h\":\"索引\"},\"54\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"55\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"56\":{\"h\":\"数据结构\"},\"57\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"58\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\",\"这里是内容。\"]},\"59\":{\"h\":\"数据类型\"},\"60\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"61\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\",\"这里是内容。\"]},\"62\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"63\":{\"h\":\"Basis\"},\"64\":{\"h\":\"Java\"},\"65\":{\"h\":\"Collection\"},\"66\":{\"h\":\"Mysql\"},\"67\":{\"h\":\"Database\"},\"68\":{\"h\":\"Redis\"}},\"dirtCount\":0,\"index\":[[\"计划\",{\"0\":{\"50\":1}}],[\"计算机\",{\"1\":{\"7\":1,\"11\":4,\"28\":1,\"38\":2}}],[\"计算\",{\"1\":{\"5\":1,\"11\":1,\"21\":3,\"40\":3}}],[\"集合\",{\"0\":{\"44\":1,\"47\":1}}],[\"|\",{\"0\":{\"40\":3},\"1\":{\"40\":3}}],[\"详见\",{\"1\":{\"39\":1}}],[\"详细信息\",{\"1\":{\"23\":1}}],[\"详细分析\",{\"1\":{\"22\":1}}],[\"术语\",{\"1\":{\"38\":1}}],[\"英国\",{\"1\":{\"38\":1}}],[\"称\",{\"1\":{\"38\":1}}],[\"称为\",{\"1\":{\"14\":1,\"21\":1,\"22\":2,\"23\":1,\"24\":1,\"25\":1,\"28\":1}}],[\"糖衣\",{\"1\":{\"38\":1}}],[\"糖\",{\"0\":{\"38\":1},\"1\":{\"38\":2}}],[\"列举\",{\"1\":{\"37\":1}}],[\"列表\",{\"1\":{\"13\":1,\"15\":1,\"21\":1}}],[\"尽量\",{\"1\":{\"37\":1}}],[\"尽量避免\",{\"1\":{\"10\":1}}],[\"_\",{\"1\":{\"37\":9,\"39\":1}}],[\"手册\",{\"1\":{\"37\":2}}],[\"手动\",{\"1\":{\"12\":3,\"24\":2,\"31\":1,\"34\":1}}],[\"推荐\",{\"1\":{\"37\":1}}],[\"防止\",{\"1\":{\"37\":1}}],[\"升级\",{\"1\":{\"35\":1}}],[\"二者\",{\"1\":{\"35\":1}}],[\"二进制\",{\"1\":{\"5\":8,\"7\":1,\"11\":5,\"27\":1}}],[\"云\",{\"1\":{\"34\":1}}],[\"阿里巴巴\",{\"1\":{\"37\":2}}],[\"阿里\",{\"1\":{\"34\":1}}],[\"groupid\",{\"1\":{\"34\":2}}],[\"generation\",{\"1\":{\"34\":2}}],[\"generatorimpl\",{\"1\":{\"24\":2}}],[\"generator\",{\"1\":{\"24\":3}}],[\"genericinteger\",{\"1\":{\"24\":1}}],[\"generic\",{\"1\":{\"24\":4}}],[\"generics\",{\"1\":{\"24\":1}}],[\"getinterfaces\",{\"1\":{\"33\":1}}],[\"getproxy\",{\"1\":{\"33\":2,\"34\":2}}],[\"getdeclaredfield\",{\"1\":{\"25\":1}}],[\"getdeclaredmethods\",{\"1\":{\"25\":1}}],[\"getdeclaredmethod\",{\"1\":{\"24\":1,\"25\":2}}],[\"getname\",{\"1\":{\"25\":1,\"29\":2,\"33\":2,\"34\":2}}],[\"getsystemclassloader\",{\"1\":{\"25\":1}}],[\"getstr\",{\"1\":{\"22\":2}}],[\"getkey\",{\"1\":{\"24\":1}}],[\"getlocalizedmessage\",{\"1\":{\"23\":1}}],[\"getmessage\",{\"1\":{\"23\":2}}],[\"getchars\",{\"1\":{\"22\":1}}],[\"getclassloader\",{\"1\":{\"33\":1,\"34\":1}}],[\"getclass\",{\"1\":{\"19\":1,\"24\":1,\"25\":2,\"33\":2}}],[\"getaddress\",{\"1\":{\"18\":5}}],[\"getter\",{\"1\":{\"18\":2}}],[\"getfield\",{\"1\":{\"10\":1}}],[\"项目\",{\"1\":{\"34\":1}}],[\"拦截器\",{\"1\":{\"34\":2}}],[\"拦截\",{\"1\":{\"34\":4,\"35\":1}}],[\"库\",{\"1\":{\"34\":1}}],[\"致命\",{\"1\":{\"34\":1}}],[\"频率\",{\"1\":{\"33\":1}}],[\"频繁\",{\"1\":{\"10\":1}}],[\"核心\",{\"1\":{\"33\":1,\"34\":1}}],[\"角度\",{\"1\":{\"32\":1}}],[\"子\",{\"1\":{\"31\":2}}],[\"子类\",{\"1\":{\"13\":5,\"14\":1,\"15\":10,\"17\":6,\"19\":2,\"22\":1,\"23\":7,\"35\":1}}],[\"短信\",{\"1\":{\"31\":3,\"33\":2,\"34\":1}}],[\"事情\",{\"1\":{\"31\":1,\"33\":1}}],[\"想\",{\"1\":{\"31\":1}}],[\"想问\",{\"1\":{\"28\":1}}],[\"屏蔽\",{\"1\":{\"31\":1}}],[\"麻烦\",{\"1\":{\"31\":1,\"36\":1}}],[\"\\\\\",{\"1\":{\"31\":2}}],[\"希望\",{\"1\":{\"29\":1}}],[\"张三\",{\"1\":{\"29\":3}}],[\"罢了\",{\"1\":{\"29\":1}}],[\"觉得\",{\"1\":{\"29\":1}}],[\"肯定\",{\"1\":{\"29\":1}}],[\"人\",{\"1\":{\"29\":1}}],[\"第一个\",{\"1\":{\"29\":1}}],[\"第一点\",{\"1\":{\"12\":1}}],[\"怎么\",{\"1\":{\"29\":1}}],[\"怎样\",{\"1\":{\"5\":1,\"12\":1}}],[\"交换\",{\"1\":{\"29\":1}}],[\"案例\",{\"1\":{\"29\":3}}],[\"形参\",{\"1\":{\"29\":3}}],[\"形式\",{\"1\":{\"4\":2,\"12\":2,\"24\":1,\"27\":1}}],[\"副本\",{\"1\":{\"29\":6}}],[\"乱码\",{\"1\":{\"28\":1}}],[\"耗时\",{\"1\":{\"28\":1}}],[\"读写\",{\"1\":{\"28\":1}}],[\"读取\",{\"1\":{\"12\":1,\"27\":3}}],[\"派生\",{\"1\":{\"28\":1}}],[\"水流\",{\"1\":{\"28\":1}}],[\"主线\",{\"1\":{\"31\":2}}],[\"主机\",{\"1\":{\"28\":1}}],[\"主要\",{\"1\":{\"5\":1,\"13\":1,\"15\":1,\"17\":2,\"19\":2,\"22\":2,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"33\":1}}],[\"序列\",{\"1\":{\"27\":1}}],[\"序列化\",{\"0\":{\"27\":2},\"1\":{\"27\":21}}],[\"置\",{\"1\":{\"27\":1}}],[\"恢复\",{\"1\":{\"27\":1}}],[\"阻止\",{\"1\":{\"27\":1}}],[\"远程\",{\"1\":{\"27\":1,\"28\":1}}],[\"流是\",{\"1\":{\"28\":1}}],[\"流在\",{\"1\":{\"28\":1}}],[\"流\",{\"1\":{\"27\":1,\"28\":19}}],[\"流程\",{\"1\":{\"22\":1}}],[\"网络\",{\"1\":{\"27\":3,\"28\":1}}],[\"文章\",{\"1\":{\"39\":1}}],[\"文本格式\",{\"1\":{\"27\":1}}],[\"文件系统\",{\"1\":{\"27\":1}}],[\"文件\",{\"1\":{\"27\":2,\"28\":2,\"31\":1,\"36\":1}}],[\"文档\",{\"1\":{\"1\":1,\"7\":1}}],[\"持久\",{\"1\":{\"27\":2}}],[\"反之\",{\"1\":{\"28\":1}}],[\"反\",{\"0\":{\"27\":1},\"1\":{\"27\":9}}],[\"反射\",{\"0\":{\"25\":1},\"1\":{\"12\":1,\"24\":1,\"25\":9,\"26\":2}}],[\"扫描\",{\"1\":{\"26\":2}}],[\"供\",{\"1\":{\"26\":1}}],[\"步骤\",{\"1\":{\"25\":1,\"31\":1}}],[\"路径\",{\"1\":{\"25\":2}}],[\"全\",{\"1\":{\"25\":1}}],[\"全部\",{\"1\":{\"8\":1,\"9\":1}}],[\"遍历\",{\"1\":{\"25\":1}}],[\"四种\",{\"1\":{\"25\":1}}],[\"告诉\",{\"1\":{\"25\":1}}],[\"依赖\",{\"1\":{\"32\":1,\"34\":2}}],[\"依赖于\",{\"1\":{\"7\":1,\"21\":1}}],[\"依靠\",{\"1\":{\"25\":1}}],[\"差点\",{\"1\":{\"25\":1}}],[\"稍\",{\"1\":{\"25\":1}}],[\"便利\",{\"1\":{\"25\":1}}],[\"灵魂\",{\"1\":{\"25\":1}}],[\"灵活性\",{\"1\":{\"36\":1}}],[\"灵活\",{\"1\":{\"15\":1,\"17\":1,\"25\":1,\"31\":1,\"32\":1,\"36\":1}}],[\"陌生\",{\"1\":{\"25\":1}}],[\"咱们\",{\"1\":{\"25\":1}}],[\"研究\",{\"1\":{\"25\":1}}],[\"降低\",{\"1\":{\"24\":1}}],[\"强制\",{\"1\":{\"24\":1}}],[\"强调\",{\"1\":{\"17\":1}}],[\"既然\",{\"1\":{\"24\":1}}],[\"转发\",{\"1\":{\"33\":1}}],[\"转化\",{\"1\":{\"24\":1}}],[\"转换成\",{\"1\":{\"11\":1,\"27\":1}}],[\"转换\",{\"1\":{\"5\":1,\"11\":1,\"23\":1,\"24\":2,\"27\":1,\"28\":1}}],[\"保留\",{\"1\":{\"37\":7}}],[\"保证\",{\"1\":{\"24\":1}}],[\"保存\",{\"1\":{\"11\":1,\"22\":5,\"27\":1}}],[\"限定\",{\"1\":{\"24\":2}}],[\"限制\",{\"1\":{\"13\":2}}],[\"动态\",{\"0\":{\"32\":1,\"33\":1,\"34\":1},\"1\":{\"24\":1,\"25\":1,\"32\":9,\"33\":6,\"34\":9,\"35\":3,\"36\":3}}],[\"擦掉\",{\"1\":{\"24\":1}}],[\"擦除\",{\"1\":{\"24\":8}}],[\"伪泛\",{\"1\":{\"24\":1}}],[\"符\",{\"1\":{\"24\":1}}],[\"符号\",{\"1\":{\"4\":2,\"5\":6,\"7\":1}}],[\"kl\",{\"1\":{\"24\":1}}],[\"k\",{\"1\":{\"24\":1}}],[\"key\",{\"1\":{\"5\":4,\"21\":1,\"24\":5}}],[\"泛\",{\"1\":{\"24\":2,\"25\":1}}],[\"泛型呢\",{\"1\":{\"24\":1}}],[\"泛型类\",{\"1\":{\"24\":2}}],[\"泛型\",{\"0\":{\"24\":1},\"1\":{\"8\":1,\"24\":26,\"25\":1}}],[\"死亡\",{\"1\":{\"23\":1}}],[\"吗\",{\"1\":{\"23\":1}}],[\"暂\",{\"1\":{\"23\":1}}],[\"暂停\",{\"1\":{\"19\":1}}],[\"!\",{\"1\":{\"23\":1,\"31\":1}}],[\"遇到\",{\"1\":{\"23\":1,\"37\":1}}],[\"零个\",{\"1\":{\"23\":1}}],[\"零件\",{\"1\":{\"15\":1}}],[\"打印\",{\"1\":{\"23\":1,\"31\":1,\"33\":1,\"34\":1}}],[\"台上\",{\"1\":{\"23\":1}}],[\"描述\",{\"1\":{\"23\":1}}],[\"哪些\",{\"1\":{\"23\":1}}],[\"哪个\",{\"1\":{\"15\":1}}],[\"权限\",{\"1\":{\"23\":1}}],[\"权衡\",{\"1\":{\"9\":1}}],[\"入参\",{\"1\":{\"23\":1,\"34\":2}}],[\"日常\",{\"1\":{\"23\":1}}],[\"round\",{\"1\":{\"37\":5}}],[\"roundingmode\",{\"1\":{\"37\":8}}],[\"runnbale\",{\"1\":{\"31\":1}}],[\"runnable\",{\"1\":{\"31\":8}}],[\"run\",{\"1\":{\"31\":4}}],[\"runtimeexception\",{\"1\":{\"23\":2}}],[\"rpc\",{\"1\":{\"27\":1,\"32\":1}}],[\"result\",{\"1\":{\"33\":2}}],[\"reader\",{\"1\":{\"28\":1}}],[\"redis\",{\"0\":{\"68\":1},\"1\":{\"27\":1}}],[\"retentionpolicy\",{\"1\":{\"26\":1}}],[\"retention\",{\"1\":{\"26\":1}}],[\"return\",{\"0\":{\"6\":1},\"1\":{\"5\":1,\"6\":6,\"10\":1,\"18\":3,\"20\":1,\"22\":3,\"23\":7,\"24\":3,\"29\":1,\"31\":2,\"33\":3,\"34\":3,\"37\":1}}],[\"reflect\",{\"1\":{\"25\":3,\"33\":3,\"34\":2}}],[\"rect\",{\"1\":{\"17\":1}}],[\"选择\",{\"1\":{\"23\":1,\"37\":1}}],[\"选择性\",{\"1\":{\"15\":1}}],[\"受\",{\"1\":{\"23\":5}}],[\"捕获\",{\"1\":{\"23\":5}}],[\"祖先\",{\"1\":{\"23\":1}}],[\"图\",{\"1\":{\"23\":1,\"37\":1}}],[\"层次结构\",{\"1\":{\"23\":1}}],[\"层面\",{\"1\":{\"5\":1,\"31\":1,\"36\":1}}],[\"措施\",{\"1\":{\"22\":1}}],[\"极少量\",{\"1\":{\"22\":1}}],[\"源代码\",{\"1\":{\"22\":1}}],[\"源码\",{\"1\":{\"5\":3}}],[\"嵌\",{\"1\":{\"22\":1}}],[\"嵌套\",{\"1\":{\"14\":2}}],[\"折叠\",{\"1\":{\"22\":3}}],[\"叫做\",{\"1\":{\"22\":1}}],[\"得益于\",{\"1\":{\"22\":1}}],[\"得到\",{\"1\":{\"11\":1,\"21\":1,\"22\":4,\"25\":1,\"28\":1}}],[\"阶段\",{\"1\":{\"22\":1}}],[\"示例\",{\"1\":{\"22\":3,\"31\":1,\"33\":1,\"34\":1,\"37\":1}}],[\"概率\",{\"1\":{\"24\":1}}],[\"概览\",{\"1\":{\"23\":1}}],[\"概括\",{\"1\":{\"22\":1}}],[\"概念\",{\"1\":{\"19\":2,\"25\":1}}],[\"#\",{\"1\":{\"22\":1}}],[\"针对\",{\"1\":{\"22\":1,\"32\":1,\"36\":1}}],[\"消耗\",{\"1\":{\"22\":1}}],[\"消亡\",{\"1\":{\"12\":1}}],[\"池中\",{\"1\":{\"22\":19}}],[\"池\",{\"1\":{\"22\":4}}],[\"缺陷\",{\"1\":{\"22\":1}}],[\"明显\",{\"1\":{\"22\":1,\"35\":1}}],[\"明确\",{\"1\":{\"7\":1,\"21\":1}}],[\"writer\",{\"1\":{\"28\":1}}],[\"world\",{\"1\":{\"22\":1,\"24\":1}}],[\"wait\",{\"1\":{\"19\":5}}],[\"过来\",{\"1\":{\"29\":1}}],[\"过多\",{\"1\":{\"22\":1}}],[\"过\",{\"1\":{\"22\":3,\"25\":1}}],[\"过程\",{\"1\":{\"4\":1,\"6\":1,\"11\":2,\"13\":1,\"15\":4,\"21\":2,\"22\":1,\"23\":2,\"27\":2,\"28\":5}}],[\"拼接\",{\"1\":{\"22\":9}}],[\"绝大部分\",{\"1\":{\"22\":1}}],[\"汉字\",{\"1\":{\"22\":2}}],[\"底层\",{\"1\":{\"22\":1,\"25\":1}}],[\"稳定性\",{\"1\":{\"24\":1}}],[\"稳定\",{\"1\":{\"22\":1}}],[\"注入\",{\"1\":{\"31\":1}}],[\"注释\",{\"1\":{\"26\":1}}],[\"注解\",{\"0\":{\"26\":1},\"1\":{\"22\":1,\"26\":6}}],[\"注意\",{\"1\":{\"7\":1,\"8\":1,\"10\":1,\"13\":1,\"19\":1,\"21\":1,\"23\":1,\"24\":1,\"27\":1,\"37\":1}}],[\"改成\",{\"1\":{\"22\":1}}],[\"改用\",{\"1\":{\"22\":1}}],[\"改变\",{\"1\":{\"14\":2,\"22\":4,\"29\":1}}],[\"根本原因\",{\"1\":{\"22\":1}}],[\"根据\",{\"1\":{\"12\":1,\"13\":2,\"21\":5,\"28\":1}}],[\"然而\",{\"1\":{\"22\":1}}],[\"然后\",{\"1\":{\"4\":4,\"15\":1,\"21\":1,\"22\":1,\"31\":1,\"33\":1}}],[\"缓冲区\",{\"1\":{\"22\":2}}],[\"缓存数据\",{\"1\":{\"9\":2}}],[\"缓存\",{\"0\":{\"9\":1},\"1\":{\"9\":5,\"27\":1}}],[\"适用\",{\"1\":{\"22\":3}}],[\"风险\",{\"1\":{\"22\":1}}],[\"冒\",{\"1\":{\"22\":1}}],[\"获得\",{\"1\":{\"22\":1}}],[\"获取\",{\"1\":{\"21\":1,\"25\":13,\"33\":1,\"34\":2}}],[\"仅能\",{\"1\":{\"22\":1}}],[\"安全检查\",{\"1\":{\"25\":4}}],[\"安全\",{\"1\":{\"22\":4,\"23\":1,\"25\":1}}],[\"安全性\",{\"1\":{\"22\":1}}],[\"破坏\",{\"1\":{\"21\":1,\"22\":1}}],[\"删除\",{\"1\":{\"21\":2}}],[\"找\",{\"1\":{\"21\":1}}],[\"找到\",{\"1\":{\"21\":2}}],[\"尝试\",{\"1\":{\"21\":1}}],[\"另\",{\"1\":{\"21\":2}}],[\"另外\",{\"1\":{\"7\":1,\"14\":1,\"21\":1,\"23\":1,\"25\":1,\"35\":1,\"36\":1}}],[\"失败\",{\"1\":{\"21\":1}}],[\"约定\",{\"1\":{\"21\":1}}],[\"约束\",{\"1\":{\"17\":1}}],[\"首先\",{\"1\":{\"21\":1}}],[\"插入\",{\"1\":{\"21\":1}}],[\"匹配\",{\"1\":{\"21\":1}}],[\"桶\",{\"1\":{\"21\":6}}],[\"定位\",{\"1\":{\"21\":1}}],[\"定义\",{\"1\":{\"7\":1,\"8\":2,\"12\":1,\"14\":3,\"15\":3,\"17\":3,\"21\":1,\"22\":1,\"23\":1,\"25\":1,\"31\":2,\"33\":3}}],[\"工厂\",{\"1\":{\"33\":1}}],[\"工作\",{\"1\":{\"21\":1,\"22\":1}}],[\"工具\",{\"1\":{\"17\":1}}],[\"问题\",{\"1\":{\"21\":4,\"24\":1,\"25\":1,\"28\":2,\"34\":2,\"37\":1}}],[\"却\",{\"1\":{\"21\":1,\"22\":1}}],[\"总结\",{\"1\":{\"21\":1,\"22\":2}}],[\"碰撞\",{\"1\":{\"21\":3}}],[\"糟糕\",{\"1\":{\"21\":1}}],[\"越界\",{\"1\":{\"23\":1}}],[\"越\",{\"1\":{\"21\":2}}],[\"刚好\",{\"1\":{\"21\":1}}],[\"代替\",{\"1\":{\"33\":1}}],[\"代理\",{\"0\":{\"30\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1},\"1\":{\"31\":13,\"32\":11,\"33\":17,\"34\":18,\"35\":9,\"36\":8}}],[\"代表\",{\"1\":{\"21\":1,\"37\":1}}],[\"代码优化\",{\"1\":{\"22\":2}}],[\"代码\",{\"0\":{\"39\":1},\"1\":{\"4\":2,\"5\":2,\"9\":4,\"10\":1,\"12\":1,\"14\":1,\"15\":2,\"17\":3,\"22\":4,\"23\":7,\"24\":3,\"25\":2,\"26\":1,\"29\":2,\"31\":2,\"33\":2,\"34\":2,\"37\":1}}],[\"查找\",{\"1\":{\"21\":6}}],[\"缩小\",{\"1\":{\"21\":1}}],[\"容器\",{\"1\":{\"21\":2}}],[\"容易\",{\"1\":{\"15\":2,\"21\":1,\"28\":1}}],[\"速度\",{\"1\":{\"21\":1}}],[\"成\",{\"1\":{\"22\":1,\"27\":1}}],[\"成本\",{\"1\":{\"21\":1}}],[\"成功\",{\"1\":{\"21\":1}}],[\"成员\",{\"1\":{\"8\":5,\"12\":13,\"13\":10,\"14\":3,\"17\":7}}],[\"真\",{\"1\":{\"40\":5}}],[\"真实\",{\"1\":{\"33\":1}}],[\"真的\",{\"1\":{\"21\":2}}],[\"真正\",{\"1\":{\"15\":1,\"22\":1,\"24\":2}}],[\"检测\",{\"1\":{\"24\":2,\"26\":1}}],[\"检查\",{\"1\":{\"21\":2,\"23\":9}}],[\"检索\",{\"1\":{\"21\":1}}],[\"假设\",{\"1\":{\"21\":1}}],[\"利用\",{\"1\":{\"21\":1}}],[\"键\",{\"1\":{\"21\":10}}],[\"键值\",{\"1\":{\"21\":2}}],[\"散\",{\"1\":{\"21\":1}}],[\"散列\",{\"1\":{\"21\":1}}],[\"散列码\",{\"1\":{\"21\":2}}],[\"散列值\",{\"1\":{\"5\":1}}],[\"意味着\",{\"1\":{\"21\":1,\"22\":1,\"25\":1}}],[\"意义\",{\"1\":{\"15\":2,\"17\":1,\"21\":1}}],[\"索引\",{\"0\":{\"53\":1},\"1\":{\"21\":1}}],[\"认为\",{\"1\":{\"20\":1,\"21\":4}}],[\"若\",{\"1\":{\"20\":1}}],[\"若干位\",{\"1\":{\"5\":3}}],[\"间接\",{\"1\":{\"20\":1}}],[\"效果\",{\"1\":{\"20\":1,\"22\":1}}],[\"效率\",{\"1\":{\"15\":1,\"21\":1,\"35\":1}}],[\"触发\",{\"1\":{\"19\":1}}],[\"器\",{\"1\":{\"19\":1,\"25\":2,\"33\":2,\"34\":1}}],[\"回收\",{\"1\":{\"19\":2}}],[\"垃圾\",{\"1\":{\"19\":1}}],[\"单独\",{\"1\":{\"31\":1,\"32\":1}}],[\"单个\",{\"1\":{\"22\":1}}],[\"单线程\",{\"1\":{\"22\":1}}],[\"单位\",{\"1\":{\"19\":1}}],[\"单引号\",{\"1\":{\"7\":1}}],[\"纳秒\",{\"1\":{\"19\":2}}],[\"释放\",{\"1\":{\"19\":2}}],[\"唯一性\",{\"1\":{\"21\":1,\"22\":1}}],[\"唯一\",{\"1\":{\"19\":1}}],[\"跟\",{\"1\":{\"19\":2,\"23\":1}}],[\"锁\",{\"1\":{\"19\":3,\"22\":3}}],[\"监视器\",{\"1\":{\"19\":3}}],[\"唤醒\",{\"1\":{\"19\":3}}],[\"进而\",{\"1\":{\"22\":1}}],[\"进\",{\"1\":{\"21\":2,\"31\":1}}],[\"进制\",{\"1\":{\"19\":1}}],[\"进行\",{\"1\":{\"5\":5,\"8\":1,\"13\":1,\"15\":1,\"17\":1,\"18\":1,\"19\":1,\"22\":8,\"23\":1,\"24\":2,\"25\":5,\"26\":1,\"27\":7,\"29\":1,\"31\":1,\"34\":1,\"36\":1,\"37\":1}}],[\"故\",{\"1\":{\"19\":1}}],[\"显然\",{\"1\":{\"18\":1}}],[\"显式\",{\"1\":{\"12\":1,\"15\":1}}],[\"连带\",{\"1\":{\"18\":1}}],[\"简洁\",{\"1\":{\"38\":1}}],[\"简而言之\",{\"1\":{\"38\":1}}],[\"简要\",{\"1\":{\"23\":1}}],[\"简单\",{\"1\":{\"18\":1,\"24\":1,\"27\":1}}],[\"简化\",{\"1\":{\"4\":1}}],[\"克隆\",{\"1\":{\"18\":2}}],[\"武汉\",{\"1\":{\"18\":2}}],[\"&\",{\"0\":{\"40\":3},\"1\":{\"18\":3,\"40\":3}}],[\"构造\",{\"0\":{\"39\":1},\"1\":{\"39\":1}}],[\"构造函数\",{\"1\":{\"18\":2}}],[\"构造方法\",{\"1\":{\"13\":1,\"14\":1,\"15\":16,\"17\":2,\"37\":1,\"39\":1}}],[\"省略\",{\"1\":{\"18\":2,\"31\":1}}],[\"复制\",{\"1\":{\"18\":3,\"29\":1}}],[\"复用\",{\"1\":{\"15\":2,\"17\":1,\"22\":1}}],[\"浅\",{\"0\":{\"18\":1},\"1\":{\"18\":4}}],[\"拷贝\",{\"0\":{\"18\":2},\"1\":{\"18\":10,\"19\":1,\"29\":2}}],[\"深入\",{\"1\":{\"22\":1}}],[\"深\",{\"0\":{\"18\":1},\"1\":{\"18\":3}}],[\"up\",{\"1\":{\"37\":5}}],[\"unnecessary\",{\"1\":{\"37\":1}}],[\"unsupportedoperationexception\",{\"1\":{\"23\":1}}],[\"unchecked\",{\"1\":{\"23\":3}}],[\"utf\",{\"1\":{\"22\":1}}],[\"used\",{\"1\":{\"17\":2}}],[\"u0000\",{\"1\":{\"7\":1}}],[\"暴露\",{\"1\":{\"17\":1,\"22\":1}}],[\"兼容性\",{\"1\":{\"17\":1}}],[\"现有\",{\"1\":{\"17\":1}}],[\"现代\",{\"1\":{\"5\":1}}],[\"让\",{\"1\":{\"17\":1,\"21\":2,\"22\":1,\"25\":2,\"38\":1}}],[\"版本\",{\"1\":{\"17\":1,\"35\":1,\"37\":1}}],[\"起\",{\"1\":{\"17\":2}}],[\"起来\",{\"1\":{\"10\":1}}],[\"修改\",{\"1\":{\"17\":2,\"18\":1,\"22\":3,\"25\":2,\"29\":5,\"31\":1,\"34\":1,\"36\":1}}],[\"修饰符\",{\"0\":{\"14\":1},\"1\":{\"12\":2,\"13\":3,\"14\":5,\"17\":1}}],[\"修饰\",{\"1\":{\"8\":3,\"12\":8,\"13\":1,\"14\":6,\"17\":9,\"19\":1,\"22\":13,\"26\":1,\"27\":8}}],[\"行为\",{\"1\":{\"17\":2,\"24\":1}}],[\"目标\",{\"1\":{\"31\":7,\"32\":1,\"33\":1,\"34\":1,\"36\":2}}],[\"目的\",{\"1\":{\"17\":1,\"22\":1,\"27\":1}}],[\"目录\",{\"1\":{\"1\":1}}],[\"由\",{\"1\":{\"17\":1,\"22\":1,\"28\":1}}],[\"由于\",{\"1\":{\"5\":2,\"15\":1,\"21\":1,\"24\":2}}],[\"规范\",{\"1\":{\"17\":1}}],[\"规则\",{\"1\":{\"17\":1,\"37\":4}}],[\"公共\",{\"1\":{\"17\":1,\"22\":2}}],[\"矩形\",{\"1\":{\"17\":1}}],[\"@\",{\"1\":{\"17\":1,\"18\":3,\"22\":2,\"24\":2,\"26\":6,\"31\":4,\"33\":1,\"34\":5}}],[\"普通\",{\"1\":{\"17\":3}}],[\"确切\",{\"1\":{\"22\":1}}],[\"确定\",{\"1\":{\"15\":1,\"21\":3,\"22\":5}}],[\"确保\",{\"1\":{\"14\":1,\"22\":2}}],[\"接收\",{\"1\":{\"27\":1,\"28\":1,\"29\":2}}],[\"接口类\",{\"1\":{\"33\":1}}],[\"接口\",{\"0\":{\"16\":1,\"17\":1},\"1\":{\"15\":1,\"17\":30,\"24\":4,\"26\":1,\"31\":11,\"32\":1,\"33\":7,\"34\":3,\"35\":3,\"36\":3}}],[\"接受\",{\"1\":{\"14\":1}}],[\"顾名思义\",{\"1\":{\"15\":1}}],[\"私有\",{\"1\":{\"15\":3,\"17\":3,\"22\":1}}],[\"拥有\",{\"1\":{\"15\":3}}],[\"请\",{\"1\":{\"15\":1}}],[\"点\",{\"1\":{\"15\":1}}],[\"技术\",{\"1\":{\"15\":1}}],[\"建立\",{\"1\":{\"15\":1}}],[\"建议\",{\"1\":{\"13\":2,\"19\":1,\"23\":2}}],[\"已有\",{\"1\":{\"22\":2}}],[\"已\",{\"1\":{\"15\":1}}],[\"已经\",{\"1\":{\"13\":1,\"18\":1,\"21\":1,\"22\":3,\"24\":1,\"31\":1}}],[\"力气\",{\"1\":{\"15\":1}}],[\"喜爱\",{\"1\":{\"15\":1}}],[\"惹人\",{\"1\":{\"15\":1}}],[\"额外\",{\"1\":{\"15\":1,\"19\":1,\"34\":1}}],[\"每个\",{\"1\":{\"31\":2,\"32\":1,\"36\":1}}],[\"每次\",{\"1\":{\"22\":2}}],[\"每\",{\"1\":{\"15\":1}}],[\"每种\",{\"1\":{\"5\":1,\"7\":1}}],[\"号\",{\"1\":{\"15\":1}}],[\"学家\",{\"1\":{\"38\":1}}],[\"学\",{\"1\":{\"15\":1}}],[\"学生\",{\"1\":{\"15\":1}}],[\"班级\",{\"1\":{\"15\":1}}],[\"李四\",{\"1\":{\"29\":4}}],[\"李\",{\"1\":{\"15\":2}}],[\"红\",{\"1\":{\"15\":1}}],[\"共同\",{\"1\":{\"23\":1}}],[\"共同点\",{\"1\":{\"15\":1,\"17\":1}}],[\"共用\",{\"1\":{\"18\":1}}],[\"共享\",{\"1\":{\"12\":2,\"14\":1,\"15\":1,\"17\":1}}],[\"经常\",{\"1\":{\"15\":1,\"23\":1}}],[\"制冷\",{\"1\":{\"15\":1}}],[\"凋\",{\"1\":{\"15\":1}}],[\"操控\",{\"1\":{\"15\":1}}],[\"操作符\",{\"1\":{\"5\":1}}],[\"操作\",{\"1\":{\"4\":1,\"5\":15,\"10\":1,\"15\":1,\"19\":1,\"21\":1,\"22\":6,\"23\":2,\"25\":3,\"28\":3,\"31\":2,\"33\":2,\"34\":2}}],[\"控制台\",{\"1\":{\"31\":1,\"33\":1,\"34\":1}}],[\"控制\",{\"1\":{\"15\":1,\"23\":1}}],[\"控制线\",{\"1\":{\"14\":1}}],[\"遥控器\",{\"1\":{\"15\":2}}],[\"墙上\",{\"1\":{\"15\":1}}],[\"挂\",{\"1\":{\"15\":1}}],[\"外界\",{\"1\":{\"15\":4}}],[\"外部\",{\"1\":{\"8\":1,\"13\":1,\"15\":1,\"28\":1}}],[\"隐藏\",{\"1\":{\"15\":1}}],[\"信息\",{\"1\":{\"15\":3,\"23\":4,\"24\":1,\"25\":2,\"26\":1,\"28\":1}}],[\"状态\",{\"1\":{\"15\":2}}],[\"三个\",{\"1\":{\"33\":1}}],[\"三者\",{\"1\":{\"22\":1}}],[\"三大\",{\"1\":{\"15\":1}}],[\"三种\",{\"1\":{\"5\":1,\"24\":1}}],[\"完全\",{\"1\":{\"18\":1}}],[\"完全一致\",{\"1\":{\"15\":1}}],[\"完成\",{\"1\":{\"5\":2,\"22\":2,\"24\":1,\"31\":1}}],[\"坑\",{\"1\":{\"15\":1}}],[\"踩\",{\"1\":{\"15\":1}}],[\"少量\",{\"1\":{\"22\":1}}],[\"少\",{\"1\":{\"15\":1}}],[\"记\",{\"1\":{\"37\":1}}],[\"记下来\",{\"1\":{\"23\":1}}],[\"记住\",{\"1\":{\"15\":1}}],[\"记得\",{\"1\":{\"15\":1}}],[\"记忆\",{\"1\":{\"4\":1}}],[\"括号\",{\"1\":{\"15\":1}}],[\"添加\",{\"1\":{\"15\":2,\"17\":1,\"21\":2,\"22\":2,\"24\":3,\"31\":2,\"33\":2,\"34\":3,\"38\":1}}],[\"他们\",{\"1\":{\"15\":2}}],[\"条\",{\"1\":{\"15\":1}}],[\"条件\",{\"1\":{\"6\":2}}],[\"系住\",{\"1\":{\"15\":1}}],[\"系\",{\"1\":{\"15\":1}}],[\"系统\",{\"1\":{\"10\":1,\"15\":1}}],[\"气球\",{\"1\":{\"15\":3}}],[\"绳子\",{\"1\":{\"15\":2}}],[\"模块\",{\"1\":{\"34\":1}}],[\"模块化\",{\"1\":{\"15\":1}}],[\"模式\",{\"1\":{\"14\":1}}],[\"功能\",{\"1\":{\"15\":3,\"17\":1,\"25\":1,\"38\":1}}],[\"扩展性\",{\"1\":{\"17\":1}}],[\"扩展\",{\"1\":{\"15\":4}}],[\"使得\",{\"1\":{\"15\":3}}],[\"使用\",{\"1\":{\"4\":3,\"5\":4,\"6\":1,\"7\":2,\"8\":3,\"9\":3,\"12\":2,\"13\":4,\"14\":3,\"15\":6,\"17\":6,\"18\":1,\"19\":2,\"20\":2,\"21\":7,\"22\":9,\"23\":3,\"24\":12,\"25\":3,\"26\":2,\"27\":1,\"28\":1,\"31\":3,\"33\":3,\"34\":4,\"37\":5,\"38\":1}}],[\"性格\",{\"1\":{\"15\":1}}],[\"性\",{\"1\":{\"15\":2}}],[\"性能\",{\"1\":{\"9\":2,\"10\":1,\"22\":3,\"25\":1}}],[\"封装\",{\"1\":{\"15\":3,\"23\":1}}],[\"良好\",{\"1\":{\"15\":1}}],[\"维护\",{\"1\":{\"15\":2}}],[\"易\",{\"1\":{\"15\":3}}],[\"优先级\",{\"1\":{\"39\":1}}],[\"优势\",{\"1\":{\"35\":1}}],[\"优秀\",{\"1\":{\"35\":1}}],[\"优点\",{\"1\":{\"15\":1}}],[\"优化\",{\"1\":{\"8\":1,\"22\":5}}],[\"开源\",{\"1\":{\"34\":2}}],[\"开箱\",{\"1\":{\"25\":1}}],[\"开销\",{\"1\":{\"24\":1}}],[\"开辟\",{\"1\":{\"22\":1}}],[\"开发\",{\"1\":{\"15\":2,\"23\":1,\"37\":2}}],[\"开始\",{\"1\":{\"14\":1,\"17\":1,\"26\":1}}],[\"出错\",{\"1\":{\"24\":1}}],[\"出现\",{\"1\":{\"21\":4,\"28\":1,\"37\":2}}],[\"出现意外\",{\"1\":{\"12\":1}}],[\"出来\",{\"1\":{\"15\":1,\"22\":1,\"27\":3,\"28\":1}}],[\"出\",{\"1\":{\"15\":1,\"21\":2,\"31\":1,\"33\":1,\"34\":1}}],[\"范式\",{\"1\":{\"15\":1}}],[\"范围\",{\"1\":{\"7\":1,\"9\":3,\"13\":2,\"19\":1,\"22\":2}}],[\"面向\",{\"1\":{\"15\":3}}],[\"面向对象编程\",{\"1\":{\"15\":2}}],[\"面向对象\",{\"0\":{\"15\":1},\"1\":{\"15\":2}}],[\"长度\",{\"1\":{\"14\":1}}],[\"长\",{\"1\":{\"14\":3}}],[\"体\",{\"1\":{\"14\":1,\"17\":2}}],[\"体验\",{\"1\":{\"12\":1}}],[\"抽象\",{\"1\":{\"14\":2,\"15\":1,\"17\":12}}],[\"抽象类\",{\"0\":{\"17\":1},\"1\":{\"14\":2,\"17\":24,\"28\":1}}],[\"线程\",{\"1\":{\"14\":1,\"19\":5,\"22\":4,\"23\":2,\"31\":2}}],[\"程\",{\"1\":{\"14\":1,\"31\":2}}],[\"程序员\",{\"1\":{\"38\":1}}],[\"程序设计\",{\"1\":{\"29\":2}}],[\"程序运行\",{\"1\":{\"15\":1}}],[\"程序\",{\"1\":{\"7\":2,\"12\":1,\"15\":3,\"22\":3,\"23\":3,\"25\":1,\"26\":1,\"38\":1}}],[\"7\",{\"1\":{\"14\":1}}],[\"级别\",{\"1\":{\"14\":2}}],[\"5.\",{\"1\":{\"33\":1}}],[\"5\",{\"1\":{\"14\":1,\"24\":1,\"29\":1}}],[\"顶级\",{\"1\":{\"14\":2}}],[\"任何\",{\"1\":{\"14\":4,\"17\":1,\"21\":1,\"27\":1,\"35\":1}}],[\"任意\",{\"1\":{\"12\":1,\"19\":1,\"24\":1,\"25\":1}}],[\"异常\",{\"0\":{\"23\":1},\"1\":{\"13\":1,\"23\":21,\"37\":1}}],[\"异或\",{\"1\":{\"5\":1}}],[\"抛出\",{\"1\":{\"13\":1,\"37\":1}}],[\"期是\",{\"1\":{\"22\":1}}],[\"期间\",{\"1\":{\"15\":1,\"24\":5}}],[\"期\",{\"1\":{\"13\":1,\"22\":3,\"26\":2}}],[\"参考\",{\"1\":{\"21\":1}}],[\"参\",{\"1\":{\"15\":2}}],[\"参来\",{\"1\":{\"13\":1}}],[\"参数传递\",{\"1\":{\"29\":1}}],[\"参数\",{\"1\":{\"8\":1,\"12\":1,\"13\":2,\"14\":8,\"15\":3,\"19\":2,\"23\":1,\"24\":6,\"25\":6,\"29\":5,\"33\":3,\"37\":1}}],[\"传输\",{\"1\":{\"27\":4}}],[\"传回\",{\"1\":{\"21\":1}}],[\"传递\",{\"0\":{\"29\":1},\"1\":{\"20\":1,\"24\":3,\"29\":10}}],[\"传入\",{\"1\":{\"14\":1,\"24\":3,\"25\":2,\"29\":2}}],[\"传\",{\"1\":{\"13\":1}}],[\"顺序\",{\"0\":{\"39\":1},\"1\":{\"13\":1,\"39\":1}}],[\"覆盖\",{\"1\":{\"13\":1,\"17\":2,\"23\":2}}],[\"响应\",{\"1\":{\"13\":1}}],[\"父类\",{\"1\":{\"13\":8,\"15\":11,\"19\":1,\"20\":1,\"22\":1,\"26\":1}}],[\"继承\",{\"1\":{\"13\":1,\"14\":3,\"15\":7,\"17\":9,\"21\":1,\"22\":3,\"26\":1,\"34\":1}}],[\"继续执行\",{\"1\":{\"6\":1}}],[\"继续\",{\"1\":{\"6\":1,\"21\":1}}],[\"输入\",{\"1\":{\"13\":2,\"28\":7}}],[\"输出\",{\"1\":{\"5\":1,\"9\":4,\"14\":1,\"25\":1,\"28\":7,\"29\":4,\"31\":2}}],[\"重复\",{\"1\":{\"21\":2,\"22\":1,\"23\":1}}],[\"重用\",{\"1\":{\"15\":1}}],[\"重新\",{\"1\":{\"13\":1,\"17\":1,\"21\":1}}],[\"重写\",{\"1\":{\"13\":5,\"14\":3,\"15\":4,\"17\":6,\"19\":6,\"20\":3,\"21\":10,\"22\":2,\"26\":1,\"34\":1}}],[\"重载\",{\"1\":{\"13\":4,\"15\":2,\"22\":3,\"24\":1}}],[\"重要\",{\"1\":{\"5\":1,\"23\":1}}],[\"即用\",{\"1\":{\"25\":1}}],[\"即时\",{\"1\":{\"22\":1}}],[\"即\",{\"1\":{\"13\":2,\"14\":3,\"15\":1,\"20\":1,\"23\":2,\"28\":3,\"29\":2}}],[\"即使\",{\"1\":{\"12\":1,\"15\":1,\"21\":2,\"23\":1}}],[\"允许\",{\"1\":{\"13\":3,\"14\":1,\"15\":1,\"17\":2,\"19\":1,\"34\":1}}],[\"本地化\",{\"1\":{\"23\":2}}],[\"本地\",{\"1\":{\"21\":1,\"22\":1,\"23\":2}}],[\"本身\",{\"1\":{\"15\":1,\"22\":3,\"23\":1,\"29\":1}}],[\"本类\",{\"1\":{\"13\":1}}],[\"本质\",{\"1\":{\"5\":1,\"24\":1,\"26\":1,\"28\":1}}],[\"名字\",{\"1\":{\"19\":1}}],[\"名称\",{\"1\":{\"15\":2}}],[\"名\",{\"1\":{\"13\":6,\"17\":1}}],[\"此\",{\"1\":{\"19\":2,\"25\":1}}],[\"此时\",{\"1\":{\"13\":1,\"17\":2}}],[\"此处\",{\"1\":{\"0\":1,\"1\":1,\"24\":1}}],[\"才能\",{\"1\":{\"15\":1,\"17\":1,\"22\":2,\"24\":3}}],[\"才\",{\"1\":{\"13\":1,\"21\":1,\"22\":1,\"26\":1}}],[\"化时\",{\"1\":{\"24\":1}}],[\"化泛\",{\"1\":{\"24\":2}}],[\"化\",{\"1\":{\"13\":1,\"14\":1,\"17\":4,\"24\":1,\"27\":2}}],[\"非受\",{\"1\":{\"23\":1}}],[\"非法操作\",{\"1\":{\"13\":1}}],[\"非\",{\"1\":{\"13\":4,\"14\":2,\"17\":2}}],[\"非常容易\",{\"1\":{\"13\":1}}],[\"非常\",{\"1\":{\"8\":1,\"31\":1,\"36\":1,\"37\":1}}],[\"访问\",{\"1\":{\"12\":2,\"13\":10,\"14\":10,\"15\":5,\"22\":1,\"31\":1}}],[\"访问控制\",{\"1\":{\"12\":1}}],[\"同时\",{\"1\":{\"15\":1,\"21\":2,\"25\":1}}],[\"同学\",{\"1\":{\"15\":3}}],[\"同步\",{\"1\":{\"14\":1,\"22\":3}}],[\"同一时间\",{\"1\":{\"14\":1}}],[\"同一\",{\"1\":{\"14\":2,\"23\":1}}],[\"同一个\",{\"1\":{\"13\":2,\"15\":1,\"18\":3,\"22\":4,\"29\":2}}],[\"同名\",{\"1\":{\"13\":1}}],[\"同样\",{\"1\":{\"13\":1,\"21\":1,\"31\":3,\"33\":1,\"34\":1}}],[\"同\",{\"1\":{\"12\":1}}],[\"个数\",{\"1\":{\"13\":1}}],[\"个\",{\"1\":{\"12\":1,\"14\":1,\"15\":3,\"19\":3,\"22\":1,\"28\":1,\"33\":1,\"37\":1}}],[\"个人\",{\"1\":{\"0\":1}}],[\"静态方法\",{\"1\":{\"13\":11,\"14\":5,\"17\":3,\"24\":1,\"37\":1}}],[\"静态\",{\"0\":{\"31\":1,\"39\":1},\"1\":{\"12\":5,\"13\":6,\"14\":6,\"17\":2,\"24\":3,\"25\":2,\"31\":4,\"32\":1,\"36\":2,\"39\":2}}],[\"采用\",{\"1\":{\"12\":1,\"29\":1,\"34\":2}}],[\"又\",{\"1\":{\"12\":1,\"23\":1,\"28\":1}}],[\"”\",{\"1\":{\"12\":1,\"15\":1,\"20\":1,\"21\":2,\"22\":9}}],[\"“\",{\"1\":{\"12\":1,\"14\":2,\"15\":1,\"20\":1,\"21\":2,\"22\":9}}],[\"误报\",{\"1\":{\"12\":1}}],[\"误区\",{\"1\":{\"8\":1}}],[\"报错\",{\"1\":{\"12\":1,\"17\":2,\"24\":3}}],[\"判断\",{\"1\":{\"12\":2,\"20\":2,\"21\":5}}],[\"好像\",{\"1\":{\"15\":2}}],[\"好\",{\"1\":{\"12\":1,\"15\":1}}],[\"借助\",{\"1\":{\"12\":1}}],[\"设计模式\",{\"1\":{\"31\":1}}],[\"设计\",{\"1\":{\"15\":2,\"17\":1,\"31\":1}}],[\"设置\",{\"1\":{\"12\":1,\"29\":1,\"34\":3,\"37\":1}}],[\"设为\",{\"1\":{\"7\":1}}],[\"必须\",{\"1\":{\"12\":1,\"13\":2,\"14\":1,\"15\":2,\"17\":6,\"21\":4,\"23\":2,\"24\":2,\"32\":1,\"33\":1,\"36\":1}}],[\"必要\",{\"1\":{\"5\":1}}],[\"例外\",{\"1\":{\"12\":1}}],[\"例如\",{\"1\":{\"4\":4,\"5\":3,\"12\":1,\"15\":2,\"23\":1,\"27\":1,\"34\":1}}],[\"生效\",{\"1\":{\"26\":1}}],[\"生存\",{\"1\":{\"12\":2}}],[\"生成\",{\"1\":{\"5\":2,\"12\":1,\"15\":1,\"21\":2,\"22\":3,\"23\":1,\"27\":1,\"32\":1,\"33\":2,\"34\":2,\"35\":1,\"36\":1}}],[\"则\",{\"1\":{\"12\":3,\"13\":1,\"14\":1,\"20\":1,\"22\":3,\"23\":2,\"34\":1,\"40\":3}}],[\"块\",{\"0\":{\"39\":1},\"1\":{\"12\":1,\"14\":4,\"17\":1,\"23\":13,\"25\":1,\"39\":2}}],[\"看作\",{\"1\":{\"26\":1}}],[\"看出\",{\"1\":{\"22\":1,\"31\":1}}],[\"看成\",{\"1\":{\"17\":1}}],[\"看不到\",{\"1\":{\"15\":1}}],[\"看\",{\"1\":{\"12\":2,\"29\":1}}],[\"看到\",{\"1\":{\"7\":1}}],[\"做出\",{\"1\":{\"13\":2}}],[\"做\",{\"1\":{\"11\":1,\"22\":2,\"29\":1,\"31\":2,\"33\":1}}],[\"钱\",{\"1\":{\"11\":1}}],[\"场景\",{\"1\":{\"11\":2,\"27\":2}}],[\"业务\",{\"1\":{\"11\":1}}],[\"造成\",{\"1\":{\"11\":1,\"13\":1}}],[\"*\",{\"1\":{\"11\":5,\"19\":44,\"25\":20,\"33\":8,\"34\":11}}],[\"排列\",{\"1\":{\"11\":1}}],[\"直到\",{\"1\":{\"11\":1}}],[\"直接\",{\"1\":{\"5\":1,\"6\":1,\"9\":5,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"17\":3,\"18\":1,\"20\":1,\"21\":1,\"22\":1,\"24\":1,\"26\":1,\"29\":2,\"32\":1,\"35\":1,\"36\":1}}],[\"没\",{\"1\":{\"11\":1,\"12\":2,\"23\":1}}],[\"没有\",{\"1\":{\"6\":1,\"8\":1,\"9\":1,\"11\":1,\"12\":4,\"14\":2,\"15\":9,\"17\":3,\"19\":2,\"20\":1,\"21\":7,\"22\":6,\"23\":3,\"24\":2,\"29\":1,\"38\":1}}],[\"十进制\",{\"1\":{\"11\":1}}],[\"精确\",{\"1\":{\"11\":3}}],[\"精度\",{\"0\":{\"11\":1},\"1\":{\"11\":2,\"37\":3}}],[\"办法\",{\"1\":{\"11\":2,\"23\":1,\"24\":1}}],[\"损失\",{\"1\":{\"11\":1}}],[\"截断\",{\"1\":{\"11\":1}}],[\"宽度\",{\"1\":{\"11\":1}}],[\"关闭\",{\"1\":{\"23\":1}}],[\"关于\",{\"1\":{\"15\":1,\"27\":1}}],[\"关键\",{\"1\":{\"22\":1}}],[\"关键字\",{\"1\":{\"12\":2,\"19\":1,\"22\":7,\"23\":1,\"27\":4}}],[\"关键词\",{\"1\":{\"6\":1}}],[\"关系\",{\"1\":{\"11\":1,\"15\":1,\"17\":1,\"21\":1}}],[\"丢失\",{\"0\":{\"11\":1},\"1\":{\"11\":1,\"37\":1}}],[\"丢弃\",{\"1\":{\"5\":2}}],[\"应\",{\"1\":{\"33\":1}}],[\"应比\",{\"1\":{\"13\":1}}],[\"应该\",{\"1\":{\"10\":1,\"32\":1}}],[\"应用\",{\"1\":{\"5\":1,\"27\":1}}],[\"影响\",{\"1\":{\"10\":1,\"12\":1,\"22\":1,\"25\":1,\"29\":4,\"38\":1}}],[\"严重\",{\"1\":{\"10\":1}}],[\"调用\",{\"1\":{\"10\":2,\"12\":2,\"13\":7,\"14\":3,\"15\":4,\"17\":4,\"21\":1,\"22\":8,\"25\":4,\"27\":1,\"31\":3,\"33\":13,\"34\":6,\"35\":1}}],[\"调整\",{\"1\":{\"5\":1}}],[\"码\",{\"1\":{\"19\":2,\"21\":2,\"22\":1,\"32\":1,\"34\":2,\"36\":1}}],[\"码中\",{\"1\":{\"10\":1}}],[\"码为\",{\"1\":{\"10\":1}}],[\"从文件\",{\"1\":{\"27\":1}}],[\"从上到下\",{\"1\":{\"11\":1}}],[\"从\",{\"1\":{\"10\":1,\"12\":4,\"14\":1,\"17\":1,\"27\":2,\"29\":1,\"31\":1,\"32\":1}}],[\"从而\",{\"1\":{\"5\":1,\"17\":1,\"21\":1}}],[\"两点\",{\"1\":{\"28\":1}}],[\"两个\",{\"1\":{\"18\":1,\"20\":5,\"21\":22,\"22\":3,\"23\":1,\"32\":1,\"37\":4}}],[\"两者\",{\"0\":{\"35\":1,\"36\":1},\"1\":{\"15\":1,\"21\":1}}],[\"两行\",{\"1\":{\"10\":1}}],[\"两种\",{\"1\":{\"6\":1,\"9\":1,\"12\":1,\"15\":1,\"20\":1,\"22\":1,\"26\":1,\"29\":2}}],[\"引用\",{\"1\":{\"10\":1,\"15\":10,\"17\":1,\"18\":5,\"20\":4,\"22\":13,\"29\":9}}],[\"引入\",{\"1\":{\"8\":1,\"17\":3,\"24\":2,\"26\":1}}],[\"拆成\",{\"1\":{\"15\":1}}],[\"拆\",{\"1\":{\"10\":3}}],[\"拆箱\",{\"0\":{\"10\":1},\"1\":{\"10\":3}}],[\"什么\",{\"1\":{\"10\":1,\"15\":1,\"21\":1,\"22\":2,\"23\":2,\"33\":1}}],[\"与众不同\",{\"1\":{\"15\":1}}],[\"与\",{\"0\":{\"10\":1},\"1\":{\"12\":1,\"15\":2,\"17\":1,\"21\":2,\"22\":5,\"23\":1,\"24\":1,\"31\":1,\"33\":1}}],[\"questions\",{\"1\":{\"9\":1}}],[\"链接\",{\"1\":{\"9\":1}}],[\"原始\",{\"1\":{\"29\":3,\"34\":2}}],[\"原始数据\",{\"1\":{\"27\":1}}],[\"原件\",{\"1\":{\"29\":1}}],[\"原生\",{\"1\":{\"24\":1,\"33\":2}}],[\"原理\",{\"1\":{\"21\":1,\"25\":1}}],[\"原\",{\"1\":{\"18\":2}}],[\"原文\",{\"1\":{\"9\":1}}],[\"原因\",{\"1\":{\"5\":1,\"7\":1,\"13\":1,\"22\":2,\"24\":1,\"28\":1}}],[\"协议\",{\"1\":{\"9\":1}}],[\"m0\",{\"1\":{\"39\":1}}],[\"m\",{\"1\":{\"37\":2}}],[\"multiply\",{\"1\":{\"37\":2}}],[\"message\",{\"1\":{\"31\":8,\"33\":6,\"34\":5}}],[\"methodproxy\",{\"1\":{\"34\":6}}],[\"methodinterceptor\",{\"1\":{\"34\":8}}],[\"methods\",{\"1\":{\"25\":2}}],[\"method2\",{\"1\":{\"14\":1}}],[\"method1\",{\"1\":{\"14\":1}}],[\"method\",{\"1\":{\"8\":1,\"14\":2,\"17\":4,\"24\":4,\"25\":7,\"26\":1,\"31\":4,\"33\":14,\"34\":13}}],[\"machineerror\",{\"1\":{\"23\":1}}],[\"main\",{\"1\":{\"14\":6,\"17\":1,\"25\":2,\"29\":5,\"31\":3}}],[\"mysql\",{\"0\":{\"66\":1}}],[\"mytask\",{\"1\":{\"31\":3}}],[\"myinterface\",{\"1\":{\"17\":4}}],[\"myclass\",{\"1\":{\"14\":14}}],[\"mit\",{\"1\":{\"9\":1}}],[\"归\",{\"1\":{\"9\":1}}],[\"著作权\",{\"1\":{\"9\":1}}],[\"装箱\",{\"0\":{\"10\":1},\"1\":{\"9\":2,\"10\":6}}],[\"资源\",{\"1\":{\"9\":1}}],[\"只不过\",{\"1\":{\"19\":1}}],[\"只\",{\"1\":{\"13\":1,\"15\":1,\"21\":2,\"22\":1}}],[\"只会\",{\"1\":{\"12\":1,\"19\":1}}],[\"只能\",{\"1\":{\"11\":1,\"14\":5,\"17\":6,\"20\":1,\"24\":2,\"27\":1,\"34\":1,\"35\":1}}],[\"只是\",{\"1\":{\"9\":1,\"15\":1,\"20\":1,\"24\":1,\"29\":1}}],[\"只有\",{\"1\":{\"5\":1,\"13\":2,\"14\":1,\"20\":1,\"22\":1,\"26\":1,\"29\":1}}],[\"新版\",{\"1\":{\"22\":1}}],[\"新类\",{\"1\":{\"15\":3}}],[\"新\",{\"1\":{\"9\":3,\"15\":3,\"17\":2,\"18\":1,\"22\":5,\"24\":2,\"26\":1,\"29\":2,\"31\":1,\"36\":1}}],[\"去\",{\"1\":{\"9\":1,\"13\":1,\"33\":1}}],[\"仍然\",{\"1\":{\"9\":1,\"18\":1,\"29\":2}}],[\"超时\",{\"1\":{\"19\":2}}],[\"超出\",{\"1\":{\"9\":1}}],[\"超过\",{\"1\":{\"5\":1,\"22\":2}}],[\"]\",{\"1\":{\"9\":2,\"14\":3,\"17\":1,\"22\":6,\"24\":4,\"25\":2,\"29\":8,\"31\":2,\"33\":3,\"34\":2}}],[\"[\",{\"1\":{\"9\":2,\"14\":3,\"17\":1,\"22\":6,\"24\":4,\"25\":2,\"29\":8,\"31\":2,\"33\":3,\"34\":2}}],[\"创建对象\",{\"1\":{\"13\":1,\"15\":3,\"37\":1}}],[\"创建\",{\"1\":{\"9\":5,\"12\":3,\"14\":2,\"15\":3,\"17\":1,\"18\":1,\"19\":1,\"22\":5,\"23\":1,\"24\":2,\"25\":2,\"29\":2,\"31\":2,\"32\":1,\"33\":1,\"34\":2,\"36\":1}}],[\"默认\",{\"1\":{\"9\":1,\"14\":1,\"15\":2,\"17\":8,\"20\":1,\"21\":2,\"34\":1}}],[\"默认值\",{\"1\":{\"7\":2,\"8\":2,\"12\":8,\"27\":1}}],[\"机制\",{\"0\":{\"9\":1},\"1\":{\"9\":2,\"11\":1,\"24\":1,\"32\":1,\"33\":1,\"34\":2}}],[\"机器\",{\"1\":{\"7\":1}}],[\"错误\",{\"1\":{\"8\":1,\"14\":3,\"21\":2,\"23\":13}}],[\"val\",{\"1\":{\"37\":2}}],[\"valueof\",{\"1\":{\"9\":2,\"10\":3,\"37\":1}}],[\"value\",{\"1\":{\"6\":1,\"21\":1,\"22\":8,\"25\":6,\"26\":1,\"37\":1}}],[\"version\",{\"1\":{\"34\":2}}],[\"v\",{\"1\":{\"24\":1}}],[\"virtual\",{\"1\":{\"23\":1}}],[\"void\",{\"1\":{\"8\":1,\"14\":10,\"15\":1,\"17\":15,\"19\":6,\"23\":1,\"24\":2,\"25\":3,\"29\":8,\"31\":5}}],[\"均\",{\"1\":{\"8\":1,\"27\":1}}],[\"及其\",{\"1\":{\"23\":3,\"31\":1}}],[\"及\",{\"1\":{\"8\":1,\"12\":1,\"17\":1}}],[\"peter\",{\"1\":{\"38\":1}}],[\"persons\",{\"1\":{\"24\":1}}],[\"person1copy\",{\"1\":{\"18\":4}}],[\"person1\",{\"1\":{\"18\":10}}],[\"person\",{\"1\":{\"18\":21,\"24\":3}}],[\"param\",{\"1\":{\"34\":4}}],[\"parent\",{\"1\":{\"14\":2}}],[\"pascal\",{\"1\":{\"29\":1}}],[\"package\",{\"1\":{\"25\":2}}],[\"pop\",{\"1\":{\"15\":3}}],[\"proxy\",{\"1\":{\"33\":7,\"34\":5}}],[\"programming\",{\"1\":{\"15\":2}}],[\"procedural\",{\"1\":{\"15\":1}}],[\"protected\",{\"1\":{\"14\":1,\"17\":1,\"19\":2}}],[\"printf\",{\"1\":{\"24\":1}}],[\"printarray\",{\"1\":{\"24\":4}}],[\"printstacktrace\",{\"1\":{\"23\":1}}],[\"println\",{\"1\":{\"5\":4,\"9\":4,\"14\":4,\"15\":4,\"17\":7,\"18\":2,\"22\":8,\"24\":2,\"25\":3,\"29\":7,\"31\":5,\"33\":3,\"34\":3,\"37\":8}}],[\"privatemethod\",{\"1\":{\"25\":6}}],[\"private\",{\"1\":{\"12\":2,\"13\":1,\"14\":1,\"17\":10,\"18\":2,\"22\":3,\"24\":1,\"25\":4,\"29\":1,\"31\":2,\"33\":1}}],[\"putfield\",{\"1\":{\"10\":2}}],[\"publicmethod\",{\"1\":{\"25\":5}}],[\"public\",{\"1\":{\"8\":2,\"12\":1,\"14\":24,\"17\":22,\"18\":5,\"19\":9,\"20\":1,\"22\":4,\"24\":9,\"25\":5,\"26\":2,\"29\":10,\"31\":16,\"33\":11,\"34\":8,\"37\":2}}],[\"元素\",{\"1\":{\"21\":3,\"22\":2,\"29\":1}}],[\"元\",{\"1\":{\"8\":1}}],[\"区域\",{\"1\":{\"22\":1}}],[\"区间\",{\"1\":{\"9\":1}}],[\"区\",{\"1\":{\"8\":2}}],[\"区别\",{\"0\":{\"8\":1,\"20\":1},\"1\":{\"12\":1,\"13\":1,\"15\":2,\"17\":1,\"18\":2,\"19\":1,\"22\":1,\"23\":2}}],[\"；\",{\"1\":{\"8\":1,\"10\":2,\"12\":2,\"14\":2,\"15\":5,\"20\":1,\"22\":1,\"27\":4,\"28\":1,\"31\":1,\"33\":2}}],[\"声明\",{\"1\":{\"8\":1,\"13\":1,\"14\":1,\"15\":3,\"17\":1,\"22\":1,\"24\":2,\"35\":1}}],[\"取消\",{\"1\":{\"25\":2}}],[\"取决于\",{\"1\":{\"8\":1}}],[\"取值\",{\"1\":{\"7\":1}}],[\"！\",{\"1\":{\"8\":1,\"15\":1,\"21\":2,\"23\":1,\"29\":1,\"36\":1}}],[\"️\",{\"1\":{\"8\":1}}],[\"⚠\",{\"1\":{\"8\":1}}],[\"避免\",{\"1\":{\"8\":1,\"22\":2,\"34\":1}}],[\"栈\",{\"1\":{\"8\":2,\"15\":1}}],[\"栈上\",{\"1\":{\"8\":1}}],[\"栈中\",{\"1\":{\"8\":2}}],[\"替换\",{\"1\":{\"8\":1}}],[\"标题\",{\"0\":{\"42\":1,\"43\":1,\"45\":1,\"46\":1,\"48\":1,\"49\":1,\"51\":1,\"52\":1,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"60\":1,\"61\":1}}],[\"标识\",{\"1\":{\"24\":1}}],[\"标量\",{\"1\":{\"8\":1}}],[\"标志\",{\"1\":{\"5\":1}}],[\"那些\",{\"1\":{\"27\":1}}],[\"那\",{\"1\":{\"21\":5,\"22\":1,\"24\":1,\"28\":1}}],[\"那么\",{\"1\":{\"8\":3,\"12\":1,\"15\":2,\"21\":3,\"27\":1}}],[\"那样\",{\"1\":{\"7\":1}}],[\"并\",{\"1\":{\"8\":1,\"9\":1,\"19\":1,\"21\":1,\"22\":8,\"25\":2,\"26\":1,\"29\":3,\"31\":1,\"32\":1,\"34\":1,\"36\":1,\"38\":1}}],[\"并且\",{\"1\":{\"8\":1,\"19\":3,\"21\":1,\"22\":2,\"24\":2,\"25\":1,\"31\":1,\"32\":1,\"36\":1,\"37\":1}}],[\"逃逸\",{\"1\":{\"8\":2}}],[\"说明\",{\"1\":{\"29\":1}}],[\"说\",{\"1\":{\"8\":1,\"22\":1,\"32\":1}}],[\"且\",{\"1\":{\"8\":1,\"15\":1,\"17\":1,\"22\":1,\"31\":1}}],[\"小红\",{\"1\":{\"15\":1}}],[\"小明\",{\"1\":{\"15\":2}}],[\"小于\",{\"1\":{\"13\":1,\"37\":1}}],[\"小数\",{\"1\":{\"11\":4,\"37\":3}}],[\"小\",{\"1\":{\"8\":1,\"13\":1,\"15\":3}}],[\"往往\",{\"1\":{\"8\":1}}],[\"知名\",{\"1\":{\"34\":1}}],[\"知道\",{\"1\":{\"8\":1,\"11\":1,\"22\":1,\"25\":2,\"28\":1}}],[\"知识\",{\"1\":{\"5\":1,\"13\":1}}],[\"知识库\",{\"0\":{\"1\":1},\"1\":{\"1\":1}}],[\"属于\",{\"1\":{\"8\":3,\"12\":3,\"13\":5,\"14\":2,\"23\":2,\"27\":1,\"34\":1}}],[\"属性\",{\"1\":{\"8\":1,\"15\":8,\"18\":1,\"20\":2,\"25\":2,\"29\":1}}],[\"堆中\",{\"1\":{\"22\":1}}],[\"堆上\",{\"1\":{\"8\":1}}],[\"堆\",{\"1\":{\"8\":6,\"12\":1,\"15\":1,\"18\":1,\"22\":2,\"29\":1}}],[\"虚拟机\",{\"1\":{\"8\":3,\"22\":1,\"23\":4,\"24\":1,\"28\":1}}],[\"存入\",{\"1\":{\"22\":1}}],[\"存\",{\"1\":{\"20\":1}}],[\"存在\",{\"1\":{\"8\":2,\"11\":1,\"12\":3,\"13\":6,\"15\":3,\"17\":1,\"20\":2,\"21\":1,\"22\":2,\"23\":1}}],[\"存放\",{\"1\":{\"8\":9,\"15\":2,\"22\":1}}],[\"存储单元\",{\"1\":{\"28\":1}}],[\"存储空间\",{\"1\":{\"7\":2}}],[\"存储\",{\"1\":{\"5\":2,\"7\":1,\"8\":2,\"11\":1,\"12\":3,\"21\":15,\"22\":1,\"27\":5,\"28\":1}}],[\"地\",{\"1\":{\"12\":1,\"15\":3,\"24\":1}}],[\"地方\",{\"1\":{\"8\":1}}],[\"地址\",{\"1\":{\"5\":1,\"18\":1,\"20\":1,\"29\":3}}],[\"局部变量\",{\"1\":{\"8\":6,\"12\":9}}],[\"类来\",{\"1\":{\"25\":1,\"34\":1}}],[\"类上\",{\"1\":{\"24\":1}}],[\"类时\",{\"1\":{\"24\":1}}],[\"类有\",{\"1\":{\"23\":1}}],[\"类似\",{\"1\":{\"17\":1,\"28\":1}}],[\"类所能\",{\"1\":{\"17\":1}}],[\"类中\",{\"1\":{\"13\":2,\"15\":2,\"17\":3,\"20\":1,\"21\":1,\"22\":1,\"24\":1,\"25\":2,\"31\":1,\"33\":2,\"34\":1}}],[\"类名\",{\"1\":{\"12\":1,\"13\":3,\"14\":1,\"15\":2}}],[\"类\",{\"1\":{\"7\":1,\"8\":2,\"9\":3,\"10\":1,\"12\":4,\"13\":8,\"14\":23,\"15\":9,\"17\":8,\"18\":1,\"19\":5,\"20\":7,\"21\":2,\"22\":7,\"23\":5,\"24\":4,\"25\":15,\"26\":1,\"27\":1,\"28\":1,\"31\":15,\"32\":4,\"33\":11,\"34\":11,\"35\":5,\"36\":6}}],[\"类型转换\",{\"1\":{\"10\":1,\"23\":1,\"24\":1}}],[\"类型\",{\"0\":{\"8\":2,\"9\":1},\"1\":{\"4\":1,\"5\":5,\"7\":7,\"8\":9,\"9\":3,\"10\":2,\"12\":2,\"13\":3,\"15\":5,\"17\":2,\"18\":1,\"20\":3,\"22\":4,\"23\":1,\"24\":17,\"27\":2,\"28\":1,\"29\":4,\"35\":1}}],[\"包\",{\"1\":{\"25\":1}}],[\"包括\",{\"1\":{\"15\":1,\"17\":1,\"18\":1,\"25\":1}}],[\"包中\",{\"1\":{\"14\":3,\"23\":1}}],[\"包装\",{\"0\":{\"8\":1,\"9\":1},\"1\":{\"7\":1,\"8\":6,\"9\":4,\"10\":3}}],[\"包含\",{\"1\":{\"5\":1,\"17\":6,\"18\":2,\"21\":1,\"22\":3}}],[\"八种\",{\"1\":{\"7\":1}}],[\"双引号\",{\"1\":{\"7\":1}}],[\"解决\",{\"1\":{\"34\":1}}],[\"解决问题\",{\"1\":{\"15\":4}}],[\"解释\",{\"1\":{\"11\":1}}],[\"解析\",{\"1\":{\"7\":1,\"26\":2,\"29\":2}}],[\"解密\",{\"1\":{\"5\":1}}],[\"作为\",{\"1\":{\"7\":1,\"14\":1,\"15\":1,\"21\":2,\"22\":2}}],[\"作用域\",{\"1\":{\"8\":1}}],[\"作用\",{\"1\":{\"5\":1,\"20\":1,\"21\":2,\"22\":2,\"27\":1}}],[\"否则\",{\"1\":{\"7\":2,\"22\":1,\"34\":1,\"37\":1}}],[\"加减乘除\",{\"1\":{\"22\":1,\"37\":1}}],[\"加入\",{\"1\":{\"21\":4}}],[\"加\",{\"1\":{\"14\":1,\"22\":3}}],[\"加载\",{\"1\":{\"13\":1,\"14\":2,\"24\":2,\"25\":2,\"32\":1,\"33\":3,\"34\":1,\"36\":1}}],[\"加上\",{\"1\":{\"7\":2,\"19\":1}}],[\"加密\",{\"1\":{\"5\":1}}],[\"里\",{\"1\":{\"7\":2,\"23\":1}}],[\"节有\",{\"1\":{\"7\":1}}],[\"节省\",{\"1\":{\"5\":2,\"12\":1,\"15\":1,\"22\":1}}],[\"》\",{\"1\":{\"7\":1,\"22\":1,\"37\":2}}],[\"思想\",{\"1\":{\"7\":1}}],[\"《\",{\"1\":{\"7\":1,\"22\":1,\"37\":2}}],[\"比如说\",{\"1\":{\"11\":1,\"23\":1}}],[\"比如\",{\"1\":{\"8\":1,\"11\":1,\"14\":1,\"19\":1,\"21\":1,\"22\":1,\"23\":4,\"24\":1,\"25\":1,\"26\":2,\"27\":2,\"28\":1,\"29\":1,\"31\":1,\"32\":1,\"33\":1}}],[\"比用\",{\"1\":{\"7\":1}}],[\"比较\",{\"1\":{\"5\":1,\"8\":4,\"9\":2,\"15\":7,\"19\":2,\"20\":7,\"21\":3,\"22\":3,\"28\":1,\"37\":6}}],[\"而是\",{\"1\":{\"13\":1,\"21\":1}}],[\"而且\",{\"1\":{\"11\":1}}],[\"而\",{\"1\":{\"7\":1,\"8\":3,\"9\":2,\"12\":11,\"13\":3,\"14\":2,\"19\":2,\"20\":1,\"21\":1,\"22\":1,\"28\":1,\"29\":1,\"35\":1,\"36\":1,\"37\":1}}],[\"架构\",{\"1\":{\"7\":1}}],[\"随便\",{\"1\":{\"24\":1}}],[\"随机\",{\"1\":{\"12\":1}}],[\"随着\",{\"1\":{\"12\":3,\"35\":1}}],[\"随\",{\"1\":{\"7\":1}}],[\"语法\",{\"0\":{\"38\":1},\"1\":{\"12\":2,\"38\":5}}],[\"语言\",{\"1\":{\"7\":2,\"21\":1,\"22\":1,\"29\":2,\"38\":2}}],[\"语句\",{\"1\":{\"6\":1,\"23\":12}}],[\"因为\",{\"1\":{\"15\":3,\"17\":1,\"20\":1,\"21\":5,\"22\":1,\"27\":1,\"29\":1}}],[\"因素\",{\"1\":{\"7\":1}}],[\"因此\",{\"1\":{\"5\":2,\"9\":2,\"10\":1,\"13\":1,\"15\":1,\"20\":1,\"22\":2,\"24\":1,\"28\":1,\"29\":2,\"35\":1,\"37\":1}}],[\"逻辑\",{\"1\":{\"7\":1,\"13\":1,\"21\":6,\"33\":2}}],[\"实参\",{\"1\":{\"29\":8}}],[\"实战\",{\"1\":{\"25\":1}}],[\"实例\",{\"1\":{\"8\":2,\"12\":2,\"13\":9,\"14\":6,\"15\":4,\"17\":5,\"19\":2,\"24\":4,\"25\":2,\"27\":1}}],[\"实现\",{\"1\":{\"7\":1,\"8\":1,\"9\":1,\"11\":1,\"13\":1,\"15\":2,\"17\":16,\"21\":1,\"22\":4,\"24\":2,\"31\":7,\"32\":4,\"33\":8,\"34\":4,\"35\":2,\"36\":3}}],[\"实际上\",{\"1\":{\"5\":1,\"22\":2,\"29\":1,\"33\":1}}],[\"实际\",{\"1\":{\"5\":1,\"7\":1,\"25\":1,\"31\":3,\"33\":3,\"34\":3,\"36\":1}}],[\"具体表现\",{\"1\":{\"15\":1}}],[\"具体\",{\"1\":{\"7\":1,\"17\":4,\"24\":1,\"25\":2}}],[\"具有\",{\"1\":{\"5\":1,\"15\":5,\"17\":1}}],[\"厂商\",{\"1\":{\"7\":1}}],[\"未\",{\"1\":{\"7\":1,\"8\":1,\"35\":1}}],[\"官方\",{\"1\":{\"7\":1,\"22\":1}}],[\"导致\",{\"1\":{\"7\":1,\"11\":1,\"21\":3,\"22\":2}}],[\"要用\",{\"0\":{\"16\":1}}],[\"要加\",{\"1\":{\"15\":1}}],[\"要\",{\"1\":{\"7\":3,\"12\":1,\"13\":1,\"15\":2,\"17\":2,\"18\":1,\"21\":1,\"22\":2,\"24\":1,\"25\":2,\"28\":2,\"31\":1,\"33\":1,\"34\":1,\"36\":1,\"37\":1}}],[\"要求\",{\"1\":{\"6\":1}}],[\"部分\",{\"1\":{\"7\":1,\"11\":1}}],[\"呢\",{\"1\":{\"7\":1,\"21\":2,\"28\":2}}],[\"表达式\",{\"1\":{\"22\":2}}],[\"表\",{\"1\":{\"21\":1}}],[\"表中\",{\"1\":{\"8\":1,\"19\":1,\"21\":2}}],[\"表示法\",{\"1\":{\"7\":1}}],[\"表示\",{\"1\":{\"7\":6,\"11\":2,\"14\":2,\"15\":1,\"19\":1,\"22\":4,\"24\":1,\"37\":4}}],[\"表现\",{\"1\":{\"5\":1}}],[\"能力\",{\"1\":{\"25\":2}}],[\"能够\",{\"1\":{\"13\":2,\"17\":1}}],[\"能\",{\"1\":{\"7\":1,\"12\":1,\"21\":1}}],[\"像\",{\"1\":{\"7\":2,\"26\":1}}],[\"temp\",{\"1\":{\"29\":2}}],[\"test1\",{\"1\":{\"29\":26}}],[\"test\",{\"1\":{\"8\":1,\"17\":1}}],[\"target\",{\"1\":{\"26\":1,\"31\":5,\"33\":9}}],[\"targetclass\",{\"1\":{\"25\":6}}],[\"targetobject\",{\"1\":{\"25\":18}}],[\"t\",{\"1\":{\"24\":15}}],[\"timeout\",{\"1\":{\"19\":3}}],[\"tostring\",{\"1\":{\"19\":1,\"22\":2,\"23\":1}}],[\"tobinarystring\",{\"1\":{\"5\":2}}],[\"transient\",{\"1\":{\"27\":7}}],[\"try\",{\"1\":{\"18\":3,\"23\":7}}],[\"true\",{\"1\":{\"7\":1,\"9\":2,\"15\":3,\"18\":1,\"20\":1,\"21\":1,\"22\":4,\"25\":2,\"40\":1}}],[\"thread\",{\"1\":{\"31\":10}}],[\"throwable\",{\"1\":{\"19\":1,\"23\":5,\"33\":1,\"34\":2}}],[\"throws\",{\"1\":{\"19\":5,\"23\":1,\"25\":1,\"29\":1,\"33\":3,\"34\":2}}],[\"throw\",{\"1\":{\"18\":3}}],[\"the\",{\"1\":{\"17\":1}}],[\"this\",{\"1\":{\"14\":2,\"17\":4,\"20\":1,\"22\":1,\"24\":1,\"29\":1,\"31\":1,\"33\":1}}],[\"3.3.0\",{\"1\":{\"34\":1}}],[\"3.\",{\"1\":{\"24\":1,\"25\":1,\"31\":1,\"33\":1,\"34\":1}}],[\"3.4028235\",{\"1\":{\"7\":1}}],[\"3\",{\"0\":{\"43\":1,\"46\":1,\"49\":1,\"52\":1,\"55\":1,\"58\":1,\"61\":1},\"1\":{\"14\":1,\"15\":1,\"24\":1,\"29\":1,\"33\":1,\"37\":8}}],[\"333\",{\"1\":{\"9\":2}}],[\"33\",{\"1\":{\"9\":2}}],[\"30\",{\"1\":{\"8\":1}}],[\"324\",{\"1\":{\"7\":1}}],[\"32767\",{\"1\":{\"7\":1}}],[\"32768\",{\"1\":{\"7\":1}}],[\"32\",{\"1\":{\"5\":5,\"7\":2}}],[\"'\",{\"1\":{\"7\":4}}],[\"loader\",{\"1\":{\"33\":2}}],[\"loadclass\",{\"1\":{\"25\":2}}],[\"love\",{\"1\":{\"25\":2}}],[\"long\",{\"1\":{\"5\":4,\"7\":5,\"9\":1,\"19\":2,\"22\":1}}],[\"library\",{\"1\":{\"34\":2}}],[\"list\",{\"1\":{\"24\":12}}],[\"linenumber\",{\"1\":{\"10\":2}}],[\"llo\",{\"1\":{\"22\":1}}],[\"landin\",{\"1\":{\"38\":1}}],[\"lang\",{\"1\":{\"10\":5,\"23\":1,\"25\":3,\"33\":3,\"34\":2}}],[\"latin\",{\"1\":{\"22\":6}}],[\"length\",{\"1\":{\"22\":1}}],[\"len\",{\"1\":{\"22\":4}}],[\"l2\",{\"1\":{\"10\":2}}],[\"ljava\",{\"1\":{\"10\":3}}],[\"l1\",{\"1\":{\"10\":2}}],[\"l\",{\"1\":{\"7\":2}}],[\"~\",{\"1\":{\"7\":7,\"22\":1}}],[\"字段\",{\"1\":{\"29\":3}}],[\"字节\",{\"1\":{\"7\":1,\"10\":2,\"22\":3,\"27\":1,\"28\":8,\"32\":1,\"34\":2,\"36\":1}}],[\"字符\",{\"1\":{\"5\":2,\"7\":1,\"22\":5,\"28\":6}}],[\"字符串\",{\"1\":{\"5\":2,\"15\":3,\"19\":2,\"22\":51,\"23\":1}}],[\"大家\",{\"1\":{\"25\":1}}],[\"大大\",{\"1\":{\"21\":1}}],[\"大大提高\",{\"1\":{\"21\":1}}],[\"大大减少\",{\"1\":{\"21\":1}}],[\"大量\",{\"1\":{\"15\":1,\"22\":2}}],[\"大\",{\"1\":{\"15\":1}}],[\"大可不必\",{\"1\":{\"15\":1}}],[\"大部分\",{\"1\":{\"9\":1,\"11\":1,\"35\":1}}],[\"大多数\",{\"1\":{\"7\":2}}],[\"大小\",{\"1\":{\"7\":3,\"9\":1,\"37\":2}}],[\"大于\",{\"1\":{\"5\":1,\"13\":1,\"37\":1}}],[\"空\",{\"1\":{\"15\":1,\"23\":1}}],[\"空调\",{\"1\":{\"15\":4}}],[\"空间\",{\"1\":{\"7\":1,\"8\":4,\"22\":1}}],[\"空位\",{\"1\":{\"5\":2}}],[\"占位\",{\"1\":{\"24\":1}}],[\"占用\",{\"1\":{\"7\":1,\"8\":2,\"22\":2}}],[\"占\",{\"1\":{\"7\":3,\"22\":1}}],[\"占有\",{\"1\":{\"5\":1}}],[\"布尔\",{\"1\":{\"7\":1}}],[\"布尔值\",{\"1\":{\"5\":2}}],[\"型类\",{\"1\":{\"24\":1}}],[\"型\",{\"1\":{\"7\":2,\"24\":6,\"25\":1}}],[\"浮点数\",{\"0\":{\"11\":1},\"1\":{\"9\":1,\"11\":4}}],[\"浮点\",{\"1\":{\"7\":1}}],[\"4.\",{\"1\":{\"25\":1,\"31\":1,\"33\":1,\"34\":1}}],[\"4.9\",{\"1\":{\"7\":1}}],[\"404\",{\"1\":{\"62\":1}}],[\"40\",{\"1\":{\"8\":1,\"9\":8,\"28\":1}}],[\"45\",{\"1\":{\"7\":1}}],[\"4\",{\"1\":{\"7\":3,\"9\":1,\"14\":1,\"28\":1,\"29\":1}}],[\"42\",{\"1\":{\"5\":5}}],[\"67589400\",{\"1\":{\"39\":1}}],[\"65535\",{\"1\":{\"7\":1}}],[\"63\",{\"1\":{\"7\":2}}],[\"6\",{\"1\":{\"7\":1,\"14\":1}}],[\"64\",{\"1\":{\"5\":2,\"7\":2}}],[\"分布\",{\"1\":{\"21\":1}}],[\"分配内存\",{\"1\":{\"8\":1,\"13\":1}}],[\"分配\",{\"1\":{\"8\":1,\"12\":1}}],[\"分析\",{\"1\":{\"8\":1,\"25\":2}}],[\"分别\",{\"1\":{\"7\":2}}],[\"分为\",{\"1\":{\"5\":1,\"23\":1,\"28\":4,\"29\":1}}],[\"种\",{\"1\":{\"7\":7,\"9\":1,\"23\":1}}],[\"特性\",{\"1\":{\"15\":2,\"21\":1,\"24\":1,\"26\":1}}],[\"特征\",{\"1\":{\"15\":1}}],[\"特点\",{\"1\":{\"15\":2,\"21\":1}}],[\"特定\",{\"1\":{\"6\":1,\"14\":1}}],[\"特殊\",{\"1\":{\"5\":1,\"19\":1,\"23\":1,\"26\":2}}],[\"函数\",{\"1\":{\"6\":2,\"14\":1,\"21\":1,\"29\":1}}],[\"运行\",{\"1\":{\"6\":1,\"12\":3,\"13\":1,\"19\":1,\"22\":2,\"23\":2,\"24\":2,\"25\":3,\"26\":2,\"31\":1,\"32\":1,\"33\":1,\"34\":2,\"36\":1}}],[\"运算\",{\"0\":{\"11\":1},\"1\":{\"5\":3,\"11\":2,\"22\":3}}],[\"运算符\",{\"0\":{\"4\":1,\"5\":1},\"1\":{\"4\":4,\"5\":13,\"15\":1,\"22\":3}}],[\"用此\",{\"1\":{\"27\":1}}],[\"用户\",{\"1\":{\"12\":1,\"23\":1}}],[\"用\",{\"1\":{\"10\":1,\"11\":1,\"14\":1,\"15\":5,\"17\":1,\"21\":1,\"22\":1,\"34\":1}}],[\"用途\",{\"1\":{\"8\":1}}],[\"用来\",{\"1\":{\"7\":1,\"20\":1,\"22\":1,\"33\":1}}],[\"用法\",{\"1\":{\"6\":1}}],[\"用于\",{\"1\":{\"6\":3,\"8\":1,\"14\":9,\"17\":5,\"19\":5,\"20\":1,\"21\":3,\"23\":2,\"26\":1,\"33\":1,\"34\":3,\"37\":4}}],[\"用到\",{\"1\":{\"6\":1,\"9\":1,\"15\":1,\"23\":1,\"27\":2}}],[\"跳出\",{\"1\":{\"6\":3}}],[\"指在\",{\"1\":{\"38\":1}}],[\"指明\",{\"1\":{\"24\":1}}],[\"指定\",{\"1\":{\"24\":4,\"25\":2,\"33\":1}}],[\"指针\",{\"1\":{\"22\":1,\"23\":1}}],[\"指向\",{\"1\":{\"15\":6,\"18\":1,\"22\":12,\"29\":4}}],[\"指\",{\"1\":{\"6\":2,\"15\":1}}],[\"指令\",{\"1\":{\"5\":2}}],[\"几种\",{\"1\":{\"37\":1}}],[\"几位\",{\"1\":{\"37\":2}}],[\"几点\",{\"1\":{\"22\":1,\"27\":1}}],[\"几个\",{\"1\":{\"6\":1}}],[\"几乎\",{\"1\":{\"5\":1,\"8\":2,\"22\":1}}],[\"终止\",{\"1\":{\"6\":1,\"23\":2}}],[\"提示\",{\"1\":{\"37\":1}}],[\"提\",{\"1\":{\"32\":1}}],[\"提高\",{\"1\":{\"15\":2,\"24\":1}}],[\"提升\",{\"1\":{\"9\":1,\"22\":2}}],[\"提到\",{\"1\":{\"7\":1,\"21\":1,\"37\":2}}],[\"提前\",{\"1\":{\"6\":1}}],[\"提供\",{\"1\":{\"4\":1,\"15\":4,\"17\":1,\"19\":1,\"21\":2,\"22\":2,\"25\":3,\"26\":1,\"29\":1}}],[\"某些\",{\"1\":{\"23\":1,\"26\":1}}],[\"某\",{\"1\":{\"8\":1}}],[\"某种\",{\"1\":{\"6\":1,\"38\":1}}],[\"某个\",{\"1\":{\"4\":1,\"13\":1,\"14\":1,\"17\":1,\"26\":1}}],[\"发明\",{\"1\":{\"38\":1}}],[\"发送\",{\"1\":{\"28\":1,\"31\":3,\"33\":2,\"34\":1}}],[\"发出\",{\"1\":{\"15\":1}}],[\"发现\",{\"1\":{\"8\":1,\"10\":1,\"21\":1}}],[\"发生\",{\"1\":{\"6\":1,\"9\":2,\"11\":2,\"13\":2,\"22\":1,\"23\":3,\"25\":1}}],[\"发挥\",{\"1\":{\"5\":1}}],[\"可读性\",{\"1\":{\"24\":2,\"38\":1}}],[\"可接\",{\"1\":{\"23\":1}}],[\"可维护性\",{\"1\":{\"15\":1}}],[\"可变性\",{\"1\":{\"22\":2}}],[\"可变\",{\"1\":{\"14\":4,\"22\":2}}],[\"可\",{\"1\":{\"8\":1,\"12\":1,\"22\":3,\"24\":1,\"33\":1}}],[\"可移植性\",{\"1\":{\"7\":1}}],[\"可能\",{\"1\":{\"6\":1,\"8\":1,\"12\":1,\"21\":7,\"37\":1}}],[\"可以\",{\"1\":{\"4\":3,\"5\":6,\"7\":1,\"8\":1,\"11\":1,\"12\":4,\"13\":5,\"14\":9,\"15\":20,\"17\":19,\"21\":3,\"22\":9,\"23\":6,\"24\":6,\"25\":5,\"26\":1,\"27\":2,\"29\":1,\"31\":5,\"32\":1,\"33\":3,\"34\":4,\"35\":1,\"36\":2}}],[\"结合\",{\"1\":{\"13\":1}}],[\"结果\",{\"1\":{\"11\":2,\"23\":1,\"27\":1,\"29\":2,\"31\":1,\"37\":1}}],[\"结束\",{\"1\":{\"6\":3,\"12\":1}}],[\"结构\",{\"1\":{\"6\":1,\"15\":1,\"27\":1}}],[\"正常\",{\"1\":{\"6\":1,\"23\":1}}],[\"正数\",{\"1\":{\"5\":1,\"7\":3}}],[\"达到\",{\"1\":{\"6\":1}}],[\"次数\",{\"1\":{\"6\":1,\"21\":1}}],[\"次方\",{\"1\":{\"5\":3}}],[\"满足\",{\"1\":{\"6\":1,\"17\":1}}],[\"初始化\",{\"1\":{\"14\":2,\"15\":1,\"17\":1,\"25\":3}}],[\"初始值\",{\"1\":{\"12\":1,\"17\":1}}],[\"初始\",{\"1\":{\"5\":4}}],[\"\\\"\",{\"1\":{\"5\":8,\"7\":2,\"14\":6,\"15\":8,\"17\":14,\"18\":4,\"22\":50,\"24\":14,\"25\":22,\"29\":18,\"31\":14,\"33\":8,\"34\":8,\"37\":14}}],[\"oldmode\",{\"1\":{\"37\":1}}],[\"o\",{\"0\":{\"28\":1},\"1\":{\"25\":2,\"28\":2,\"34\":3}}],[\"overload\",{\"1\":{\"15\":1}}],[\"override\",{\"1\":{\"15\":1,\"17\":1,\"18\":3,\"24\":2,\"26\":3,\"31\":3,\"33\":1,\"34\":1}}],[\"overridden\",{\"1\":{\"14\":1}}],[\"oop\",{\"1\":{\"15\":5}}],[\"obj\",{\"1\":{\"14\":1,\"19\":1,\"20\":2,\"34\":2}}],[\"obj2\",{\"1\":{\"14\":2}}],[\"obj1\",{\"1\":{\"14\":2}}],[\"object\",{\"0\":{\"19\":1},\"1\":{\"5\":1,\"15\":1,\"19\":4,\"20\":5,\"21\":3,\"22\":1,\"24\":4,\"27\":1,\"33\":12,\"34\":10}}],[\"oriented\",{\"1\":{\"15\":2}}],[\"or\",{\"1\":{\"9\":1}}],[\"outputstream\",{\"1\":{\"28\":1}}],[\"output\",{\"1\":{\"28\":1}}],[\"outofmemoryerror\",{\"1\":{\"23\":1}}],[\"out\",{\"1\":{\"5\":4,\"9\":4,\"14\":4,\"15\":4,\"17\":7,\"18\":2,\"22\":8,\"24\":3,\"25\":3,\"29\":7,\"31\":5,\"33\":3,\"34\":3,\"37\":8}}],[\"idea\",{\"1\":{\"37\":1}}],[\"illegalaccessexception\",{\"1\":{\"25\":1,\"33\":1}}],[\"illegalargumentexception\",{\"1\":{\"23\":2,\"33\":1}}],[\"io\",{\"1\":{\"22\":2,\"23\":2,\"28\":4}}],[\"if\",{\"1\":{\"22\":1,\"31\":1}}],[\"import\",{\"1\":{\"25\":3,\"33\":3,\"34\":4}}],[\"implements\",{\"1\":{\"18\":2,\"22\":4,\"24\":2,\"31\":4,\"33\":2,\"34\":1}}],[\"implementation\",{\"1\":{\"14\":1}}],[\"img\",{\"1\":{\"22\":2,\"29\":1,\"37\":1}}],[\"image\",{\"1\":{\"9\":1,\"12\":1,\"16\":1,\"22\":1,\"23\":2,\"24\":1,\"27\":1,\"29\":3,\"37\":2,\"38\":1}}],[\"ishape\",{\"1\":{\"17\":1}}],[\"is\",{\"1\":{\"14\":1,\"17\":4,\"25\":2}}],[\"init\",{\"1\":{\"31\":1}}],[\"inputstream\",{\"1\":{\"28\":1}}],[\"input\",{\"1\":{\"28\":1}}],[\"inputarray\",{\"1\":{\"24\":3}}],[\"invocationhandler\",{\"1\":{\"33\":10}}],[\"invocationtargetexception\",{\"1\":{\"25\":2,\"33\":2}}],[\"invokesuper\",{\"1\":{\"34\":1}}],[\"invokestatic\",{\"1\":{\"10\":1}}],[\"invoke\",{\"1\":{\"24\":1,\"25\":2,\"33\":10}}],[\"invokevirtual\",{\"1\":{\"10\":1}}],[\"ing\",{\"1\":{\"22\":7}}],[\"indexof\",{\"1\":{\"22\":1}}],[\"instantiationexception\",{\"1\":{\"25\":1}}],[\"instance\",{\"1\":{\"17\":1,\"25\":1}}],[\"instancecommonmethod\",{\"1\":{\"17\":1}}],[\"insert\",{\"1\":{\"22\":1}}],[\"in\",{\"1\":{\"17\":1}}],[\"incrementstaticvar\",{\"1\":{\"14\":3}}],[\"intarray\",{\"1\":{\"24\":2}}],[\"intercept\",{\"1\":{\"34\":5}}],[\"intern\",{\"1\":{\"22\":10}}],[\"internally\",{\"1\":{\"17\":2}}],[\"interruptedexception\",{\"1\":{\"19\":3,\"29\":1}}],[\"interfaces\",{\"1\":{\"33\":2}}],[\"interface\",{\"1\":{\"17\":6,\"24\":1,\"26\":2,\"31\":2,\"33\":2,\"34\":1}}],[\"integer\",{\"1\":{\"5\":2,\"7\":1,\"9\":15,\"10\":9,\"24\":6}}],[\"intvalue\",{\"1\":{\"10\":2}}],[\"int\",{\"1\":{\"4\":5,\"5\":7,\"7\":3,\"8\":4,\"10\":3,\"14\":2,\"17\":3,\"19\":2,\"21\":1,\"22\":2,\"27\":1,\"29\":7,\"37\":1}}],[\"i4\",{\"1\":{\"9\":2}}],[\"i3\",{\"1\":{\"9\":2}}],[\"i22\",{\"1\":{\"9\":2}}],[\"i2\",{\"1\":{\"9\":6}}],[\"i11\",{\"1\":{\"9\":2}}],[\"i1\",{\"1\":{\"9\":10}}],[\"i\",{\"0\":{\"28\":1},\"1\":{\"5\":6,\"10\":11,\"25\":2,\"28\":2}}],[\"变为\",{\"1\":{\"23\":1,\"29\":1}}],[\"变有\",{\"1\":{\"22\":1}}],[\"变\",{\"1\":{\"22\":4}}],[\"变的\",{\"1\":{\"22\":2}}],[\"变得\",{\"1\":{\"15\":1}}],[\"变化\",{\"1\":{\"7\":2}}],[\"变成\",{\"1\":{\"5\":1,\"7\":1,\"24\":1,\"31\":1,\"36\":1}}],[\"变量值\",{\"1\":{\"27\":2}}],[\"变量\",{\"0\":{\"12\":1},\"1\":{\"4\":7,\"8\":7,\"12\":25,\"13\":2,\"14\":14,\"15\":1,\"17\":4,\"20\":3,\"22\":7,\"23\":2,\"25\":1,\"26\":1,\"27\":5,\"39\":2}}],[\"求余\",{\"1\":{\"5\":1}}],[\"%\",{\"1\":{\"5\":3,\"22\":2,\"24\":1}}],[\"时有\",{\"1\":{\"25\":1}}],[\"时候\",{\"1\":{\"13\":2,\"15\":2,\"19\":1,\"21\":1,\"22\":1,\"26\":2,\"27\":1,\"33\":3,\"34\":1,\"37\":3}}],[\"时间\",{\"1\":{\"12\":2,\"15\":1,\"19\":3}}],[\"时\",{\"1\":{\"5\":2,\"6\":1,\"11\":2,\"12\":2,\"13\":3,\"14\":4,\"15\":1,\"17\":1,\"19\":1,\"20\":1,\"21\":5,\"22\":4,\"23\":5,\"25\":2,\"26\":1,\"27\":1,\"29\":1,\"31\":1,\"32\":1,\"33\":1,\"34\":1,\"36\":2,\"37\":1}}],[\"时钟\",{\"1\":{\"5\":2}}],[\"当做\",{\"1\":{\"22\":2}}],[\"当中\",{\"1\":{\"17\":5}}],[\"当\",{\"1\":{\"5\":2,\"6\":2,\"13\":1,\"17\":1,\"21\":4,\"22\":1,\"23\":3,\"27\":1,\"33\":3,\"34\":1}}],[\"当前\",{\"1\":{\"4\":2,\"6\":1,\"19\":2,\"22\":1,\"26\":1,\"33\":1}}],[\"所示\",{\"1\":{\"37\":1}}],[\"所说\",{\"1\":{\"24\":1}}],[\"所属\",{\"1\":{\"17\":1}}],[\"所谓\",{\"1\":{\"14\":1,\"21\":1}}],[\"所有\",{\"1\":{\"7\":1,\"8\":3,\"9\":2,\"12\":1,\"14\":1,\"15\":1,\"19\":3,\"20\":2,\"22\":1,\"23\":1,\"24\":1,\"25\":2,\"28\":2}}],[\"所以\",{\"1\":{\"7\":1,\"11\":1,\"12\":1,\"19\":1,\"20\":1,\"22\":3,\"24\":1,\"27\":1,\"29\":1}}],[\"所在\",{\"1\":{\"6\":1,\"23\":1}}],[\"所\",{\"1\":{\"5\":1,\"7\":3,\"12\":3,\"18\":1,\"21\":2,\"22\":1,\"29\":1}}],[\"为何\",{\"1\":{\"22\":1}}],[\"为止\",{\"1\":{\"11\":1}}],[\"为什么\",{\"0\":{\"16\":1},\"1\":{\"7\":1,\"8\":1,\"11\":1,\"12\":1,\"13\":1,\"15\":1,\"21\":4,\"22\":1,\"24\":1,\"28\":2,\"29\":1}}],[\"为\",{\"1\":{\"5\":1,\"7\":2,\"10\":1,\"11\":2,\"13\":1,\"15\":1,\"19\":1,\"22\":4,\"23\":1,\"24\":3,\"25\":1,\"27\":1,\"29\":1,\"35\":1,\"40\":6}}],[\"为了\",{\"1\":{\"4\":1,\"17\":2,\"22\":2,\"24\":1,\"25\":2,\"34\":1,\"37\":1}}],[\"会先\",{\"1\":{\"15\":1,\"21\":2,\"23\":1}}],[\"会\",{\"1\":{\"5\":3,\"6\":1,\"7\":1,\"8\":4,\"9\":5,\"10\":1,\"11\":1,\"12\":4,\"13\":1,\"15\":2,\"18\":3,\"19\":1,\"21\":14,\"22\":14,\"23\":4,\"24\":6,\"26\":2,\"29\":2,\"33\":3,\"37\":5}}],[\"scale\",{\"1\":{\"37\":6}}],[\"sf\",{\"1\":{\"34\":3}}],[\"smsproxy\",{\"1\":{\"31\":6}}],[\"smsserviceimpl\",{\"1\":{\"31\":3,\"33\":2}}],[\"smsservice\",{\"1\":{\"31\":13,\"33\":6}}],[\"swap\",{\"1\":{\"29\":3}}],[\"spring\",{\"1\":{\"26\":1,\"32\":1,\"34\":1}}],[\"source\",{\"1\":{\"26\":1}}],[\"s\",{\"1\":{\"24\":1,\"25\":2}}],[\"sqlexception\",{\"1\":{\"23\":1}}],[\"s4\",{\"1\":{\"22\":6}}],[\"s3\",{\"1\":{\"22\":5}}],[\"s2\",{\"1\":{\"22\":4}}],[\"s1\",{\"1\":{\"22\":9}}],[\"send\",{\"1\":{\"31\":12,\"33\":7,\"34\":6}}],[\"securityexception\",{\"1\":{\"23\":1}}],[\"serializable\",{\"1\":{\"22\":2}}],[\"setscale\",{\"1\":{\"37\":2}}],[\"setsuperclass\",{\"1\":{\"34\":1}}],[\"setcallback\",{\"1\":{\"34\":1}}],[\"setclassloader\",{\"1\":{\"34\":1}}],[\"setname\",{\"1\":{\"29\":2}}],[\"set\",{\"1\":{\"25\":1}}],[\"setaccessible\",{\"1\":{\"25\":2}}],[\"setaddress\",{\"1\":{\"18\":1}}],[\"setter\",{\"1\":{\"18\":2}}],[\"sleep\",{\"1\":{\"19\":1}}],[\"sugar\",{\"1\":{\"38\":1}}],[\"subtract\",{\"1\":{\"37\":2}}],[\"subclass\",{\"1\":{\"14\":1}}],[\"super\",{\"1\":{\"18\":3}}],[\"shallow\",{\"1\":{\"18\":1}}],[\"shape\",{\"1\":{\"17\":5}}],[\"short\",{\"1\":{\"5\":1,\"7\":4,\"9\":1,\"22\":1}}],[\"syntactic\",{\"1\":{\"38\":1}}],[\"synchronized\",{\"1\":{\"14\":2}}],[\"system\",{\"1\":{\"5\":4,\"9\":4,\"14\":4,\"15\":4,\"17\":7,\"18\":2,\"22\":8,\"24\":3,\"25\":3,\"29\":7,\"31\":5,\"33\":3,\"34\":3,\"37\":8}}],[\"start\",{\"1\":{\"31\":1}}],[\"stable\",{\"1\":{\"22\":2}}],[\"staticmethod\",{\"1\":{\"14\":2,\"17\":3}}],[\"staticvar\",{\"1\":{\"12\":1,\"14\":3}}],[\"staticvariableexample\",{\"1\":{\"12\":1}}],[\"static\",{\"1\":{\"5\":1,\"8\":5,\"12\":5,\"13\":2,\"14\":14,\"17\":17,\"22\":1,\"24\":2,\"25\":1,\"27\":1,\"29\":5,\"31\":2,\"33\":2,\"34\":1}}],[\"str5\",{\"1\":{\"22\":3}}],[\"str4\",{\"1\":{\"22\":4}}],[\"str\",{\"1\":{\"22\":11}}],[\"str3\",{\"1\":{\"15\":3,\"22\":7}}],[\"str2\",{\"1\":{\"15\":3,\"22\":9}}],[\"str1\",{\"1\":{\"15\":5,\"22\":8}}],[\"stringarray\",{\"1\":{\"24\":2}}],[\"stringbuilder\",{\"1\":{\"22\":12}}],[\"stringbuffer\",{\"1\":{\"22\":9}}],[\"string\",{\"0\":{\"22\":1},\"1\":{\"7\":1,\"14\":6,\"15\":4,\"17\":1,\"18\":1,\"19\":2,\"22\":60,\"23\":3,\"24\":4,\"25\":4,\"29\":6,\"31\":8,\"33\":4,\"34\":2,\"37\":1}}],[\"支持\",{\"1\":{\"5\":1,\"14\":1,\"17\":1,\"22\":2,\"23\":1}}],[\"floor\",{\"1\":{\"37\":2}}],[\"float\",{\"1\":{\"5\":1,\"7\":4,\"9\":3,\"22\":1}}],[\"field\",{\"1\":{\"25\":5}}],[\"finally\",{\"1\":{\"23\":14}}],[\"finalize\",{\"1\":{\"19\":1}}],[\"finalmethod\",{\"1\":{\"14\":2}}],[\"finalvar\",{\"1\":{\"14\":2}}],[\"final\",{\"1\":{\"5\":1,\"12\":2,\"13\":1,\"14\":14,\"17\":4,\"19\":7,\"22\":21,\"31\":1,\"33\":1,\"35\":1}}],[\"found\",{\"1\":{\"62\":1}}],[\"forname\",{\"1\":{\"25\":3}}],[\"for\",{\"1\":{\"24\":1,\"25\":1}}],[\"folding\",{\"1\":{\"22\":1}}],[\"functionalinterface\",{\"1\":{\"31\":1}}],[\"func4\",{\"1\":{\"17\":1}}],[\"func3\",{\"1\":{\"17\":1}}],[\"func2\",{\"1\":{\"17\":1}}],[\"func1\",{\"1\":{\"17\":1}}],[\"func\",{\"1\":{\"17\":2}}],[\"false\",{\"1\":{\"7\":2,\"9\":4,\"15\":1,\"18\":1,\"22\":4,\"37\":2,\"40\":1}}],[\"f\",{\"1\":{\"7\":3,\"9\":2}}],[\"考虑\",{\"1\":{\"5\":1,\"7\":1,\"12\":1,\"21\":1}}],[\"考察\",{\"1\":{\"4\":1}}],[\"但是\",{\"1\":{\"6\":1,\"7\":1,\"12\":1,\"13\":1,\"15\":4,\"17\":1,\"21\":1,\"25\":1,\"29\":1,\"38\":1}}],[\"但\",{\"1\":{\"5\":1,\"13\":1,\"14\":1,\"15\":3,\"17\":2,\"21\":6,\"22\":2,\"24\":1}}],[\"虽然\",{\"1\":{\"5\":1,\"22\":1}}],[\"负数\",{\"1\":{\"5\":1,\"7\":2}}],[\"带符号\",{\"1\":{\"5\":1}}],[\"下文\",{\"1\":{\"22\":1}}],[\"下来\",{\"1\":{\"21\":1}}],[\"下向\",{\"1\":{\"17\":1}}],[\"下\",{\"1\":{\"5\":1,\"6\":1,\"11\":2,\"22\":4,\"23\":2,\"25\":1}}],[\"下面\",{\"1\":{\"4\":3,\"6\":2,\"14\":1,\"15\":1,\"22\":2,\"23\":1,\"24\":1,\"25\":1,\"27\":1,\"33\":1}}],[\"溢出\",{\"1\":{\"5\":1,\"7\":1}}],[\"不仅仅\",{\"1\":{\"37\":1}}],[\"不得不\",{\"1\":{\"32\":1}}],[\"不大\",{\"1\":{\"25\":1}}],[\"不要\",{\"1\":{\"23\":1,\"37\":1}}],[\"不够\",{\"1\":{\"23\":2}}],[\"不受\",{\"1\":{\"23\":3}}],[\"不加\",{\"1\":{\"22\":1}}],[\"不到\",{\"1\":{\"21\":1}}],[\"不管\",{\"1\":{\"20\":1,\"28\":1,\"40\":1}}],[\"不想\",{\"1\":{\"15\":1,\"27\":1}}],[\"不知不觉\",{\"1\":{\"15\":1}}],[\"不带\",{\"1\":{\"15\":1}}],[\"不系\",{\"1\":{\"15\":1}}],[\"不定\",{\"1\":{\"14\":1}}],[\"不可\",{\"1\":{\"14\":3,\"22\":7}}],[\"不过\",{\"1\":{\"13\":1,\"18\":1,\"22\":3,\"25\":2,\"29\":2}}],[\"不同于\",{\"1\":{\"34\":1}}],[\"不同\",{\"1\":{\"13\":9,\"14\":1,\"15\":4,\"18\":2,\"20\":1,\"21\":8,\"22\":1,\"24\":1}}],[\"不行\",{\"1\":{\"12\":1}}],[\"不断\",{\"1\":{\"11\":1}}],[\"不必要\",{\"1\":{\"10\":1}}],[\"不是\",{\"1\":{\"8\":1,\"14\":1,\"19\":1,\"22\":3,\"29\":1}}],[\"不变性\",{\"1\":{\"7\":1}}],[\"不会\",{\"1\":{\"7\":1,\"11\":1,\"12\":1,\"15\":1,\"21\":1,\"22\":2,\"23\":3,\"25\":3,\"27\":2,\"29\":3}}],[\"不能\",{\"1\":{\"5\":1,\"8\":1,\"12\":1,\"13\":2,\"14\":6,\"15\":4,\"17\":6,\"19\":3,\"20\":1,\"22\":7,\"27\":1,\"35\":1}}],[\"不\",{\"1\":{\"5\":2,\"6\":1,\"8\":4,\"11\":1,\"12\":1,\"13\":6,\"14\":3,\"15\":2,\"17\":6,\"19\":1,\"21\":13,\"22\":2,\"23\":5,\"24\":2,\"25\":3,\"27\":1,\"28\":1,\"31\":1,\"32\":2,\"34\":1,\"36\":2,\"37\":1,\"40\":2}}],[\"不光\",{\"1\":{\"5\":1}}],[\"相除\",{\"1\":{\"37\":1}}],[\"相乘\",{\"1\":{\"37\":1}}],[\"相减\",{\"1\":{\"37\":1}}],[\"相加\",{\"1\":{\"37\":1}}],[\"相对\",{\"1\":{\"33\":1}}],[\"相较\",{\"1\":{\"22\":1}}],[\"相符\",{\"1\":{\"21\":1}}],[\"相互之间\",{\"1\":{\"15\":1}}],[\"相\",{\"1\":{\"15\":1}}],[\"相等\",{\"1\":{\"13\":1,\"15\":8,\"19\":2,\"20\":4,\"21\":28,\"22\":1}}],[\"相同\",{\"1\":{\"13\":3,\"15\":1,\"21\":11,\"22\":6,\"23\":1}}],[\"相关\",{\"1\":{\"13\":1,\"17\":1,\"23\":1,\"34\":1}}],[\"相应\",{\"1\":{\"9\":1,\"21\":1}}],[\"相比\",{\"1\":{\"8\":1,\"22\":1,\"32\":1}}],[\"相比之下\",{\"1\":{\"5\":1}}],[\"相当于\",{\"1\":{\"5\":4,\"19\":1,\"22\":1,\"29\":1}}],[\"net\",{\"1\":{\"34\":3,\"39\":1}}],[\"nextthreadnum\",{\"1\":{\"31\":1}}],[\"newproxyinstance\",{\"1\":{\"33\":4}}],[\"newinstance\",{\"1\":{\"25\":1}}],[\"new\",{\"1\":{\"9\":3,\"14\":3,\"15\":3,\"17\":1,\"18\":7,\"22\":1,\"24\":3,\"25\":1,\"29\":3,\"31\":4,\"33\":2,\"34\":2,\"37\":7}}],[\"num2\",{\"1\":{\"29\":8}}],[\"num1\",{\"1\":{\"29\":8}}],[\"numberformatexception\",{\"1\":{\"23\":1}}],[\"nullpointerexception\",{\"1\":{\"23\":1}}],[\"null\",{\"1\":{\"5\":1,\"8\":2,\"22\":1,\"24\":1,\"31\":3}}],[\"not\",{\"1\":{\"62\":1}}],[\"notifyall\",{\"1\":{\"19\":1}}],[\"notify\",{\"1\":{\"19\":2}}],[\"nosuchfieldexception\",{\"1\":{\"25\":1}}],[\"nosuchmethodexception\",{\"1\":{\"25\":1}}],[\"noclassdeffounderror\",{\"1\":{\"23\":1}}],[\"nanos\",{\"1\":{\"19\":3}}],[\"native\",{\"1\":{\"19\":12,\"22\":1}}],[\"name\",{\"1\":{\"18\":1,\"29\":10}}],[\"n\",{\"1\":{\"5\":4,\"10\":4,\"15\":2,\"37\":2}}],[\"xml\",{\"1\":{\"27\":1}}],[\"xxxclassloader\",{\"1\":{\"25\":1}}],[\"xxx\",{\"1\":{\"24\":2}}],[\"xxxvalue\",{\"1\":{\"10\":1}}],[\"x\",{\"1\":{\"5\":10}}],[\"补码\",{\"1\":{\"7\":1}}],[\"补\",{\"1\":{\"5\":3}}],[\"补零\",{\"1\":{\"5\":1}}],[\"补齐\",{\"1\":{\"5\":2}}],[\"低位\",{\"1\":{\"5\":2}}],[\"<\",{\"1\":{\"5\":10,\"19\":1,\"22\":4,\"24\":19,\"25\":1,\"33\":1,\"34\":9}}],[\"到底\",{\"1\":{\"15\":1}}],[\"到\",{\"1\":{\"5\":1,\"8\":1,\"11\":1,\"21\":2,\"22\":3,\"23\":2,\"25\":1,\"27\":5,\"28\":2,\"29\":4,\"32\":2,\"33\":4,\"34\":1,\"36\":1}}],[\"涉及\",{\"1\":{\"5\":1,\"11\":1}}],[\"理解\",{\"1\":{\"5\":1,\"7\":1,\"22\":2}}],[\"我们\",{\"1\":{\"5\":2,\"7\":3,\"8\":2,\"10\":2,\"11\":1,\"15\":9,\"20\":1,\"21\":5,\"23\":1,\"25\":9,\"27\":1,\"28\":1,\"31\":5,\"32\":3,\"33\":5,\"34\":4,\"37\":2}}],[\"帮助\",{\"1\":{\"5\":2,\"15\":1,\"21\":1}}],[\"有没有\",{\"1\":{\"27\":1}}],[\"有关\",{\"1\":{\"21\":1}}],[\"有参\",{\"1\":{\"15\":1}}],[\"有别于\",{\"1\":{\"13\":1}}],[\"有何\",{\"1\":{\"13\":1}}],[\"有限\",{\"1\":{\"11\":1}}],[\"有时候\",{\"1\":{\"6\":1}}],[\"有\",{\"1\":{\"5\":1,\"6\":2,\"7\":1,\"8\":1,\"11\":1,\"12\":3,\"14\":1,\"15\":5,\"17\":10,\"19\":1,\"20\":1,\"21\":7,\"22\":4,\"23\":6,\"24\":1,\"26\":1,\"28\":1,\"32\":1,\"33\":2,\"34\":1,\"37\":2,\"38\":1,\"40\":1}}],[\"很多\",{\"1\":{\"22\":1,\"29\":2,\"34\":1}}],[\"很大\",{\"1\":{\"11\":1}}],[\"很少\",{\"1\":{\"8\":1,\"17\":1}}],[\"很\",{\"1\":{\"5\":1,\"12\":1,\"24\":1,\"28\":1,\"32\":1,\"37\":1}}],[\"掌握\",{\"1\":{\"5\":1}}],[\"轻松\",{\"1\":{\"5\":1}}],[\"对泛\",{\"1\":{\"24\":1}}],[\"对时\",{\"1\":{\"21\":1}}],[\"对比\",{\"0\":{\"35\":1,\"36\":1},\"1\":{\"21\":1}}],[\"对外\",{\"1\":{\"17\":1}}],[\"对类\",{\"1\":{\"17\":1,\"25\":1}}],[\"对象\",{\"1\":{\"8\":10,\"9\":6,\"12\":5,\"13\":6,\"14\":1,\"15\":23,\"17\":1,\"18\":16,\"19\":7,\"20\":7,\"21\":42,\"22\":36,\"23\":2,\"24\":4,\"25\":9,\"27\":16,\"29\":10,\"31\":5,\"33\":12,\"34\":5,\"36\":2,\"37\":4}}],[\"对于\",{\"1\":{\"7\":1,\"8\":2,\"12\":1,\"20\":4,\"22\":3,\"25\":1,\"27\":1}}],[\"对\",{\"1\":{\"5\":1,\"8\":1,\"11\":1,\"13\":1,\"15\":1,\"18\":1,\"19\":1,\"21\":2,\"22\":8,\"25\":2,\"29\":3,\"31\":3,\"34\":1,\"37\":1,\"38\":1}}],[\"对齐\",{\"1\":{\"5\":2}}],[\"对应\",{\"1\":{\"5\":6,\"7\":1,\"9\":1,\"10\":2,\"12\":1,\"17\":1,\"21\":2,\"22\":1,\"26\":2,\"31\":2,\"33\":1}}],[\"冗余\",{\"1\":{\"5\":1}}],[\"循环小数\",{\"1\":{\"37\":1}}],[\"循环体\",{\"1\":{\"6\":1}}],[\"循环\",{\"1\":{\"5\":1,\"6\":9,\"11\":2,\"22\":1}}],[\"校验\",{\"1\":{\"5\":2}}],[\"格式\",{\"1\":{\"5\":1,\"23\":1}}],[\"压缩\",{\"1\":{\"5\":1}}],[\"紧凑\",{\"1\":{\"5\":1}}],[\"处理\",{\"1\":{\"5\":2,\"13\":2,\"22\":3,\"23\":8,\"26\":3,\"28\":1,\"33\":2}}],[\"处理器\",{\"1\":{\"5\":2}}],[\"编译\",{\"1\":{\"7\":1,\"8\":1,\"22\":6,\"23\":4,\"24\":5,\"25\":1,\"26\":4,\"31\":1,\"36\":1}}],[\"编译器\",{\"1\":{\"5\":1,\"12\":1,\"22\":13,\"24\":6,\"26\":2}}],[\"编程\",{\"1\":{\"7\":1,\"15\":3}}],[\"编程语言\",{\"1\":{\"5\":1}}],[\"编写\",{\"1\":{\"7\":1,\"13\":1}}],[\"编码方案\",{\"1\":{\"22\":3}}],[\"编码\",{\"1\":{\"5\":1,\"28\":1}}],[\"霍夫曼\",{\"1\":{\"5\":1}}],[\"混淆\",{\"1\":{\"5\":1,\"13\":1}}],[\"算是\",{\"1\":{\"28\":1}}],[\"算数\",{\"1\":{\"22\":1}}],[\"算法\",{\"1\":{\"5\":1,\"21\":2}}],[\"算术\",{\"1\":{\"5\":1,\"23\":1}}],[\"哈希\",{\"1\":{\"5\":1,\"19\":3,\"21\":12}}],[\"管理\",{\"1\":{\"5\":1}}],[\"着\",{\"1\":{\"5\":1,\"18\":1}}],[\"还有\",{\"1\":{\"27\":1}}],[\"还要\",{\"1\":{\"21\":1,\"24\":1}}],[\"还\",{\"1\":{\"5\":2,\"13\":1,\"15\":1,\"19\":1,\"22\":2,\"24\":1,\"25\":1,\"28\":1,\"33\":1,\"37\":1}}],[\"还是\",{\"1\":{\"5\":2,\"17\":1,\"20\":1,\"22\":1,\"24\":1,\"28\":1,\"29\":1}}],[\"它会\",{\"1\":{\"21\":2}}],[\"它们\",{\"1\":{\"8\":5,\"10\":1,\"12\":1,\"15\":1,\"20\":1,\"21\":7,\"32\":1}}],[\"它\",{\"1\":{\"5\":1,\"7\":1,\"12\":2,\"14\":1,\"15\":1,\"21\":3,\"22\":4,\"25\":1,\"29\":3,\"34\":2,\"37\":1}}],[\"幂\",{\"1\":{\"5\":1}}],[\"2.5\",{\"1\":{\"37\":10}}],[\"2.\",{\"1\":{\"24\":2,\"25\":2,\"31\":1,\"33\":1,\"34\":1}}],[\"2.2\",{\"1\":{\"7\":1}}],[\"20241209161628635\",{\"1\":{\"29\":1}}],[\"20241101134654836\",{\"1\":{\"16\":1}}],[\"20241014220006225\",{\"1\":{\"38\":1}}],[\"20241014195556937\",{\"1\":{\"37\":1}}],[\"20241014194036399\",{\"1\":{\"37\":1}}],[\"20241014172036622\",{\"1\":{\"29\":1}}],[\"20241014170916135\",{\"1\":{\"29\":1}}],[\"20241014174541738\",{\"1\":{\"24\":1}}],[\"20241014161106179\",{\"1\":{\"27\":1}}],[\"20241014133049953\",{\"1\":{\"23\":1}}],[\"20241014131545112\",{\"1\":{\"23\":1}}],[\"20241014130535051\",{\"1\":{\"22\":1}}],[\"20241013235255230\",{\"1\":{\"12\":1}}],[\"20241010205833833\",{\"1\":{\"9\":1}}],[\"20\",{\"1\":{\"8\":1,\"14\":1,\"17\":1,\"29\":3}}],[\"2147483647\",{\"1\":{\"7\":1}}],[\"2147483648\",{\"1\":{\"7\":1}}],[\"2\",{\"0\":{\"41\":1,\"42\":1,\"45\":1,\"47\":1,\"48\":1,\"51\":1,\"54\":1,\"57\":1,\"60\":1},\"1\":{\"5\":3,\"7\":8,\"11\":6,\"13\":1,\"14\":2,\"19\":2,\"22\":1,\"23\":1,\"24\":1,\"29\":2,\"37\":11}}],[\"除尽\",{\"1\":{\"37\":2}}],[\"除了\",{\"1\":{\"7\":1,\"8\":1,\"23\":1}}],[\"除此之外\",{\"1\":{\"5\":1}}],[\"除以\",{\"1\":{\"5\":2}}],[\"除法\",{\"1\":{\"5\":2}}],[\"乘以\",{\"1\":{\"5\":2,\"11\":1}}],[\"乘法\",{\"1\":{\"5\":1}}],[\"快速\",{\"1\":{\"5\":2,\"15\":1,\"21\":2}}],[\"常量\",{\"1\":{\"8\":1,\"14\":1,\"15\":1,\"22\":38}}],[\"常用\",{\"1\":{\"5\":1,\"23\":1,\"24\":1}}],[\"常见\",{\"1\":{\"4\":1,\"8\":1,\"15\":1,\"23\":2,\"24\":1,\"26\":1,\"27\":1}}],[\"如何\",{\"1\":{\"23\":1,\"24\":1}}],[\"如下\",{\"1\":{\"7\":1,\"13\":1,\"15\":1,\"22\":1,\"28\":1,\"37\":1}}],[\"如果说\",{\"1\":{\"25\":1}}],[\"如果\",{\"1\":{\"5\":1,\"7\":2,\"8\":3,\"9\":1,\"10\":1,\"12\":5,\"13\":1,\"14\":1,\"15\":8,\"17\":2,\"18\":1,\"19\":1,\"21\":16,\"22\":6,\"23\":3,\"24\":1,\"25\":1,\"27\":2,\"28\":1,\"29\":1,\"34\":2}}],[\"如\",{\"1\":{\"5\":1,\"22\":1,\"24\":2,\"27\":1}}],[\"通用\",{\"1\":{\"17\":1}}],[\"通过\",{\"1\":{\"5\":5,\"7\":1,\"8\":1,\"11\":1,\"12\":1,\"13\":2,\"14\":2,\"15\":4,\"17\":1,\"20\":2,\"21\":4,\"22\":4,\"23\":4,\"24\":3,\"25\":7,\"26\":2,\"27\":1,\"29\":1,\"31\":1,\"33\":1,\"34\":2,\"35\":1,\"37\":1}}],[\"通常\",{\"1\":{\"5\":1,\"11\":1,\"14\":1,\"15\":1,\"17\":1,\"24\":1,\"27\":1}}],[\"多线程\",{\"1\":{\"22\":2}}],[\"多次\",{\"1\":{\"21\":1}}],[\"多种\",{\"1\":{\"15\":1,\"32\":1,\"37\":1}}],[\"多态\",{\"1\":{\"15\":5}}],[\"多少\",{\"1\":{\"12\":1}}],[\"多项式\",{\"1\":{\"5\":1}}],[\"多个\",{\"1\":{\"5\":2,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"17\":3,\"19\":1,\"21\":2,\"23\":1,\"28\":1,\"33\":1}}],[\"多\",{\"1\":{\"5\":1,\"17\":1,\"19\":1,\"37\":1}}],[\"更高\",{\"1\":{\"21\":1}}],[\"更加\",{\"1\":{\"15\":1,\"17\":1,\"25\":1,\"32\":1,\"35\":1,\"36\":1,\"38\":1}}],[\"更具\",{\"1\":{\"7\":1,\"15\":1}}],[\"更\",{\"1\":{\"5\":1,\"13\":1,\"15\":1,\"35\":1,\"38\":2}}],[\"上述\",{\"1\":{\"31\":1,\"33\":1,\"34\":1}}],[\"上面\",{\"1\":{\"10\":1,\"22\":1}}],[\"上\",{\"1\":{\"5\":2,\"7\":1,\"12\":2,\"18\":1,\"19\":2,\"21\":6,\"22\":1,\"24\":1}}],[\"等值\",{\"1\":{\"37\":2}}],[\"等等\",{\"1\":{\"32\":1}}],[\"等待时间\",{\"1\":{\"19\":1}}],[\"等待\",{\"1\":{\"19\":4}}],[\"等价\",{\"1\":{\"9\":2,\"10\":2,\"20\":1,\"22\":1}}],[\"等同于\",{\"1\":{\"5\":3}}],[\"等于\",{\"1\":{\"5\":1,\"13\":2,\"37\":1}}],[\"等\",{\"0\":{\"39\":1},\"1\":{\"5\":2,\"12\":2,\"15\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":2,\"27\":1}}],[\"内容\",{\"1\":{\"15\":1,\"21\":2,\"22\":6,\"25\":1,\"29\":1,\"37\":1,\"42\":1,\"43\":1,\"45\":1,\"46\":1,\"48\":1,\"49\":1,\"51\":1,\"52\":2,\"54\":1,\"55\":1,\"57\":1,\"58\":2,\"60\":1,\"61\":2}}],[\"内部\",{\"1\":{\"14\":3,\"15\":3,\"17\":1,\"18\":5,\"29\":1}}],[\"内存空间\",{\"1\":{\"22\":1}}],[\"内存地址\",{\"1\":{\"8\":1,\"12\":1,\"15\":1,\"19\":1,\"20\":1,\"21\":2,\"22\":1}}],[\"内存\",{\"1\":{\"5\":3,\"12\":6,\"13\":1,\"15\":3,\"22\":1,\"23\":1,\"27\":3,\"28\":1}}],[\"内\",{\"1\":{\"5\":1,\"22\":3}}],[\"周期\",{\"1\":{\"5\":2}}],[\"硬件\",{\"1\":{\"5\":2,\"7\":1}}],[\"专门\",{\"1\":{\"5\":1,\"22\":2}}],[\"于类\",{\"1\":{\"17\":1}}],[\"于栈\",{\"1\":{\"12\":1}}],[\"于元\",{\"1\":{\"8\":1}}],[\"于\",{\"1\":{\"5\":2,\"8\":4,\"9\":2,\"10\":2,\"12\":1,\"15\":1,\"18\":1,\"20\":2,\"24\":1,\"28\":1,\"32\":1}}],[\"高\",{\"1\":{\"38\":1}}],[\"高位\",{\"1\":{\"5\":4}}],[\"高效\",{\"1\":{\"5\":1,\"7\":1}}],[\"高频\",{\"1\":{\"4\":1}}],[\"}\",{\"1\":{\"5\":1,\"8\":2,\"14\":22,\"17\":19,\"18\":11,\"19\":1,\"20\":1,\"22\":6,\"24\":12,\"25\":7,\"26\":2,\"29\":12,\"31\":16,\"33\":10,\"34\":7,\"37\":2}}],[\"?\",{\"1\":{\"5\":1,\"19\":1,\"22\":3,\"24\":1,\"25\":1,\"28\":1,\"33\":1,\"34\":1}}],[\"0.1\",{\"1\":{\"37\":1}}],[\"0.90\",{\"1\":{\"37\":1}}],[\"0.9\",{\"1\":{\"37\":2}}],[\"0.6\",{\"1\":{\"11\":1}}],[\"0.8\",{\"1\":{\"11\":2}}],[\"0.4\",{\"1\":{\"11\":3}}],[\"0.2\",{\"1\":{\"11\":4}}],[\"01.\",{\"1\":{\"9\":1}}],[\"0\",{\"1\":{\"5\":5,\"7\":8,\"9\":1,\"10\":3,\"11\":3,\"14\":2,\"15\":1,\"19\":1,\"22\":1,\"27\":1,\"29\":6,\"31\":1,\"37\":2}}],[\"以后\",{\"1\":{\"24\":1}}],[\"以外\",{\"1\":{\"23\":1}}],[\"以上\",{\"1\":{\"17\":1}}],[\"以下\",{\"1\":{\"5\":1,\"15\":1,\"19\":1,\"21\":1,\"22\":1,\"23\":1}}],[\"以\",{\"1\":{\"5\":3,\"12\":1,\"14\":1,\"15\":1,\"19\":2,\"22\":1}}],[\"以及\",{\"0\":{\"40\":1},\"1\":{\"5\":1,\"7\":1,\"22\":1,\"24\":1,\"25\":2,\"37\":1}}],[\"忽略\",{\"1\":{\"5\":2,\"23\":1,\"37\":1}}],[\"无视\",{\"1\":{\"25\":1}}],[\"无参\",{\"1\":{\"15\":1}}],[\"无需\",{\"1\":{\"13\":1,\"15\":1}}],[\"无论\",{\"1\":{\"12\":1,\"15\":2,\"23\":1,\"27\":1,\"29\":1}}],[\"无限\",{\"1\":{\"11\":1,\"37\":1}}],[\"无法访问\",{\"1\":{\"15\":1}}],[\"无法\",{\"1\":{\"7\":1,\"12\":2,\"13\":1,\"14\":3,\"15\":1,\"17\":1,\"21\":2,\"22\":3,\"23\":1,\"37\":2}}],[\"无\",{\"1\":{\"5\":2,\"15\":2}}],[\":\",{\"1\":{\"5\":5,\"7\":2,\"9\":1,\"10\":3,\"12\":1,\"15\":1,\"22\":3,\"23\":6,\"24\":3,\"25\":3,\"28\":2,\"31\":3,\"33\":9,\"34\":6,\"37\":2,\"39\":1}}],[\">\",{\"1\":{\"5\":23,\"11\":5,\"19\":1,\"22\":7,\"24\":19,\"25\":1,\"33\":1,\"34\":9,\"37\":20}}],[\"位于\",{\"1\":{\"8\":1}}],[\"位置\",{\"1\":{\"8\":1,\"21\":8}}],[\"位是\",{\"1\":{\"7\":1}}],[\"位后\",{\"1\":{\"5\":4}}],[\"位操作\",{\"1\":{\"5\":1}}],[\"位数\",{\"1\":{\"5\":3,\"7\":1}}],[\"位字段\",{\"1\":{\"5\":1}}],[\"位\",{\"1\":{\"5\":10,\"7\":4,\"22\":2}}],[\"按\",{\"1\":{\"5\":1}}],[\"^\",{\"1\":{\"5\":2,\"7\":5}}],[\"返回值\",{\"1\":{\"6\":2,\"13\":3,\"15\":1,\"23\":2}}],[\"返回\",{\"1\":{\"5\":1,\"9\":1,\"15\":1,\"19\":4,\"20\":1,\"21\":1,\"22\":4,\"23\":6,\"24\":1,\"37\":1}}],[\"half\",{\"1\":{\"37\":4}}],[\"hashset\",{\"1\":{\"21\":8}}],[\"hashcode\",{\"0\":{\"21\":1},\"1\":{\"5\":3,\"19\":1,\"21\":47}}],[\"hash\",{\"1\":{\"5\":2}}],[\"hashmap\",{\"1\":{\"5\":1,\"19\":1,\"21\":15}}],[\"he\",{\"1\":{\"22\":1}}],[\"hello\",{\"1\":{\"7\":1,\"15\":4,\"24\":2}}],[\"htmlinteger\",{\"1\":{\"9\":1}}],[\"https\",{\"1\":{\"9\":1,\"39\":1}}],[\"hotspot\",{\"1\":{\"8\":1}}],[\"h\",{\"1\":{\"5\":3,\"7\":1,\"33\":2}}],[\"{\",{\"1\":{\"5\":1,\"8\":2,\"14\":22,\"17\":19,\"18\":11,\"19\":1,\"20\":1,\"22\":6,\"24\":12,\"25\":7,\"26\":2,\"29\":12,\"31\":16,\"33\":10,\"34\":7,\"37\":2}}],[\"方式\",{\"1\":{\"5\":1,\"8\":3,\"12\":3,\"13\":7,\"15\":4,\"22\":2,\"24\":1,\"25\":2,\"28\":1,\"29\":2,\"32\":1,\"34\":1}}],[\"方面\",{\"1\":{\"5\":1}}],[\"方法\",{\"0\":{\"13\":1},\"1\":{\"5\":1,\"6\":5,\"8\":6,\"9\":1,\"10\":2,\"12\":5,\"13\":21,\"14\":15,\"15\":20,\"17\":47,\"18\":3,\"19\":13,\"20\":8,\"21\":21,\"22\":19,\"23\":6,\"24\":6,\"25\":9,\"26\":5,\"27\":2,\"29\":8,\"31\":8,\"33\":22,\"34\":17,\"35\":2,\"36\":1,\"37\":9}}],[\"方便\",{\"1\":{\"4\":1,\"15\":1,\"17\":1,\"38\":1}}],[\"8\",{\"1\":{\"5\":1,\"7\":5,\"10\":1,\"14\":1,\"17\":6,\"22\":2}}],[\".\",{\"1\":{\"5\":13,\"9\":12,\"10\":7,\"11\":3,\"12\":1,\"13\":4,\"14\":33,\"15\":10,\"17\":20,\"18\":16,\"22\":32,\"23\":4,\"24\":13,\"25\":44,\"26\":2,\"29\":20,\"31\":30,\"33\":32,\"34\":35,\"37\":41,\"38\":2,\"39\":2}}],[\"广泛\",{\"1\":{\"5\":1}}],[\"挺\",{\"1\":{\"5\":1,\"37\":1}}],[\"j\",{\"1\":{\"38\":1}}],[\"json\",{\"1\":{\"27\":1}}],[\"jit\",{\"1\":{\"8\":1}}],[\"jvm\",{\"1\":{\"7\":1,\"13\":1,\"22\":2,\"23\":1,\"31\":1,\"32\":2,\"36\":2}}],[\"jdkproxyfactory\",{\"1\":{\"33\":2}}],[\"jdk1\",{\"1\":{\"5\":1,\"17\":1,\"22\":1}}],[\"jdk\",{\"0\":{\"33\":1},\"1\":{\"5\":1,\"8\":1,\"19\":1,\"21\":2,\"22\":1,\"24\":1,\"32\":1,\"33\":1,\"34\":3,\"35\":3}}],[\"java5\",{\"1\":{\"14\":1,\"26\":1}}],[\"javac\",{\"1\":{\"12\":1,\"22\":2}}],[\"javaguide\",{\"1\":{\"9\":3,\"25\":10}}],[\"java\",{\"0\":{\"2\":1,\"3\":1,\"41\":1,\"44\":1,\"47\":1,\"64\":1},\"1\":{\"2\":1,\"4\":1,\"5\":1,\"7\":6,\"8\":2,\"9\":3,\"10\":2,\"14\":1,\"15\":1,\"17\":9,\"20\":1,\"21\":2,\"22\":13,\"23\":7,\"24\":4,\"25\":4,\"26\":1,\"27\":3,\"28\":3,\"29\":3,\"31\":2,\"32\":1,\"33\":6,\"34\":4,\"37\":2}}],[\"框架\",{\"1\":{\"5\":1,\"25\":5,\"26\":2,\"32\":1,\"34\":1}}],[\"各种\",{\"1\":{\"5\":1,\"25\":1}}],[\"移动\",{\"1\":{\"5\":1}}],[\"移位指令\",{\"1\":{\"5\":1}}],[\"移位\",{\"0\":{\"5\":1},\"1\":{\"5\":23}}],[\"右移\",{\"1\":{\"5\":12}}],[\"右\",{\"1\":{\"5\":1}}],[\"左右\",{\"1\":{\"22\":1}}],[\"左移\",{\"1\":{\"5\":13}}],[\"左\",{\"1\":{\"5\":1}}],[\"向\",{\"1\":{\"5\":4,\"17\":1,\"21\":1}}],[\"其后\",{\"1\":{\"23\":1}}],[\"其值\",{\"1\":{\"22\":1}}],[\"其中\",{\"1\":{\"21\":1,\"37\":1}}],[\"其本质\",{\"1\":{\"20\":1}}],[\"其实\",{\"1\":{\"10\":2,\"21\":1,\"22\":2,\"24\":1,\"31\":1}}],[\"其他\",{\"1\":{\"7\":2,\"8\":1,\"14\":4,\"17\":1,\"21\":2,\"22\":3,\"23\":1,\"24\":1}}],[\"其余\",{\"1\":{\"7\":1}}],[\"其\",{\"1\":{\"5\":2,\"14\":1,\"21\":1,\"22\":7,\"24\":1,\"34\":1}}],[\"数组\",{\"1\":{\"22\":11,\"23\":1,\"24\":1,\"29\":2}}],[\"数学\",{\"1\":{\"15\":1}}],[\"数量\",{\"1\":{\"15\":1}}],[\"数字\",{\"1\":{\"7\":1,\"11\":1,\"23\":1}}],[\"数值\",{\"1\":{\"5\":1,\"7\":3,\"9\":2}}],[\"数\",{\"1\":{\"5\":1,\"11\":1}}],[\"数据传输\",{\"1\":{\"28\":1}}],[\"数据库\",{\"1\":{\"27\":3,\"28\":1}}],[\"数据结构\",{\"0\":{\"56\":1},\"1\":{\"21\":1,\"27\":1}}],[\"数据类型\",{\"0\":{\"7\":1,\"59\":1},\"1\":{\"7\":2,\"8\":7,\"9\":1,\"10\":1,\"17\":1,\"20\":5,\"22\":5}}],[\"数据完整性\",{\"1\":{\"5\":1}}],[\"数据压缩\",{\"1\":{\"5\":1}}],[\"数据\",{\"1\":{\"5\":13,\"7\":2,\"13\":2,\"15\":1,\"21\":1,\"22\":3,\"27\":1,\"28\":2}}],[\"视为\",{\"1\":{\"5\":1}}],[\"被子\",{\"1\":{\"14\":1}}],[\"被\",{\"1\":{\"5\":2,\"8\":2,\"11\":1,\"12\":9,\"13\":3,\"14\":6,\"15\":4,\"17\":10,\"19\":1,\"21\":2,\"22\":12,\"23\":9,\"24\":2,\"25\":1,\"26\":1,\"27\":6,\"29\":2,\"33\":3,\"34\":8,\"35\":2}}],[\"这部分\",{\"1\":{\"37\":1}}],[\"这里\",{\"1\":{\"29\":1,\"37\":2,\"42\":1,\"43\":1,\"45\":1,\"46\":1,\"48\":1,\"49\":1,\"51\":1,\"52\":2,\"54\":1,\"55\":1,\"57\":1,\"58\":2,\"60\":1,\"61\":2}}],[\"这段\",{\"1\":{\"23\":1}}],[\"这时\",{\"1\":{\"21\":1}}],[\"这样的话\",{\"1\":{\"31\":1}}],[\"这样\",{\"1\":{\"12\":2,\"17\":1,\"21\":1,\"29\":2}}],[\"这个\",{\"1\":{\"11\":2,\"12\":2,\"13\":3,\"14\":1,\"15\":1,\"17\":2,\"18\":1,\"19\":3,\"21\":2,\"22\":4,\"23\":2,\"25\":2,\"28\":1,\"29\":3,\"31\":1,\"33\":4,\"34\":1,\"35\":1}}],[\"这行\",{\"1\":{\"9\":2,\"24\":1}}],[\"这是\",{\"1\":{\"7\":1,\"22\":1,\"36\":1}}],[\"这\",{\"1\":{\"5\":1,\"6\":2,\"7\":3,\"8\":1,\"9\":3,\"10\":1,\"11\":1,\"15\":2,\"20\":2,\"21\":10,\"22\":1,\"23\":1,\"24\":2,\"29\":1,\"37\":1}}],[\"这些\",{\"1\":{\"5\":2,\"15\":2,\"17\":1,\"23\":1,\"25\":2,\"27\":1,\"31\":1,\"36\":1}}],[\"这一\",{\"1\":{\"5\":1}}],[\"这种\",{\"1\":{\"4\":1,\"7\":1,\"13\":2,\"38\":1}}],[\"都统\",{\"1\":{\"23\":1}}],[\"都\",{\"1\":{\"5\":4,\"7\":3,\"8\":2,\"9\":1,\"11\":1,\"12\":2,\"15\":3,\"17\":2,\"19\":1,\"20\":3,\"21\":2,\"22\":6,\"23\":4,\"24\":2,\"25\":1,\"26\":1,\"27\":1,\"28\":2,\"29\":2,\"31\":4,\"32\":2,\"34\":1,\"35\":1,\"36\":3,\"40\":2}}],[\"基类\",{\"1\":{\"28\":3}}],[\"基于\",{\"1\":{\"9\":1,\"21\":4,\"34\":1}}],[\"基数\",{\"1\":{\"5\":1}}],[\"基本操作\",{\"1\":{\"22\":1}}],[\"基本\",{\"0\":{\"7\":1,\"8\":1},\"1\":{\"5\":2,\"7\":5,\"8\":9,\"9\":1,\"10\":2,\"20\":4,\"22\":5,\"25\":1,\"29\":1}}],[\"基础\",{\"0\":{\"3\":1,\"41\":1},\"1\":{\"2\":1,\"15\":1}}],[\"最小\",{\"1\":{\"28\":1}}],[\"最终\",{\"1\":{\"22\":1,\"33\":1}}],[\"最多\",{\"1\":{\"22\":1}}],[\"最后\",{\"1\":{\"14\":1}}],[\"最高\",{\"1\":{\"7\":2,\"33\":1}}],[\"最大\",{\"1\":{\"7\":2}}],[\"最\",{\"1\":{\"5\":3,\"22\":1,\"34\":1}}],[\";\",{\"1\":{\"4\":5,\"5\":8,\"6\":2,\"8\":4,\"9\":12,\"10\":6,\"14\":14,\"15\":7,\"17\":16,\"18\":17,\"20\":1,\"22\":42,\"24\":21,\"25\":26,\"29\":26,\"31\":20,\"33\":16,\"34\":18,\"37\":17}}],[\"999999\",{\"1\":{\"19\":1}}],[\"9223372036854775807\",{\"1\":{\"7\":1}}],[\"9223372036854775808\",{\"1\":{\"7\":1}}],[\"9\",{\"1\":{\"4\":3,\"10\":1,\"17\":2,\"22\":2}}],[\"？\",{\"0\":{\"16\":1},\"1\":{\"4\":1,\"5\":1,\"7\":1,\"8\":1,\"10\":1,\"12\":2,\"13\":2,\"21\":5,\"22\":3,\"23\":5,\"24\":1,\"28\":1}}],[\"enum\",{\"1\":{\"37\":1}}],[\"enhancer\",{\"1\":{\"34\":10}}],[\"ensurecapacityinternal\",{\"1\":{\"22\":1}}],[\"elementtype\",{\"1\":{\"26\":1}}],[\"element\",{\"1\":{\"24\":2}}],[\"error\",{\"1\":{\"23\":3}}],[\"exception\",{\"1\":{\"23\":10}}],[\"expandcapacity\",{\"1\":{\"22\":1}}],[\"extends\",{\"1\":{\"14\":2,\"17\":1,\"24\":4,\"26\":1,\"34\":1}}],[\"executed\",{\"1\":{\"14\":1}}],[\"equals\",{\"0\":{\"20\":1},\"1\":{\"8\":1,\"9\":1,\"15\":3,\"19\":1,\"20\":11,\"21\":23,\"22\":2,\"37\":4}}],[\"e308\",{\"1\":{\"7\":1}}],[\"e38\",{\"1\":{\"7\":1}}],[\"e\",{\"1\":{\"4\":4,\"7\":2,\"18\":3,\"24\":9}}],[\"database\",{\"0\":{\"67\":1}}],[\"down\",{\"1\":{\"37\":3}}],[\"double\",{\"1\":{\"5\":1,\"7\":3,\"9\":3,\"22\":1,\"24\":1,\"37\":1}}],[\"divisor\",{\"1\":{\"37\":2}}],[\"divide\",{\"1\":{\"37\":6}}],[\"details\",{\"1\":{\"39\":1}}],[\"debugmethodinterceptor\",{\"1\":{\"34\":2}}],[\"debuginvocationhandler\",{\"1\":{\"33\":3}}],[\"dependency\",{\"1\":{\"34\":2}}],[\"deep\",{\"1\":{\"18\":1}}],[\"defaultmethod\",{\"1\":{\"17\":2}}],[\"default\",{\"1\":{\"14\":1,\"17\":11}}],[\"draw\",{\"1\":{\"17\":2}}],[\"d\",{\"1\":{\"4\":6,\"7\":1,\"8\":1,\"22\":4}}],[\"csdn\",{\"1\":{\"39\":1}}],[\"ceiling\",{\"1\":{\"37\":2}}],[\"create\",{\"1\":{\"34\":1}}],[\"crc\",{\"1\":{\"5\":1}}],[\"cglibproxyfactory\",{\"1\":{\"34\":2}}],[\"cglib\",{\"0\":{\"34\":1},\"1\":{\"32\":2,\"34\":12,\"35\":2}}],[\"cpu\",{\"1\":{\"23\":1}}],[\"c++\",{\"1\":{\"21\":1,\"29\":1}}],[\"callback\",{\"1\":{\"34\":1}}],[\"catch\",{\"1\":{\"18\":3,\"23\":8}}],[\"cannot\",{\"1\":{\"14\":1}}],[\"clazz\",{\"1\":{\"24\":2,\"34\":3}}],[\"classloader\",{\"1\":{\"25\":1,\"33\":1}}],[\"classcastexception\",{\"1\":{\"23\":1}}],[\"classnotfoundexception\",{\"1\":{\"23\":1,\"25\":1}}],[\"class\",{\"1\":{\"8\":1,\"14\":12,\"17\":3,\"18\":2,\"19\":2,\"22\":4,\"24\":5,\"25\":18,\"29\":1,\"31\":6,\"33\":4,\"34\":5,\"36\":1}}],[\"clonenotsupportedexception\",{\"1\":{\"18\":3,\"19\":1}}],[\"clone\",{\"1\":{\"18\":10,\"19\":1}}],[\"cloneable\",{\"1\":{\"18\":2}}],[\"collection\",{\"0\":{\"65\":1}}],[\"code\",{\"1\":{\"34\":2}}],[\"constant\",{\"1\":{\"22\":1}}],[\"continue\",{\"0\":{\"6\":1},\"1\":{\"6\":1}}],[\"compareto\",{\"1\":{\"37\":3}}],[\"comparable\",{\"1\":{\"22\":2,\"24\":1}}],[\"component\",{\"1\":{\"26\":1}}],[\"commonmethod\",{\"1\":{\"17\":3}}],[\"count\",{\"1\":{\"22\":3}}],[\"copy\",{\"1\":{\"18\":1}}],[\"checked\",{\"1\":{\"23\":3}}],[\"child\",{\"1\":{\"14\":1}}],[\"changename\",{\"1\":{\"29\":5}}],[\"change\",{\"1\":{\"29\":3}}],[\"changefinalvar\",{\"1\":{\"14\":1}}],[\"charsequence\",{\"1\":{\"22\":4}}],[\"character\",{\"1\":{\"7\":1,\"9\":1,\"24\":1}}],[\"char\",{\"1\":{\"5\":1,\"7\":4,\"22\":7}}],[\"cn\",{\"1\":{\"9\":2,\"25\":5}}],[\"c\",{\"1\":{\"4\":6,\"8\":1,\"21\":1,\"22\":4}}],[\"、\",{\"0\":{\"6\":1,\"39\":1},\"1\":{\"4\":3,\"5\":3,\"7\":15,\"8\":1,\"13\":5,\"14\":3,\"15\":3,\"17\":2,\"18\":2,\"21\":1,\"22\":17,\"23\":4,\"24\":5,\"25\":2,\"26\":2,\"27\":2,\"29\":7,\"31\":2,\"32\":2,\"36\":2,\"39\":2}}],[\"执行\",{\"0\":{\"39\":1,\"50\":1},\"1\":{\"4\":1,\"5\":1,\"6\":1,\"13\":1,\"14\":2,\"15\":7,\"19\":1,\"21\":1,\"23\":7,\"25\":2,\"29\":1,\"31\":1,\"33\":1,\"39\":1}}],[\"题\",{\"1\":{\"4\":1,\"29\":1}}],[\"笔试\",{\"1\":{\"4\":1,\"29\":1}}],[\"一共\",{\"1\":{\"33\":1}}],[\"一系列\",{\"1\":{\"25\":1}}],[\"一块\",{\"1\":{\"22\":1}}],[\"一半\",{\"1\":{\"22\":1}}],[\"一旦\",{\"1\":{\"22\":1,\"31\":1,\"36\":1}}],[\"一致\",{\"1\":{\"21\":3}}],[\"一起\",{\"1\":{\"18\":1}}],[\"一点\",{\"1\":{\"18\":1}}],[\"一直\",{\"1\":{\"15\":1,\"19\":1}}],[\"一根\",{\"1\":{\"15\":1}}],[\"一样\",{\"1\":{\"13\":1,\"17\":1,\"19\":2,\"22\":1}}],[\"一份\",{\"1\":{\"12\":1,\"19\":1}}],[\"一部分\",{\"1\":{\"12\":1}}],[\"一行\",{\"1\":{\"9\":2}}],[\"一些\",{\"1\":{\"8\":1,\"15\":1,\"17\":1,\"21\":1,\"22\":1,\"31\":1,\"33\":1}}],[\"一定\",{\"1\":{\"7\":2,\"12\":1,\"15\":1,\"21\":3,\"23\":2,\"25\":1}}],[\"一般\",{\"1\":{\"6\":1,\"13\":2,\"15\":3,\"17\":1,\"20\":1,\"23\":1,\"24\":3,\"25\":1}}],[\"一次\",{\"1\":{\"6\":2,\"12\":1,\"22\":1}}],[\"一个个\",{\"1\":{\"15\":2,\"31\":1,\"36\":1}}],[\"一个\",{\"1\":{\"4\":1,\"5\":2,\"6\":1,\"7\":1,\"8\":2,\"11\":1,\"12\":1,\"13\":1,\"14\":2,\"15\":13,\"17\":7,\"18\":1,\"19\":4,\"21\":5,\"22\":9,\"23\":3,\"24\":2,\"25\":3,\"26\":1,\"29\":2,\"31\":4,\"32\":1,\"33\":3,\"34\":4,\"35\":1,\"36\":1,\"38\":1,\"40\":1}}],[\"一种\",{\"1\":{\"4\":1,\"12\":1,\"17\":1,\"26\":1}}],[\"减\",{\"1\":{\"4\":2,\"7\":1}}],[\"减少\",{\"1\":{\"4\":1,\"22\":1,\"24\":1}}],[\"就要\",{\"1\":{\"13\":1}}],[\"就用到\",{\"1\":{\"5\":1}}],[\"就是指\",{\"1\":{\"21\":1}}],[\"就是\",{\"1\":{\"5\":2,\"8\":1,\"10\":2,\"11\":2,\"12\":1,\"13\":3,\"14\":1,\"15\":2,\"17\":1,\"18\":1,\"19\":2,\"21\":2,\"22\":1,\"24\":1,\"27\":1}}],[\"就\",{\"1\":{\"4\":2,\"6\":1,\"7\":1,\"8\":1,\"11\":3,\"12\":1,\"13\":3,\"14\":2,\"15\":5,\"17\":2,\"21\":9,\"22\":9,\"23\":4,\"24\":3,\"26\":1,\"29\":1,\"31\":2,\"32\":1,\"33\":1,\"35\":1,\"36\":1,\"40\":1}}],[\"前后\",{\"1\":{\"31\":1,\"33\":1,\"40\":2}}],[\"前者\",{\"1\":{\"28\":2}}],[\"前面\",{\"1\":{\"14\":1,\"21\":1,\"40\":3}}],[\"前\",{\"1\":{\"4\":1,\"5\":1}}],[\"前缀\",{\"1\":{\"4\":1}}],[\"口诀\",{\"1\":{\"4\":1}}],[\"给\",{\"1\":{\"4\":2,\"15\":2,\"22\":1,\"29\":1}}],[\"赋予\",{\"1\":{\"25\":1}}],[\"赋值\",{\"1\":{\"8\":1,\"12\":8,\"17\":1,\"22\":1}}],[\"赋\",{\"1\":{\"4\":1,\"12\":2}}],[\"后者\",{\"1\":{\"28\":2}}],[\"后面\",{\"1\":{\"7\":2,\"13\":1,\"15\":1,\"22\":1,\"40\":3}}],[\"后加\",{\"1\":{\"4\":1}}],[\"后缀\",{\"1\":{\"4\":1}}],[\"后\",{\"1\":{\"4\":3,\"5\":1,\"8\":1,\"17\":2,\"24\":2,\"27\":2}}],[\"把\",{\"1\":{\"4\":1,\"7\":1,\"15\":3,\"18\":1,\"21\":1,\"22\":1,\"24\":1}}],[\"=\",{\"0\":{\"20\":2},\"1\":{\"4\":20,\"5\":7,\"7\":2,\"8\":8,\"9\":22,\"10\":6,\"11\":5,\"14\":6,\"15\":9,\"17\":3,\"18\":10,\"20\":12,\"22\":44,\"24\":8,\"25\":11,\"29\":21,\"31\":5,\"33\":3,\"34\":3,\"37\":8}}],[\"blog\",{\"1\":{\"39\":1}}],[\"block\",{\"1\":{\"14\":1}}],[\"before\",{\"1\":{\"31\":2,\"33\":2,\"34\":2}}],[\"be\",{\"1\":{\"14\":1}}],[\"bigdecimal\",{\"0\":{\"37\":1},\"1\":{\"11\":2,\"37\":30}}],[\"bipush\",{\"1\":{\"10\":1}}],[\"basic\",{\"1\":{\"9\":1}}],[\"basis\",{\"0\":{\"63\":1},\"1\":{\"9\":1}}],[\"boolean\",{\"1\":{\"7\":4,\"9\":1,\"19\":1,\"20\":1,\"22\":1}}],[\"break\",{\"0\":{\"6\":1},\"1\":{\"6\":1}}],[\"byte\",{\"1\":{\"5\":1,\"7\":4,\"9\":1,\"22\":8}}],[\"b\",{\"1\":{\"4\":8,\"8\":1,\"17\":4,\"29\":9,\"37\":15}}],[\"该类\",{\"1\":{\"20\":1}}],[\"该值\",{\"1\":{\"12\":1}}],[\"该\",{\"1\":{\"4\":1,\"6\":1,\"13\":1,\"14\":1,\"19\":2,\"21\":4,\"22\":3,\"23\":2,\"24\":1}}],[\"再次\",{\"1\":{\"13\":1,\"21\":1}}],[\"再加\",{\"1\":{\"7\":1}}],[\"再\",{\"1\":{\"4\":3,\"5\":2,\"22\":3,\"27\":1}}],[\"值求\",{\"1\":{\"22\":1}}],[\"值域\",{\"1\":{\"21\":1}}],[\"值作\",{\"1\":{\"21\":1}}],[\"值来\",{\"1\":{\"21\":1}}],[\"值是\",{\"1\":{\"4\":1}}],[\"值赋\",{\"1\":{\"4\":1}}],[\"值\",{\"0\":{\"29\":1},\"1\":{\"4\":4,\"6\":1,\"8\":2,\"9\":1,\"12\":1,\"19\":1,\"20\":4,\"21\":17,\"22\":7,\"23\":1,\"29\":8,\"37\":1}}],[\"/\",{\"0\":{\"28\":1},\"1\":{\"4\":14,\"5\":12,\"8\":12,\"9\":17,\"10\":14,\"11\":4,\"13\":2,\"14\":28,\"15\":13,\"17\":16,\"18\":12,\"19\":22,\"22\":47,\"24\":12,\"25\":14,\"28\":5,\"29\":4,\"31\":6,\"33\":14,\"34\":24,\"37\":38,\"39\":6}}],[\"增强\",{\"1\":{\"17\":1,\"24\":1,\"31\":1,\"34\":6}}],[\"增\",{\"1\":{\"4\":1}}],[\"增加\",{\"1\":{\"4\":4,\"15\":1,\"25\":1,\"31\":2,\"36\":1}}],[\"先于\",{\"1\":{\"24\":1}}],[\"先求余\",{\"1\":{\"5\":1}}],[\"先加\",{\"1\":{\"4\":1}}],[\"先\",{\"1\":{\"4\":4,\"12\":1,\"22\":1,\"27\":1}}],[\"）\",{\"1\":{\"4\":2,\"5\":6,\"7\":7,\"8\":2,\"11\":2,\"12\":3,\"13\":3,\"14\":11,\"15\":20,\"17\":8,\"18\":1,\"19\":1,\"21\":7,\"22\":10,\"23\":9,\"24\":1,\"25\":1,\"26\":1,\"27\":2,\"28\":1,\"29\":3,\"31\":2,\"34\":5,\"37\":3,\"38\":1,\"39\":2}}],[\"asm\",{\"1\":{\"34\":1}}],[\"assertionerror\",{\"1\":{\"18\":3}}],[\"aop\",{\"1\":{\"32\":1,\"34\":1}}],[\"after\",{\"1\":{\"31\":2,\"33\":2,\"34\":2}}],[\"annotation\",{\"1\":{\"26\":3}}],[\"alismsservice\",{\"1\":{\"34\":6}}],[\"alunbarclass2\",{\"1\":{\"25\":1}}],[\"alunbarclass1\",{\"1\":{\"25\":1}}],[\"alunbarclass\",{\"1\":{\"25\":1}}],[\"aload\",{\"1\":{\"10\":3}}],[\"add\",{\"1\":{\"24\":5,\"37\":2}}],[\"address\",{\"1\":{\"18\":10}}],[\"article\",{\"1\":{\"39\":1}}],[\"artifactid\",{\"1\":{\"34\":2}}],[\"arr\",{\"1\":{\"29\":6}}],[\"array\",{\"1\":{\"29\":2}}],[\"arraylist\",{\"1\":{\"24\":5}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"23\":1}}],[\"arithmeticexception\",{\"1\":{\"23\":1,\"37\":2}}],[\"arg1\",{\"1\":{\"14\":1}}],[\"args\",{\"1\":{\"14\":5,\"17\":1,\"25\":1,\"29\":3,\"31\":2,\"33\":4,\"34\":5}}],[\"appendnull\",{\"1\":{\"22\":1}}],[\"appendable\",{\"1\":{\"22\":2}}],[\"append\",{\"1\":{\"22\":5}}],[\"abstractlist\",{\"1\":{\"24\":1}}],[\"abstractstringbuilder\",{\"1\":{\"22\":7}}],[\"abstract\",{\"1\":{\"14\":2,\"17\":8,\"22\":2,\"31\":1}}],[\"autoboxtest\",{\"1\":{\"10\":3}}],[\"a\",{\"1\":{\"4\":16,\"7\":2,\"8\":1,\"14\":1,\"17\":8,\"24\":1,\"29\":9,\"37\":15}}],[\"（\",{\"1\":{\"4\":2,\"5\":6,\"7\":7,\"8\":2,\"11\":2,\"12\":3,\"13\":3,\"14\":11,\"15\":20,\"17\":8,\"18\":1,\"19\":1,\"21\":8,\"22\":10,\"23\":9,\"24\":1,\"25\":1,\"26\":1,\"27\":2,\"28\":1,\"29\":4,\"31\":1,\"34\":5,\"37\":3,\"38\":1,\"39\":2}}],[\"：\",{\"1\":{\"4\":5,\"5\":19,\"6\":6,\"7\":9,\"8\":6,\"9\":1,\"10\":4,\"11\":1,\"12\":5,\"13\":1,\"14\":16,\"15\":12,\"17\":9,\"18\":5,\"19\":2,\"20\":5,\"21\":11,\"22\":15,\"23\":10,\"24\":8,\"25\":4,\"26\":4,\"27\":6,\"28\":2,\"29\":15,\"31\":6,\"33\":6,\"34\":3,\"36\":2,\"37\":2,\"39\":1}}],[\"之所以\",{\"1\":{\"25\":1}}],[\"之间\",{\"1\":{\"8\":1,\"9\":2,\"13\":1,\"15\":1,\"22\":1}}],[\"之外\",{\"1\":{\"7\":1,\"8\":1}}],[\"之一\",{\"1\":{\"5\":1,\"7\":1,\"22\":1}}],[\"之后\",{\"1\":{\"4\":1,\"6\":1,\"8\":1,\"13\":1,\"21\":1,\"22\":5,\"23\":1,\"24\":1,\"26\":1,\"27\":2,\"31\":2,\"33\":2,\"34\":2}}],[\"之前\",{\"1\":{\"4\":1,\"8\":1,\"17\":1,\"19\":1,\"23\":2,\"27\":4,\"31\":1,\"33\":1,\"34\":1}}],[\"也许\",{\"1\":{\"21\":1}}],[\"也就是说\",{\"1\":{\"5\":2,\"9\":2,\"12\":1,\"13\":1,\"14\":1,\"17\":1,\"18\":1,\"21\":2,\"22\":1,\"24\":1,\"29\":2,\"33\":1}}],[\"也\",{\"1\":{\"4\":1,\"5\":2,\"10\":1,\"11\":1,\"12\":2,\"13\":1,\"14\":2,\"15\":9,\"17\":4,\"21\":9,\"22\":6,\"23\":2,\"24\":2,\"25\":2,\"27\":1,\"29\":1,\"31\":1,\"32\":1,\"37\":1,\"38\":1}}],[\"放在\",{\"1\":{\"4\":2}}],[\"放置\",{\"1\":{\"0\":1}}],[\",\",{\"1\":{\"4\":14,\"5\":28,\"6\":5,\"7\":58,\"8\":7,\"9\":11,\"10\":10,\"11\":3,\"12\":14,\"13\":18,\"14\":27,\"15\":36,\"17\":40,\"18\":11,\"19\":2,\"20\":9,\"21\":42,\"22\":74,\"23\":36,\"24\":38,\"25\":28,\"26\":5,\"27\":17,\"28\":8,\"29\":38,\"31\":31,\"32\":3,\"33\":37,\"34\":30,\"35\":1,\"36\":1,\"37\":45,\"38\":1,\"39\":1,\"40\":2,\"52\":1,\"58\":1,\"61\":1}}],[\"来自\",{\"1\":{\"33\":1}}],[\"来说\",{\"1\":{\"8\":2,\"12\":1,\"20\":3,\"25\":1,\"27\":1,\"31\":1,\"32\":3,\"35\":1}}],[\"来看\",{\"1\":{\"4\":1,\"12\":2,\"22\":1}}],[\"来\",{\"1\":{\"4\":1,\"5\":5,\"8\":2,\"9\":1,\"11\":1,\"12\":1,\"13\":2,\"15\":2,\"17\":2,\"20\":1,\"21\":6,\"22\":3,\"23\":1,\"26\":1,\"33\":1,\"34\":1,\"35\":1,\"37\":1}}],[\"-\",{\"1\":{\"4\":12,\"5\":3,\"7\":11,\"9\":11,\"11\":5,\"12\":1,\"15\":2,\"16\":1,\"18\":1,\"19\":1,\"21\":1,\"22\":8,\"23\":4,\"24\":1,\"27\":1,\"29\":3,\"31\":1,\"37\":43,\"38\":1}}],[\")\",{\"0\":{\"20\":1,\"21\":1},\"1\":{\"4\":2,\"5\":13,\"8\":2,\"9\":10,\"10\":6,\"14\":20,\"15\":7,\"17\":26,\"18\":31,\"19\":12,\"20\":13,\"21\":53,\"22\":35,\"23\":11,\"24\":21,\"25\":29,\"26\":3,\"27\":1,\"29\":27,\"31\":31,\"32\":1,\"33\":31,\"34\":22,\"37\":37}}],[\"+\",{\"1\":{\"4\":16,\"5\":4,\"14\":2,\"22\":19,\"25\":2,\"29\":4,\"31\":2,\"33\":3,\"34\":3}}],[\"(\",{\"0\":{\"20\":1,\"21\":1},\"1\":{\"4\":2,\"5\":13,\"8\":2,\"9\":10,\"10\":6,\"14\":20,\"15\":7,\"17\":26,\"18\":31,\"19\":12,\"20\":13,\"21\":52,\"22\":35,\"23\":11,\"24\":21,\"25\":29,\"26\":3,\"27\":1,\"29\":26,\"31\":31,\"32\":1,\"33\":31,\"34\":22,\"37\":37}}],[\"了\",{\"1\":{\"4\":1,\"5\":2,\"6\":1,\"7\":1,\"8\":1,\"9\":3,\"10\":2,\"11\":1,\"12\":2,\"13\":1,\"15\":7,\"17\":4,\"18\":1,\"19\":5,\"20\":1,\"21\":8,\"22\":9,\"23\":1,\"24\":3,\"25\":5,\"26\":2,\"29\":4,\"31\":2,\"32\":1,\"33\":2,\"34\":3,\"35\":1,\"36\":1}}],[\"或是\",{\"1\":{\"12\":1}}],[\"或者说\",{\"1\":{\"27\":1}}],[\"或者\",{\"1\":{\"6\":1,\"13\":1,\"14\":1,\"22\":1,\"23\":1,\"25\":1,\"26\":2,\"27\":2,\"35\":1,\"37\":1}}],[\"或\",{\"1\":{\"4\":3,\"5\":5,\"7\":1,\"12\":1,\"13\":1,\"14\":3,\"15\":2,\"17\":4,\"20\":1,\"21\":1,\"23\":3,\"24\":1,\"27\":2,\"29\":1}}],[\"143080795\",{\"1\":{\"39\":1}}],[\"1.11\",{\"1\":{\"37\":1}}],[\"1.9\",{\"1\":{\"37\":1}}],[\"1.0\",{\"1\":{\"37\":4}}],[\"1.\",{\"1\":{\"24\":2,\"25\":1,\"31\":1,\"33\":1,\"34\":1}}],[\"1.6\",{\"1\":{\"11\":1,\"37\":10}}],[\"1.255\",{\"1\":{\"37\":1}}],[\"1.255433\",{\"1\":{\"37\":1}}],[\"1.2\",{\"1\":{\"9\":2,\"11\":1}}],[\"1.8\",{\"1\":{\"8\":1}}],[\"1.7\",{\"1\":{\"8\":1}}],[\"1.7976931348623157\",{\"1\":{\"7\":1}}],[\"1.4\",{\"1\":{\"7\":1}}],[\"15\",{\"1\":{\"7\":2,\"22\":1}}],[\"12\",{\"1\":{\"24\":1}}],[\"123456\",{\"1\":{\"24\":1}}],[\"127\",{\"1\":{\"7\":1,\"9\":2}}],[\"128\",{\"1\":{\"7\":1,\"9\":1}}],[\"16\",{\"1\":{\"5\":1,\"7\":3,\"19\":1,\"22\":2}}],[\"11111111111111111111110000000000\",{\"1\":{\"5\":1}}],[\"11111111111111111111111111111111\",{\"1\":{\"5\":1}}],[\"11\",{\"1\":{\"4\":4,\"19\":1}}],[\"1024\",{\"1\":{\"5\":1}}],[\"10\",{\"1\":{\"4\":7,\"5\":10,\"8\":1,\"10\":4,\"14\":1,\"17\":1,\"22\":1,\"29\":3}}],[\"1\",{\"0\":{\"44\":1},\"1\":{\"4\":4,\"5\":3,\"7\":12,\"11\":2,\"13\":1,\"14\":1,\"15\":1,\"22\":6,\"24\":1,\"29\":4,\"37\":10}}],[\"整型\",{\"1\":{\"7\":1,\"8\":1,\"9\":1}}],[\"整数型\",{\"1\":{\"7\":1}}],[\"整数\",{\"1\":{\"4\":1,\"5\":1,\"11\":1,\"21\":1}}],[\"整个\",{\"1\":{\"1\":1,\"6\":1,\"18\":1}}],[\"需要\",{\"1\":{\"4\":1,\"5\":2,\"6\":2,\"7\":1,\"11\":1,\"13\":3,\"14\":1,\"17\":1,\"19\":1,\"21\":2,\"24\":2,\"25\":1,\"27\":10,\"31\":1,\"32\":2,\"33\":2,\"34\":7,\"36\":2,\"37\":2}}],[\"情况\",{\"1\":{\"4\":1,\"5\":1,\"11\":2,\"12\":1,\"17\":1,\"20\":1,\"22\":4,\"23\":2,\"25\":1,\"35\":1}}],[\"，\",{\"1\":{\"4\":12,\"5\":35,\"6\":11,\"7\":16,\"8\":23,\"9\":9,\"10\":4,\"11\":11,\"12\":32,\"13\":29,\"14\":20,\"15\":54,\"17\":37,\"18\":6,\"19\":21,\"20\":15,\"21\":52,\"22\":72,\"23\":28,\"24\":29,\"25\":14,\"26\":6,\"27\":16,\"28\":14,\"29\":30,\"31\":13,\"32\":9,\"33\":12,\"34\":13,\"35\":6,\"36\":8,\"37\":19,\"38\":6,\"39\":2,\"40\":8}}],[\"中所\",{\"1\":{\"27\":1}}],[\"中泛\",{\"1\":{\"24\":1}}],[\"中统\",{\"1\":{\"22\":1}}],[\"中仅\",{\"1\":{\"22\":1}}],[\"中呢\",{\"1\":{\"8\":1}}],[\"中会\",{\"1\":{\"7\":1,\"23\":1}}],[\"中有\",{\"1\":{\"5\":1,\"7\":1}}],[\"中\",{\"1\":{\"4\":1,\"5\":7,\"6\":2,\"7\":1,\"8\":9,\"9\":2,\"11\":1,\"12\":3,\"13\":1,\"14\":1,\"15\":4,\"17\":15,\"19\":1,\"20\":1,\"21\":8,\"22\":12,\"23\":14,\"24\":1,\"25\":1,\"26\":1,\"27\":6,\"28\":3,\"29\":8,\"31\":1,\"32\":1,\"33\":2,\"34\":4,\"36\":2,\"37\":1,\"38\":1}}],[\"写过\",{\"1\":{\"25\":1}}],[\"写为\",{\"1\":{\"24\":1}}],[\"写\",{\"1\":{\"4\":1,\"15\":1,\"31\":1}}],[\"自定义\",{\"1\":{\"31\":1,\"33\":2,\"34\":3}}],[\"自带\",{\"1\":{\"26\":1}}],[\"自己\",{\"1\":{\"15\":3,\"24\":1,\"25\":1,\"31\":3,\"33\":2,\"34\":2}}],[\"自父\",{\"1\":{\"13\":1}}],[\"自动\",{\"0\":{\"10\":2},\"1\":{\"10\":1,\"12\":6,\"15\":2,\"24\":1}}],[\"自身\",{\"1\":{\"5\":1}}],[\"自\",{\"1\":{\"4\":1,\"17\":2,\"21\":1,\"22\":1,\"24\":1}}],[\"自减\",{\"0\":{\"4\":1},\"1\":{\"4\":4}}],[\"自增\",{\"0\":{\"4\":1},\"1\":{\"4\":3}}],[\" \",{\"0\":{\"3\":1,\"6\":2,\"20\":3,\"33\":1,\"34\":1,\"40\":6,\"41\":1,\"42\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1,\"47\":1,\"48\":1,\"49\":1,\"51\":1,\"52\":1,\"54\":1,\"55\":1,\"57\":1,\"58\":1,\"60\":1,\"61\":1},\"1\":{\"4\":66,\"5\":118,\"6\":7,\"7\":66,\"8\":66,\"9\":94,\"10\":62,\"11\":46,\"12\":15,\"13\":15,\"14\":213,\"15\":60,\"17\":219,\"18\":141,\"19\":139,\"20\":26,\"21\":174,\"22\":475,\"23\":120,\"24\":196,\"25\":175,\"26\":23,\"27\":27,\"28\":20,\"29\":192,\"31\":180,\"32\":13,\"33\":202,\"34\":197,\"35\":12,\"36\":5,\"37\":226,\"38\":4,\"39\":1,\"40\":6,\"62\":2}}],[\"是从\",{\"1\":{\"28\":1}}],[\"是非\",{\"1\":{\"22\":1}}],[\"是否\",{\"1\":{\"12\":1,\"13\":1,\"15\":4,\"19\":2,\"20\":2,\"21\":5,\"22\":1,\"23\":1,\"26\":1,\"40\":1}}],[\"是因为\",{\"1\":{\"7\":1,\"8\":1,\"21\":2,\"23\":1,\"24\":1,\"25\":1,\"37\":1}}],[\"是\",{\"1\":{\"1\":1,\"4\":1,\"5\":2,\"7\":2,\"8\":6,\"9\":2,\"10\":1,\"11\":3,\"12\":9,\"13\":3,\"14\":1,\"15\":10,\"17\":14,\"18\":3,\"19\":4,\"20\":8,\"21\":19,\"22\":30,\"24\":5,\"25\":3,\"26\":4,\"27\":7,\"28\":6,\"29\":12,\"31\":3,\"32\":2,\"33\":3,\"34\":5,\"35\":2,\"36\":1,\"37\":4,\"38\":1,\"42\":1,\"43\":1,\"45\":1,\"46\":1,\"48\":1,\"49\":1,\"51\":1,\"52\":2,\"54\":1,\"55\":1,\"57\":1,\"58\":2,\"60\":1,\"61\":2}}],[\"。\",{\"1\":{\"0\":1,\"4\":6,\"5\":27,\"6\":4,\"7\":13,\"8\":13,\"9\":11,\"10\":3,\"11\":6,\"12\":14,\"13\":13,\"14\":20,\"15\":35,\"17\":30,\"18\":6,\"19\":17,\"20\":7,\"21\":34,\"22\":46,\"23\":23,\"24\":16,\"25\":9,\"26\":3,\"27\":9,\"28\":8,\"29\":14,\"31\":6,\"32\":5,\"33\":8,\"34\":10,\"35\":3,\"36\":3,\"37\":10,\"38\":2,\"39\":1,\"42\":1,\"43\":1,\"45\":1,\"46\":1,\"48\":1,\"49\":1,\"51\":1,\"52\":2,\"54\":1,\"55\":1,\"57\":1,\"58\":2,\"60\":1,\"61\":2}}],[\"在于\",{\"1\":{\"15\":1}}],[\"在\",{\"1\":{\"0\":1,\"4\":3,\"5\":8,\"6\":2,\"7\":3,\"8\":9,\"9\":2,\"11\":3,\"12\":4,\"13\":8,\"14\":7,\"15\":11,\"17\":14,\"18\":1,\"19\":4,\"21\":15,\"22\":15,\"23\":9,\"24\":8,\"25\":3,\"26\":3,\"27\":5,\"29\":6,\"31\":3,\"32\":1,\"33\":4,\"34\":2,\"36\":2,\"37\":2}}],[\"档案\",{\"1\":{\"0\":1}}],[\"和校验\",{\"1\":{\"5\":1}}],[\"和与\",{\"1\":{\"5\":1}}],[\"和\",{\"0\":{\"6\":1,\"8\":1,\"17\":1,\"18\":1,\"20\":1,\"27\":1,\"40\":2},\"1\":{\"0\":1,\"4\":3,\"5\":8,\"8\":2,\"9\":1,\"11\":1,\"12\":2,\"13\":6,\"14\":7,\"15\":10,\"17\":12,\"18\":3,\"20\":1,\"21\":4,\"22\":12,\"23\":4,\"24\":1,\"25\":3,\"27\":3,\"28\":5,\"29\":2,\"31\":1,\"33\":1,\"34\":2,\"35\":1,\"36\":1}}],[\"的有\",{\"1\":{\"23\":1}}],[\"的键\",{\"1\":{\"21\":1}}],[\"的是\",{\"1\":{\"21\":1}}],[\"的类\",{\"1\":{\"14\":2}}],[\"的话\",{\"1\":{\"10\":1,\"18\":1,\"21\":3,\"22\":2,\"23\":2,\"25\":1,\"28\":1,\"33\":1,\"34\":1}}],[\"的\",{\"0\":{\"8\":1,\"9\":1,\"11\":1,\"20\":1},\"1\":{\"0\":1,\"1\":1,\"4\":11,\"5\":35,\"6\":6,\"7\":16,\"8\":13,\"9\":17,\"10\":5,\"11\":13,\"12\":20,\"13\":27,\"14\":17,\"15\":77,\"17\":42,\"18\":13,\"19\":22,\"20\":16,\"21\":78,\"22\":117,\"23\":32,\"24\":25,\"25\":23,\"26\":12,\"27\":13,\"28\":11,\"29\":40,\"31\":18,\"32\":4,\"33\":28,\"34\":22,\"35\":7,\"36\":3,\"37\":10,\"38\":4}}],[\"你\",{\"1\":{\"0\":1,\"13\":1,\"17\":1,\"21\":6,\"22\":1,\"25\":2,\"33\":3,\"34\":3}}],[\"将会\",{\"1\":{\"27\":1}}],[\"将\",{\"1\":{\"0\":1,\"4\":3,\"5\":2,\"7\":2,\"10\":2,\"21\":2,\"22\":5,\"23\":1,\"24\":3,\"25\":1,\"27\":9,\"28\":1,\"29\":3,\"31\":2,\"36\":1,\"37\":4}}],[\"页\",{\"0\":{\"0\":1}}],[\"介绍\",{\"0\":{\"0\":1},\"1\":{\"0\":1,\"22\":1}}]],\"version\":2}}")).map(([e,t])=>[e,_t(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:n,options:o,id:s}})=>{const r=xt[n];e==="suggest"?self.postMessage([e,s,ve(t,r,o)]):e==="search"?self.postMessage([e,s,Ie(t,r,o,"max")]):self.postMessage({suggestions:[e,s,ve(t,r,o)],results:[e,s,Ie(t,r,o,__SLIMSEARCH_SORT_STRATEGY__)]})};
//# sourceMappingURL=index.js.map
