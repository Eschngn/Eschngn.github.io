/**
* @vue/shared v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const Se={},ze=()=>{},Ce=Object.assign,Oe=Array.isArray,j=e=>typeof e=="function",Me=e=>typeof e=="string",Ne=e=>typeof e=="symbol";let X;const L=()=>X||(X=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});/**
* @vue/reactivity v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(Ne));function P(e){const t=e&&e.__v_raw;return t?P(t):e}function Te(e){return e?e.__v_isRef===!0:!1}/**
* @vue/runtime-core v3.5.16
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const v=[];function kt(e){v.push(e)}function Et(){v.pop()}let W=!1;function It(e,...t){if(W)return;W=!0;const n=v.length?v[v.length-1].component:null,o=n&&n.appContext.config.warnHandler,s=Fe();if(o)A(o,n,11,[e+t.map(r=>{var i,c;return(c=(i=r.toString)==null?void 0:i.call(r))!=null?c:JSON.stringify(r)}).join(""),n&&n.proxy,s.map(({vnode:r})=>`at <${re(n,r.type)}>`).join(`
`),s]);else{const r=[`[Vue warn]: ${e}`,...t];s.length&&r.push(`
`,...$e(s)),console.warn(...r)}W=!1}function Fe(){let e=v[v.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const o=e.component&&e.component.parent;e=o&&o.vnode}return t}function $e(e){const t=[];return e.forEach((n,o)=>{t.push(...o===0?[]:[`
`],...Ve(n))}),t}function Ve({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",o=e.component?e.component.parent==null:!1,s=` at <${re(e.component,e.type,o)}`,r=">"+n;return e.props?[s,...Re(e.props),r]:[s+r]}function Re(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(o=>{t.push(...Z(o,e[o]))}),n.length>3&&t.push(" ..."),t}function Z(e,t,n){return Me(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:Te(t)?(t=Z(e,P(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):j(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=P(t),n?t:[`${e}=`,t])}const vt={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function A(e,t,n,o){try{return o?e(...o):e()}catch(s){ee(s,t,n)}}function ee(e,t,n,o=!0){const s=t?t.vnode:null,{errorHandler:r,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||Se;if(t){let c=t.parent;const l=t.proxy,u=`https://vuejs.org/error-reference/#runtime-${n}`;for(;c;){const a=c.ec;if(a){for(let h=0;h<a.length;h++)if(a[h](e,l,u)===!1)return}c=c.parent}if(r){A(r,null,10,[e,l,u]);return}}De(e,n,s,o,i)}function De(e,t,n,o=!0,s=!1){if(s)throw e;console.error(e)}const b=[];let x=-1;const S=[];let k=null,z=0;const je=Promise.resolve();let q=null;const Le=100;function Pe(e){let t=x+1,n=b.length;for(;t<n;){const o=t+n>>>1,s=b[o],r=M(s);r<e||r===e&&s.flags&2?t=o+1:n=o}return t}function We(e){if(!(e.flags&1)){const t=M(e),n=b[b.length-1];!n||!(e.flags&2)&&t>=M(n)?b.push(e):b.splice(Pe(t),0,e),e.flags|=1,te()}}function te(){q||(q=je.then(ne))}function Ae(e){Oe(e)?S.push(...e):k&&e.id===-1?k.splice(z+1,0,e):e.flags&1||(S.push(e),e.flags|=1),te()}function qe(e){if(S.length){const t=[...new Set(S)].sort((n,o)=>M(n)-M(o));if(S.length=0,k){k.push(...t);return}for(k=t,z=0;z<k.length;z++){const n=k[z];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}k=null,z=0}}const M=e=>e.id==null?e.flags&2?-1:1/0:e.id;function ne(e){const t=ze;try{for(x=0;x<b.length;x++){const n=b[x];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),A(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;x<b.length;x++){const n=b[x];n&&(n.flags&=-2)}x=-1,b.length=0,qe(e),q=null,(b.length||S.length)&&ne(e)}}function St(e,t){const n=e.get(t)||0;if(n>Le){const o=t.i,s=o&&se(o.type);return ee(`Maximum recursive updates exceeded${s?` in component <${s}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}const H=new Map,F=new Map;function zt(e,t){return F.has(e)?!1:(F.set(e,{initialDef:$(t),instances:new Set}),!0)}function $(e){return Je(e)?e.__vccOpts:e}function Ct(e,t){const n=F.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(o=>{t&&(o.render=t,$(o.type).render=t),o.renderCache=[],o.update()}))}function Ot(e,t){const n=F.get(e);if(!n)return;t=$(t),oe(n.initialDef,t);const o=[...n.instances];for(let s=0;s<o.length;s++){const r=o[s],i=$(r.type);let c=H.get(i);c||(i!==n.initialDef&&oe(i,t),H.set(i,c=new Set)),c.add(r),r.appContext.propsCache.delete(r.type),r.appContext.emitsCache.delete(r.type),r.appContext.optionsCache.delete(r.type),r.ceReload?(c.add(r),r.ceReload(t.styles),c.delete(r)):r.parent?We(()=>{r.parent.update(),c.delete(r)}):r.appContext.reload?r.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required."),r.root.ce&&r!==r.root&&r.root.ce._removeChildStyle(i)}Ae(()=>{H.clear()})}function oe(e,t){Ce(e,t);for(const n in e)n!=="__file"&&!(n in t)&&delete e[n]}function Mt(e){return(t,n)=>{try{return e(t,n)}catch(o){console.error(o),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}L().requestIdleCallback,L().cancelIdleCallback;const Nt={};{const e=L(),t=(n,o)=>{let s;return(s=e[n])||(s=e[n]=[]),s.push(o),r=>{s.length>1?s.forEach(i=>i(r)):s[0](r)}};t("__VUE_INSTANCE_SETTERS__",n=>n),t("__VUE_SSR_SETTERS__",n=>n)}const He=/(?:^|[-_])(\w)/g,Ue=e=>e.replace(He,t=>t.toUpperCase()).replace(/[-_]/g,"");function se(e,t=!0){return j(e)?e.displayName||e.name:e.name||t&&e.__name}function re(e,t,n=!1){let o=se(t);if(!o&&t.__file){const s=t.__file.match(/([^/\\]+)\.\w+$/);s&&(o=s[1])}if(!o&&e&&e.parent){const s=r=>{for(const i in r)if(r[i]===t)return i};o=s(e.components||e.parent.type.components)||s(e.appContext.components)}return o?Ue(o):n?"App":"Anonymous"}function Je(e){return j(e)&&"__vccOpts"in e}[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:Ge}=Object,{fromEntries:Be}=Object,Ye="ENTRIES",ie="KEYS",ce="VALUES",y="";class U{set;_type;_path;constructor(t,n){const o=t._tree,s=Array.from(o.keys());this.set=t,this._type=n,this._path=s.length>0?[{node:o,keys:s}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:n}=C(this._path);if(C(n)===y)return{done:!1,value:this.result()};const o=t.get(C(n));return this._path.push({node:o,keys:Array.from(o.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=C(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>C(t)).filter(t=>t!==y).join("")}value(){return C(this._path).node.get(y)}result(){switch(this._type){case ce:return this.value();case ie:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const C=e=>e[e.length-1],Ke=(e,t,n)=>{const o=new Map;if(typeof t!="string")return o;const s=t.length+1,r=s+n,i=new Uint8Array(r*s).fill(n+1);for(let c=0;c<s;++c)i[c]=c;for(let c=1;c<r;++c)i[c*s]=c;return le(e,t,n,o,i,1,s,""),o},le=(e,t,n,o,s,r,i,c)=>{const l=r*i;e:for(const u of e.keys())if(u===y){const a=s[l-1];a<=n&&o.set(c,[e.get(u),a])}else{let a=r;for(let h=0;h<u.length;++h,++a){const g=u[h],m=i*a,w=m-i;let d=s[m];const f=Math.max(0,a-n-1),p=Math.min(i-1,a+n);for(let _=f;_<p;++_){const E=g!==t[_],D=s[w+_]+ +E,T=s[w+_+1]+1,I=s[m+_]+1,O=s[m+_+1]=Math.min(D,T,I);O<d&&(d=O)}if(d>n)continue e}le(e.get(u),t,n,o,s,a,i,c+u)}};let ue=class N{_tree;_prefix;_size=void 0;constructor(t=new Map,n=""){this._tree=t,this._prefix=n}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[n,o]=V(this._tree,t.slice(this._prefix.length));if(n===void 0){const[s,r]=B(o);for(const i of s.keys())if(i!==y&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),s.get(i)),new N(c,t)}}return new N(n,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,Qe(this._tree,t)}entries(){return new U(this,Ye)}forEach(t){for(const[n,o]of this)t(n,o,this)}fuzzyGet(t,n){return Ke(this._tree,t,n)}get(t){const n=J(this._tree,t);return n!==void 0?n.get(y):void 0}has(t){return J(this._tree,t)?.has(y)??!1}keys(){return new U(this,ie)}set(t,n){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,G(this._tree,t).set(y,n),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);return o.set(y,n(o.get(y))),this}fetch(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const o=G(this._tree,t);let s=o.get(y);return s===void 0&&o.set(y,s=n()),s}values(){return new U(this,ce)}[Symbol.iterator](){return this.entries()}static from(t){const n=new N;for(const[o,s]of t)n.set(o,s);return n}static fromObject(t){return N.from(Object.entries(t))}};const V=(e,t,n=[])=>{if(t.length===0||e==null)return[e,n];for(const o of e.keys())if(o!==y&&t.startsWith(o))return n.push([e,o]),V(e.get(o),t.slice(o.length),n);return n.push([e,t]),V(void 0,"",n)},J=(e,t)=>{if(t.length===0||!e)return e;for(const n of e.keys())if(n!==y&&t.startsWith(n))return J(e.get(n),t.slice(n.length))},G=(e,t)=>{const n=t.length;e:for(let o=0;e&&o<n;){for(const r of e.keys())if(r!==y&&t[o]===r[0]){const i=Math.min(n-o,r.length);let c=1;for(;c<i&&t[o+c]===r[c];)++c;const l=e.get(r);if(c===r.length)e=l;else{const u=new Map;u.set(r.slice(c),l),e.set(t.slice(o,o+c),u),e.delete(r),e=u}o+=c;continue e}const s=new Map;return e.set(t.slice(o),s),s}return e},Qe=(e,t)=>{const[n,o]=V(e,t);if(n!==void 0){if(n.delete(y),n.size===0)ae(o);else if(n.size===1){const[s,r]=n.entries().next().value;fe(o,s,r)}}},ae=e=>{if(e.length===0)return;const[t,n]=B(e);if(t.delete(n),t.size===0)ae(e.slice(0,-1));else if(t.size===1){const[o,s]=t.entries().next().value;o!==y&&fe(e.slice(0,-1),o,s)}},fe=(e,t,n)=>{if(e.length===0)return;const[o,s]=B(e);o.set(s+t,n),o.delete(s)},B=e=>e[e.length-1],Xe=(e,t)=>{const n=e._idToShortId.get(t);if(n!=null)return e._storedFields.get(n)},Ze=/[\n\r\p{Z}\p{P}]+/u,Y="or",de="and",et="and_not",tt=(e,t)=>{e.includes(t)||e.push(t)},he=(e,t)=>{for(const n of t)e.includes(n)||e.push(n)},pe=({score:e},{score:t})=>t-e,nt=()=>new Map,R=e=>{const t=new Map;for(const n of Object.keys(e))t.set(parseInt(n,10),e[n]);return t},ge=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,me={[Y]:(e,t)=>{for(const n of t.keys()){const o=e.get(n);if(o==null)e.set(n,t.get(n));else{const{score:s,terms:r,match:i}=t.get(n);o.score=o.score+s,o.match=Object.assign(o.match,i),he(o.terms,r)}}return e},[de]:(e,t)=>{const n=new Map;for(const o of t.keys()){const s=e.get(o);if(s==null)continue;const{score:r,terms:i,match:c}=t.get(o);he(s.terms,i),n.set(o,{score:s.score+r,terms:s.terms,match:Object.assign(s.match,c)})}return n},[et]:(e,t)=>{for(const n of t.keys())e.delete(n);return e}},ot=(e,t,n,o,s,r)=>{const{k:i,b:c,d:l}=r;return Math.log(1+(n-t+.5)/(t+.5))*(l+e*(i+1)/(e+i*(1-c+c*o/s)))},st=e=>(t,n,o)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,n,o):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,n,o):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,n,o):1}),_e=(e,t,n,o)=>{for(const s of Object.keys(e._fieldIds))if(e._fieldIds[s]===n){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${o}" was not present in field "${s}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},rt=(e,t,n,o)=>{if(!e._index.has(o)){_e(e,n,t,o);return}const s=e._index.fetch(o,nt),r=s.get(t),i=r?.get(n);!r||typeof i>"u"?_e(e,n,t,o):i<=1?r.size<=1?s.delete(t):r.delete(n):r.set(n,i-1),e._index.get(o).size===0&&e._index.delete(o)},it={k:1.2,b:.7,d:.5},ct={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(Ze),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},ye={combineWith:Y,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:it},lt={combineWith:de,prefix:(e,t,n)=>t===n.length-1},ut={batchSize:1e3,batchWait:10},we={minDirtFactor:.1,minDirtCount:20},at={...ut,...we},be=Symbol("*"),ft=(e,t)=>{const n=new Map,o={...e._options.searchOptions,...t};for(const[s,r]of e._documentIds){const i=o.boostDocument?o.boostDocument(r,"",e._storedFields.get(s)):1;n.set(s,{score:i,terms:[],match:{}})}return n},xe=(e,t=Y)=>{if(e.length===0)return new Map;const n=t.toLowerCase();if(!(n in me))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(me[n])},K=(e,t,n,o,s,r,i,c,l,u=new Map)=>{if(r==null)return u;for(const a of Object.keys(i)){const h=i[a],g=e._fieldIds[a],m=r.get(g);if(m==null)continue;let w=m.size;const d=e._avgFieldLength[g];for(const f of m.keys()){if(!e._documentIds.has(f)){rt(e,g,f,n),w-=1;continue}const p=c?c(e._documentIds.get(f),n,e._storedFields.get(f)):1;if(!p)continue;const _=m.get(f),E=e._fieldLength.get(f)[g],D=ot(_,w,e._documentCount,E,d,l),T=o*s*h*p*D,I=u.get(f);if(I){I.score+=T,tt(I.terms,t);const O=ge(I.match,n);O?O.push(a):I.match[n]=[a]}else u.set(f,{score:T,terms:[t],match:{[n]:[a]}})}}return u},dt=(e,t,n)=>{const o={...e._options.searchOptions,...n},s=(o.fields??e._options.fields).reduce((d,f)=>({...d,[f]:ge(o.boost,f)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:l}=o,{fuzzy:u,prefix:a}={...ye.weights,...i},h=e._index.get(t.term),g=K(e,t.term,t.term,1,t.termBoost,h,s,r,l);let m,w;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const d=t.fuzzy===!0?.2:t.fuzzy,f=d<1?Math.min(c,Math.round(t.term.length*d)):d;f&&(w=e._index.fuzzyGet(t.term,f))}if(m)for(const[d,f]of m){const p=d.length-t.term.length;if(!p)continue;w?.delete(d);const _=a*d.length/(d.length+.3*p);K(e,t.term,d,_,t.termBoost,f,s,r,l,g)}if(w)for(const d of w.keys()){const[f,p]=w.get(d);if(!p)continue;const _=u*d.length/(d.length+p);K(e,t.term,d,_,t.termBoost,f,s,r,l,g)}return g},ke=(e,t,n={})=>{if(t===be)return ft(e,n);if(typeof t!="string"){const a={...n,...t,queries:void 0},h=t.queries.map(g=>ke(e,g,a));return xe(h,a.combineWith)}const{tokenize:o,processTerm:s,searchOptions:r}=e._options,i={tokenize:o,processTerm:s,...r,...n},{tokenize:c,processTerm:l}=i,u=c(t).flatMap(a=>l(a)).filter(a=>!!a).map(st(i)).map(a=>dt(e,a,i));return xe(u,i.combineWith)},Ee=(e,t,n={})=>{const{searchOptions:o}=e._options,s={...o,...n},r=ke(e,t,n),i=[];for(const[c,{score:l,terms:u,match:a}]of r){const h=u.length||1,g={id:e._documentIds.get(c),score:l*h,terms:Object.keys(a),queryTerms:u,match:a};Object.assign(g,e._storedFields.get(c)),(s.filter==null||s.filter(g))&&i.push(g)}return t===be&&s.boostDocument==null||i.sort(pe),i},ht=(e,t,n={})=>{n={...e._options.autoSuggestOptions,...n};const o=new Map;for(const{score:r,terms:i}of Ee(e,t,n)){const c=i.join(" "),l=o.get(c);l!=null?(l.score+=r,l.count+=1):o.set(c,{score:r,terms:i,count:1})}const s=[];for(const[r,{score:i,terms:c,count:l}]of o)s.push({suggestion:r,terms:c,score:i/l});return s.sort(pe),s};class pt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const n=t.autoVacuum==null||t.autoVacuum===!0?at:t.autoVacuum;this._options={...ct,...t,autoVacuum:n,searchOptions:{...ye,...t.searchOptions},autoSuggestOptions:{...lt,...t.autoSuggestOptions}},this._index=new ue,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=we,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[n,o]of this._index){const s={};for(const[r,i]of o)s[r]=Object.fromEntries(i);t.push([n,s])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let n=0;n<t.length;n++)this._fieldIds[t[n]]=n}}const gt=e=>new pt(e),mt=({documentCount:e,nextId:t,fieldIds:n,averageFieldLength:o,dirtCount:s,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=gt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=n,c._avgFieldLength=o,c._dirtCount=s??0,c._index=new ue,c},_t=(e,t)=>{const{index:n,documentIds:o,fieldLength:s,storedFields:r}=e,i=mt(e,t);i._documentIds=R(o),i._fieldLength=R(s),i._storedFields=R(r);for(const[c,l]of i._documentIds)i._idToShortId.set(l,c);for(const[c,l]of n){const u=new Map;for(const a of Object.keys(l))u.set(parseInt(a,10),R(l[a]));i._index.set(c,u)}return i},Q=(e,t)=>{const n=e.toLowerCase(),o=t.toLowerCase(),s=[];let r=0,i=0;const c=(u,a=!1)=>{let h;i===0?h=u.length>20?`… ${u.slice(-20)}`:u:a?h=u.length+i>100?`${u.slice(0,100-i)}… `:u:h=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,h&&s.push(h),i+=h.length,a||(s.push(["mark",t]),i+=t.length,i>=100&&s.push(" …"))};let l=n.indexOf(o,r);if(l===-1)return null;for(;l>=0;){const u=l+o.length;if(c(e.slice(r,l)),r=u,i>100)break;l=n.indexOf(o,r)}return i<100&&c(e.slice(r),!0),s},{entries:yt}=Object,wt=(e,t)=>t.contents.reduce((n,[,o])=>n+o,0)-e.contents.reduce((n,[,o])=>n+o,0),bt=(e,t)=>Math.max(...t.contents.map(([,n])=>n))-Math.max(...e.contents.map(([,n])=>n)),Ie=(e,t,n={},o="max")=>{const s={};return Ee(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...n}).forEach(r=>{const{id:i,terms:c,score:l}=r,u=i.includes("@"),a=i.includes("#"),[h,g]=i.split(/[#@]/),m=Number(h),w=c.sort((f,p)=>f.length-p.length).filter((f,p)=>c.slice(p+1).every(_=>!_.includes(f))),{contents:d}=s[m]??={title:"",contents:[]};if(u)d.push([{type:"customField",id:m,index:g,display:w.map(f=>r.c.map(p=>Q(p,f))).flat().filter(f=>f!==null)},l]);else{const f=w.map(p=>Q(r.h,p)).filter(p=>p!==null);if(f.length&&d.push([{type:a?"heading":"title",id:m,...a&&{anchor:g},display:f},l]),"t"in r&&r.t)for(const p of r.t){const _=w.map(E=>Q(p,E)).filter(E=>E!==null);_.length&&d.push([{type:"text",id:m,...a&&{anchor:g},display:_},l])}}}),yt(s).sort(([,r],[,i])=>(o?wt:bt)(r,i)).map(([r,{title:i,contents:c}])=>{if(!i){const l=Xe(t,r);l&&(i=l.h)}return{title:i,contents:c.map(([l])=>l)}})},ve=(e,t,n={})=>{const o=ht(t,e,{fuzzy:.2,maxFuzzy:3,...n}).map(({suggestion:s})=>s);return e.includes(" ")?o:o.filter(s=>!s.includes(" "))},xt=Be(Ge(JSON.parse("{\"/\":{\"documentCount\":121,\"nextId\":121,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2#随笔-1\",\"3\":\"3\",\"4\":\"4\",\"5\":\"4#标题-2\",\"6\":\"4#标题-3\",\"7\":\"5\",\"8\":\"5#java\",\"9\":\"6\",\"10\":\"6#标题-2\",\"11\":\"6#标题-3\",\"12\":\"7\",\"13\":\"7#标题-2\",\"14\":\"7#标题-3\",\"15\":\"8\",\"16\":\"8#标题-2\",\"17\":\"8#标题-3\",\"18\":\"9\",\"19\":\"9#标题-2\",\"20\":\"9#标题-3\",\"21\":\"10\",\"22\":\"10#本质和作用\",\"23\":\"10#内置注解\",\"24\":\"10#元注解\",\"25\":\"10#自定义注解\",\"26\":\"11\",\"27\":\"11#数据类型\",\"28\":\"11#基本数据类型\",\"29\":\"11#包装类型\",\"30\":\"11#两者联系与区别\",\"31\":\"11#浮点数运算的精度丢失\",\"32\":\"11#运算符\",\"33\":\"11#自增自减运算符\",\"34\":\"11#移位运算符\",\"35\":\"11#continue、break-和-return\",\"36\":\"11#变量\",\"37\":\"11#方法\",\"38\":\"11#和-equals\",\"39\":\"11#运算符-1\",\"40\":\"11#equals-方法\",\"41\":\"11#hashcode-方法\",\"42\":\"12\",\"43\":\"12#面向对象\",\"44\":\"12#接口与抽象类\",\"45\":\"12#抽象类\",\"46\":\"12#接口\",\"47\":\"12#两者的区别\",\"48\":\"12#深拷贝和浅拷贝\",\"49\":\"12#浅拷贝\",\"50\":\"12#深拷贝\",\"51\":\"12#两者对比\",\"52\":\"13\",\"53\":\"13#分类\",\"54\":\"13#error\",\"55\":\"13#exception\",\"56\":\"13#处理机制\",\"57\":\"13#throws\",\"58\":\"13#throw\",\"59\":\"13#try-catch\",\"60\":\"13#try-catch-finally\",\"61\":\"13#try-finally\",\"62\":\"14\",\"63\":\"14#泛型参数\",\"64\":\"14#泛型类\",\"65\":\"14#泛型接口\",\"66\":\"14#泛型方法\",\"67\":\"14#类型通配符\",\"68\":\"14#上界通配符-extends-t\",\"69\":\"14#下界通配符-super-t\",\"70\":\"14#无界通配符\",\"71\":\"14#pecs-原则\",\"72\":\"14#泛型擦除\",\"73\":\"15\",\"74\":\"15#访问控制修饰符\",\"75\":\"15#public\",\"76\":\"15#protected\",\"77\":\"15#default\",\"78\":\"15#private\",\"79\":\"15#非访问控制修饰符\",\"80\":\"15#static\",\"81\":\"15#final\",\"82\":\"15#abstract\",\"83\":\"15#sychronized\",\"84\":\"15#volatile\",\"85\":\"15#transient\",\"86\":\"15#native\",\"87\":\"15#可变长参数\",\"88\":\"16\",\"89\":\"16#获取-class-对象\",\"90\":\"16#创建实例对象\",\"91\":\"16#获取和操作字段\",\"92\":\"16#获取和调用方法\",\"93\":\"17\",\"94\":\"17#不可变性\",\"95\":\"17#jdk-9-的改进\",\"96\":\"17#字符串常量池\",\"97\":\"17#itern-方法\",\"98\":\"17#stringbuffer-stringbuilder\",\"99\":\"17#常用方法\",\"100\":\"17#编译优化\",\"101\":\"18\",\"102\":\"18#标题-2\",\"103\":\"18#标题-3\",\"104\":\"19\",\"105\":\"19#标题-2\",\"106\":\"19#标题-3\",\"107\":\"20\",\"108\":\"20#可见性\",\"109\":\"20#原理\",\"110\":\"20#有序性\",\"111\":\"20#与-synchronized-的区别\",\"112\":\"20#volatile-的正确使用场景\",\"113\":\"21\",\"114\":\"22\",\"115\":\"23\",\"116\":\"24\",\"117\":\"25\",\"118\":\"26\",\"119\":\"27\",\"120\":\"28\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,11],\"1\":[1,7],\"2\":[1,4],\"3\":[2,483],\"4\":[2],\"5\":[3,4],\"6\":[3,4],\"7\":[1,7],\"8\":[1,2],\"9\":[2],\"10\":[3,4],\"11\":[3,5],\"12\":[1],\"13\":[3,4],\"14\":[3,4],\"15\":[1],\"16\":[3,4],\"17\":[3,5],\"18\":[1],\"19\":[3,4],\"20\":[3,5],\"21\":[1,61],\"22\":[3,108],\"23\":[2,137],\"24\":[2,121],\"25\":[2,160],\"26\":[2],\"27\":[1],\"28\":[2,138],\"29\":[2,195],\"30\":[4,105],\"31\":[5,145],\"32\":[1],\"33\":[3,78],\"34\":[2,185],\"35\":[6,72],\"36\":[1,83],\"37\":[1,172],\"38\":[1],\"39\":[1,101],\"40\":[1,157],\"41\":[1,222],\"42\":[2],\"43\":[1,197],\"44\":[3],\"45\":[1,68],\"46\":[1,206],\"47\":[3,212],\"48\":[4],\"49\":[2,156],\"50\":[2,197],\"51\":[2,77],\"52\":[1],\"53\":[1,32],\"54\":[0,45],\"55\":[0,129],\"56\":[2,80],\"57\":[0,110],\"58\":[0,105],\"59\":[0,52],\"60\":[0,152],\"61\":[0,70],\"62\":[1,91],\"63\":[2,29],\"64\":[2,79],\"65\":[2,62],\"66\":[2,131],\"67\":[2,23],\"68\":[2,126],\"69\":[2,134],\"70\":[2,72],\"71\":[3,33],\"72\":[2,43],\"73\":[1,35],\"74\":[2],\"75\":[0,20],\"76\":[0,29],\"77\":[0,30],\"78\":[0,36],\"79\":[3],\"80\":[0,97],\"81\":[0,68],\"82\":[0,36],\"83\":[0,24],\"84\":[0,43],\"85\":[0,42],\"86\":[0,29],\"87\":[3,124],\"88\":[1,78],\"89\":[3,81],\"90\":[3,138],\"91\":[4,117],\"92\":[4,106],\"93\":[1],\"94\":[2,153],\"95\":[5,218],\"96\":[3,108],\"97\":[1,58],\"98\":[1,78],\"99\":[2,105],\"100\":[2,187],\"101\":[4],\"102\":[3,4],\"103\":[3,4],\"104\":[4],\"105\":[3,4],\"106\":[3,4],\"107\":[1,81],\"108\":[2,96],\"109\":[1,198],\"110\":[1,102],\"111\":[4,93],\"112\":[4,192],\"113\":[0,4],\"114\":[1],\"115\":[1],\"116\":[1],\"117\":[1],\"118\":[1],\"119\":[1],\"120\":[1]},\"averageFieldLength\":[1.7933884297520664,85.30475512688592],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"1\":{\"h\":\"随笔\",\"t\":[\"此处是整个随笔文档的目录\"]},\"2\":{\"h\":\"随笔\",\"t\":[\"我的大学四年\"]},\"3\":{\"h\":\"大学生活\",\"t\":[\"一转眼又到夏天，这个夏天，我的本科大学生活杀青了。此刻我正坐在熟悉的自习室里，周围都是努力复习、备考期末的学弟学妹们，我仿佛看到了曾经的那个我。曾经的我对这种生活习以为常、见怪不怪，现在的我却对此格外珍惜。好像从初中、高中以来，一直都是这样，总是要等说分别了，才会恋恋不舍。\",\"这四年，说快也快，说慢也慢。\",\"大一大二，刚从束缚的高中生活中脱离出来，我每天基本都是玩的时间居多，学习也只是走马观花式的形式学习，又由于受疫情的影响，每天的生活差不多是教室、宿舍、食堂三点一线。那时候思想的重心并不是放在学习上面，而是想着怎么提升游戏技术、怎么谈到甜甜的校园恋爱（单身中）、怎么把恋爱谈好（恋爱中）、怎么把课程的平时分得高一点等等，有时候也会思考大学的意义究竟是什么，会反问自己所谓的大学就是这样子每天吃喝玩乐，然后期末月冲刺一下保证自己不挂科吗？但身边的同学大多数也都是这样过的，感觉自己一学期下来并没有得到什么实质性的提升和进步。总结来说，大一大二的我，思维还没有发生转变，依旧是高中时代的学习应试思维，与高中的区别就是手机电脑自由以及恋爱自由。\",\"大三，在持续学习专业知识后，我逐渐对计算机这个行业有了一定的认识，对自己的职业发展也有了一定的方向，我开始自己学习我感兴趣的方向的专业知识。白天没课的时候，我就泡在自习室里，看网课、刷八股、敲代码，当时的我很享受这样的生活，我真真切切的感受到了自己有在进步，自己的技能有在增长。这一年，我结束了内耗的恋爱、搬离了吵闹的宿舍、重拾了热爱的篮球，学习知识、锻炼身体、好好吃饭、好好休息，没有多虑，无论是学习还是身体健康，每天都比昨天的自己进步一点点，这对于我来说好像才是大学的意义。\",\"大三的末尾，也就是去年的夏天，我开始约面试找实习。我从五一开始积极投简历，一直到七月中旬，才找到一份小厂的实习工作。这段时间，对于当时的我来说压力不小，焦虑也有很多，因为自己确实荒废了前两年，没有任何突出的竞赛、学习成绩以及项目经历，找实习的过程中，屡战屡败，对自己也曾产生深深的自我怀疑。\",\"大四，因为杭州的实习机会多，加上学校里的课程也只剩了毕业设计，所以这一年我基本都在家里，主要的任务就是实习+秋招+实习+春招，然后在空闲的时间里做毕业设计。随着秋招的面试的参与，我当时其实已经陷入了一个麻木的状态，我也对自己的定位有了清楚的认识，像我这样的学历以及已有的能力，能收到互联网的 offer 就算是上上签了，自己也不再执着于投递中大厂，也逐渐的将目光放到一些中小厂上。我也懊悔过自己当初大一大二的时候为什么没有培养意识出去实习，没有积累好的项目经验，我甚至懊悔自己当初高考的时候为什么不多考点分上一个211，这样或许在面临毕业找工作的时候，就不会这么困难。好在功夫不负有心人，秋招和春招我各收获了一个对于我来说算不错的 offer，虽然都不是互联网行业，但也称得上是专业对口。至此，我的大四也接近尾声了。\",\"对于我自己大学四年的学习，学校里教的知识其实很有限，很多知识都是我自己从网上自学的。我没有早一点打破一些信息壁垒，多去了解与竞赛、就业有关的信息，早点确定自己的学习方向，起步自学的时间点太晚了，就导致了自己在找实习、参加校招时候的能力的局限性。\",\"除了上面这些，我还想说些学习之外的话。\",\"除了学习之外，我认为大学生活更是一个自我认识、自我探索的过程，我们要弄明白自己到底是个什么样的人，自己真正热爱的、真正想要的到底是什么，这一点我认为甚至比学习更为重要。\",\"我知道这三个问题，在我们人生的每个不同的阶段，都会有不同的答案，我们也许一生都在追随这三个问题的答案。\",\"在初高中的学生时代，我的答案也许是我是个贪玩调皮但也不讨厌学习的人，我热爱的是数学，我想要未来考上一个好的大学；而到了大学的学生时代，我们会接触来自五湖四海的同学，我们会初步接触社会，所以我们的人生观、价值观、世界观 会得到一次刷新，我们也许会偶尔陷入之前从未有的焦虑与迷茫，所以大学期间对这三个问题的探索，我认为是最重要的。\",\"当然，这三个问题的答案并不是一蹴而就的，而是伴随着学习、竞赛、实习、社交、运动、恋爱等等这些过程，慢慢的在我们的心中有了一个清晰的认识，当心中逐渐有了这三个问题的答案，我相信所谓的迷茫，所谓的内耗焦虑，都会在我们的行动中，逐渐烟消云散。\",\"好啦，我的大学生活至此结束了，我也彻底告别了校园生活。那些和同学一起赶早八的日子、自习室窗前的阳光、篮球场的汗水，都成了我记忆中最温柔的片段。从懵懂踏入校园，到即将步入社会，每一步都充满挑战与成长。感谢遇见的一切人和事，让我更加坚定了自己的方向。未来或许迷茫，但我会带着大学四年的积累与勇气，继续前行。\",\"也祝愿屏幕前的你，身体健康、天天开心、学习工作顺利。\"]},\"4\":{\"h\":\"校招经历\"},\"5\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"6\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"7\":{\"h\":\"知识库\",\"t\":[\"此处是整个知识库文档的目录\"]},\"8\":{\"h\":\"Java\",\"t\":[\"Java基础\"]},\"9\":{\"h\":\"执行计划\"},\"10\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"11\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\",\"这里是内容。\"]},\"12\":{\"h\":\"索引\"},\"13\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"14\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"15\":{\"h\":\"数据结构\"},\"16\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"17\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\",\"这里是内容。\"]},\"18\":{\"h\":\"数据类型\"},\"19\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"20\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\",\"这里是内容。\"]},\"21\":{\"h\":\"注解\",\"t\":[\"在 Java 中，注解（Annotation） 是一种特殊的元数据，它为代码提供额外的信息，但本身并不会直接影响代码的执行逻辑。注解可以应用于类、方法、字段、参数、局部变量、构造器等程序元素上。\",\"注解在 Java 5 中引入，主要目的是简化配置、减少样板代码，并提供在编译期或运行时处理代码的机制。\"]},\"22\":{\"h\":\"本质和作用\",\"t\":[\"注解本质上是 Java 代码中的一种标记或元数据，它不包含业务逻辑，但能够被工具、框架或编译器读取和解析，并根据这些信息执行相应的操作。\",\"其主要作用如下：\",\"编译期检查： 编译器可以根据注解进行错误检查或发出警告。例如，@Override 注解可以确保子类方法正确地重写了父类方法。\",\"代码生成： 在编译期或运行时，基于注解信息生成额外的代码（例如，Lombok 使用注解自动生成 getter/setter）。\",\"运行时处理： 许多框架（如 Spring、Hibernate、JUnit）在运行时通过反射读取注解信息，并据此调整其行为。例如，Spring 的 @Autowired 注解用于自动装配依赖。\",\"简化配置： 相较于 XML 等配置文件，注解将配置信息直接嵌入到代码中，减少了配置的复杂性，提高了可读性。\"]},\"23\":{\"h\":\"内置注解\",\"t\":[\"Java 语言自身提供了一些标准注解，用于编译器或 JVM 的特定行为：\",\"@Override：标记一个方法是重写（覆盖）父类或实现接口中的方法，如果被标记的方法没有正确地重写父类方法（例如，方法名拼写错误、参数不匹配），编译器会报错，以此来帮助开发者避免常见的重写错误，提高代码的健壮性。\",\"@Deprecated：标记一个类、方法或字段是已过时的，当代码中使用了被 @Deprecated 标记的元素时，编译器会发出警告，以此来告知开发者该元素将来可能会被移除或有更好的替代方案，建议不再使用。\",\"@SuppressWarnings：指示编译器抑制（不显示）特定的警告信息，可以接受一个字符串数组作为参数，指定要抑制的警告类型（如 \\\"unchecked\\\"、\\\"rawtypes\\\"、\\\"deprecation\\\" 等）。 在我们确定某些警告是安全且可以忽略时，用于清除编译器的警告，使编译输出更干净。\",\"@FunctionalInterface (Java 8 引入)： 标记一个接口是函数式接口，即只包含一个抽象方法的接口，如果一个接口被 @FunctionalInterface 标记但包含多个抽象方法，编译器会报错。\",\"@SafeVarargs (Java 7 引入)：标记一个方法或构造器使用了可变长参数 （Varargs），并且这些可变长参数在处理时是类型安全的。\"]},\"24\":{\"h\":\"元注解\",\"t\":[\"元注解 (Meta-Annotations) 是用来注解其他注解的注解。它们定义了自定义注解的行为和属性。\",\"java.lang.annotation 中提供了元注解，可以使用这些注解来定义自己的注解。\",\"Java 元注解\",\"@Target ：指定自定义注解可以应用于哪些程序元素上，接受一个 ElementType 枚举数组，如 ElementType.TYPE (类、接口、枚举)、ElementType.METHOD (方法)、ElementType.FIELD (字段) 等。\",\"@Retention ： 指定自定义注解的生命周期，即注解信息在何时可用，接受一个 RetentionPolicy 枚举值： \",\"RetentionPolicy.SOURCE：注解只保留在源代码中，编译后会被丢弃（如 @Override）。\",\"RetentionPolicy.CLASS：注解保留在 .class 文件中，但在运行时无法通过反射获取（默认值）。\",\"RetentionPolicy.RUNTIME：注解保留在 .class 文件中，并且在运行时可以通过反射获取和处理（如 Spring 的 @Autowired）。\",\"@Documented：标记一个自定义注解，表示该注解会被包含在 Javadoc 文档中。\",\"@Inherited：标记一个自定义注解，表示如果一个类被该注解标记，则其子类会继承这个注解，只能应用于类，不能应用于方法或字段。\",\"@Repeatable (Java 8 引入)：标记一个自定义注解，表示该注解可以在同一个程序元素上重复使用。\"]},\"25\":{\"h\":\"自定义注解\",\"t\":[\"我们可以根据自己的需求创建自定义注解 （Custom Annotations）。\",\"java.lang.reflect.AnnotationElement 接口则提供了拿到我们自定义注解的功能。注解的处理是通过 Java 反射来处理的. 反射相关的类 Class, Method, Field 都实现了 AnnotationElement 接口,如下图所示:\",\"AnnotationElement 实现类图\",\"java.lang.reflect.AnnotationElement 接口中的方法如下,只要我们通过反射拿到 Class, Method, Field 类，就能够通过 getAnnotation(Class) 拿到我们想要的注解并取值。\",\"AnnotationElement 中的方法\",\"例如下面,自定义一个注解 MyCustomAnnotation,在其中定义了3个元素:\",\"@Target(ElementType.METHOD) // 应用于方法 @Retention(RetentionPolicy.RUNTIME) // 运行时可见 @Documented // 包含在 Javadoc 中 public @interface MyCustomAnnotation { // 元素（成员变量) String value() default \\\"默认值\\\"; int count() default 1; String[] tags() default {}; // 数组类型的元素 }\",\"然后可以将其注解在方法上:\",\"public class MyService { @MyCustomAnnotation(value = \\\"这是一个重要的操作\\\", count = 5, tags = {\\\"core\\\", \\\"business\\\"}) public void performOperation() { System.out.println(\\\"执行了 MyService 的 performOperation 方法。\\\"); } @MyCustomAnnotation(\\\"另一个操作\\\") // 只有一个 value 元素时可省略元素名 public void anotherOperation() { System.out.println(\\\"执行了 MyService 的 anotherOperation 方法。\\\"); } public static void main(String[] args) throws NoSuchMethodException { // 通过反射获取注解信息 Class<MyService> serviceClass = MyService.class; Method method = serviceClass.getMethod(\\\"performOperation\\\"); if (method.isAnnotationPresent(MyCustomAnnotation.class)) { MyCustomAnnotation annotation = method.getAnnotation(MyCustomAnnotation.class); System.out.println(\\\"方法名: \\\" + method.getName()); System.out.println(\\\"注解 value: \\\" + annotation.value()); System.out.println(\\\"注解 count: \\\" + annotation.count()); System.out.print(\\\"注解 tags: \\\"); for (String tag : annotation.tags()) { System.out.print(tag + \\\" \\\"); } System.out.println(); } } }\",\"输出如下:\",\"方法名: performOperation 注解 value: 这是一个重要的操作 注解 count: 5 注解 tags: core business\",\"在实际开发应用中,自定义注解通常配合拦截器实现登录校验或者配合 AOP 实现日志打印。\"]},\"26\":{\"h\":\"基础知识1\"},\"27\":{\"h\":\"数据类型\"},\"28\":{\"h\":\"基本数据类型\",\"t\":[\"Java 中有 8 种基本数据类型，分别为：\",\"6 种数字类型： \",\"4 种整数型：byte、short、int、long\",\"2 种浮点型：float、double\",\"1 种字符类型：char\",\"1 种布尔型：boolean。\",\"这 8 种基本数据类型的默认值以及所占空间的大小如下：\",\"基本类型\",\"位数\",\"字节\",\"默认值\",\"取值范围\",\"示例\",\"byte\",\"8\",\"1\",\"0\",\"-128 ~ 127\",\"byte b = 10;\",\"short\",\"16\",\"2\",\"0\",\"-32768（-2^15） ~ 32767（2^15 - 1）\",\"short s=1000；\",\"int\",\"32\",\"4\",\"0\",\"-2147483648 ~ 2147483647\",\"int i = 100;\",\"long\",\"64\",\"8\",\"0L\",\"-9223372036854775808（-2^63） ~ 9223372036854775807（2^63 -1）\",\"long l = 10000L;\",\"char\",\"16\",\"2\",\"'\\\\u0000'\",\"0 ~ 65535（2^16 - 1）\",\"char c = 'A';\",\"float\",\"32\",\"4\",\"0.0f\",\"1.4E-45 ~ 3.4028235E38，单精度，尾数约7位有效数字\",\"float f = 3.14f;\",\"double\",\"64\",\"8\",\"0.0d\",\"4.9E-324 ~ 1.7976931348623157E308，双精度，尾数约15~16位有效数字\",\"double d = 3.1415926;\",\"boolean\",\"1\",\"false\",\"true、false\",\"boolean b = true;\",\"⚠️注意：\",\"Java 里使用 long 类型的数据一定要在数值后面加上 L，否则将作为整型解析。\",\"Java 里使用 float 类型的数据一定要在数值后面加上 f 或 F，否则将无法通过编译。\",\"char a = 'h'char :单引号，String a = \\\"hello\\\" :双引号。\"]},\"29\":{\"h\":\"包装类型\",\"t\":[\"这八种基本类型对应的包装类型如下：\",\"基本类型\",\"包装类（位于 java.lang 包）\",\"byte\",\"Byte\",\"short\",\"Short\",\"int\",\"Integer\",\"long\",\"Long\",\"float\",\"Float\",\"double\",\"Double\",\"char\",\"Character\",\"boolean\",\"Boolean\",\"包装类型的主要作用：\",\"用途\",\"说明\",\"集合中使用\",\"List<int> 是非法的，必须使用 List<Integer>\",\"泛型支持\",\"泛型不支持基本类型，只能用包装类型\",\"提供实用方法\",\"如 Integer.parseInt(\\\"123\\\")、Double.isNaN()\",\"对象化处理\",\"在需要对象的地方（如反射）使用包装类\",\"默认值处理（如 Map.get）\",\"基本类型不能为 null，包装类型可以\",\"包装类型的缓存机制\",\"Java 中的包装类型缓存机制是一种性能优化手段，会对某些包装类的特定数值范围内的对象进行缓存（重用），避免频繁创建新对象。\",\"比如当我们使用：\",\"Integer a = Integer.valueOf(100);\",\"而不是：\",\"Integer a = new Integer(100);\",\"时，valueOf() 方法可能会返回一个缓存的对象，而不是新建的。\",\"📦缓存范围\",\"包装类\",\"缓存范围\",\"Byte\",\"-128 ~ 127\",\"Short\",\"-128 ~ 127\",\"Integer\",\"-128 ~ 127（默认，可配置）\",\"Long\",\"-128 ~ 127\",\"Character\",\"0 ~ 127\",\"Boolean\",\"true / false（两个对象）\",\"Float / Double\",\"❌ 没有缓存机制\",\"Float 和 Double 不采用缓存机制，是因为浮点数值的取值范围极广且精度分散，缓存意义不大，反而会浪费内存资源。\",\"🧪 示例：Integer 缓存机制\",\"Integer x = 128; Integer y = 128; System.out.println(x == y); // false （比较的是引用） Integer a = 100; Integer b = 100; System.out.println(a == b); // true（-128 到 127 缓存） System.out.println(a.equals(b)); // true（比较值）\",\"== 比较的是地址（包装类型是对象引用）；\",\"equals() 比较的是值（包装类中已重写该方法）。\",\"🛠️ Integer 缓存的实现源码\",\"下面是 Integer.java 源码：\",\"public static Integer valueOf(int i) { if (i >= -128 && i <= 127) // 缓存范围 return IntegerCache.cache[i + 128]; else return new Integer(i); }\",\"Integer 缓存的上限可以通过 JVM 参数修改：\",\"-Djava.lang.Integer.IntegerCache.high=1000\",\"可将缓存范围改为 -128 ~ 1000。\"]},\"30\":{\"h\":\"两者联系与区别\",\"t\":[\"自动装箱与自动拆箱\",\"int a = 10; // 基本类型 Integer b = a; // 自动装箱（int → Integer） int c = b; // 自动拆箱（Integer → int）\",\"⚠️注意：如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。\",\"基本类型和包装类型的区别：\",\"比较维度\",\"基本类型（Primitive）\",\"包装类型（Wrapper）\",\"是否是对象\",\"❌ 否\",\"✅ 是，对象（类的实例）\",\"存储位置\",\"栈内存\",\"堆内存（引用）\",\"默认值\",\"有（如 int 为 0）\",\"可以为 null\",\"使用范围\",\"不能用于泛型、集合等只支持对象的场景\",\"可以用于集合、泛型等\",\"性能\",\"更高（操作直接在栈上进行）\",\"稍低（涉及对象创建与方法调用）\",\"是否有方法\",\"❌ 没有任何方法\",\"✅ 有丰富方法（如 parseXXX）\",\"是否支持 null\",\"❌ 不支持 null\",\"✅ 支持 null\",\"使用场景\",\"一般用于高性能的数值计算场景\",\"一般用于集合、框架、对象传递\"]},\"31\":{\"h\":\"浮点数运算的精度丢失\",\"t\":[\"🌰举个例子：\",\"System.out.println(0.1 + 0.2); // 输出：0.30000000000000004\",\"我们期望输出是 0.3，但却出现了一个 令人不爽的长小数，这就是精度丢失问题。\",\"这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示。\",\"就比如说十进制下的 0.2 就没办法精确转换成二进制小数：\",\"// 0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止， // 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。 0.2 * 2 = 0.4 -> 0 0.4 * 2 = 0.8 -> 0 0.8 * 2 = 1.6 -> 1 0.6 * 2 = 1.2 -> 1 0.2 * 2 = 0.4 -> 0（发生循环） ...\",\"🔐 如何应对/解决浮点精度问题？\",\"✅使用 BigDecimal 进行精确计算：\",\"import java.math.BigDecimal; BigDecimal a = new BigDecimal(\\\"0.1\\\"); BigDecimal b = new BigDecimal(\\\"0.2\\\"); BigDecimal c = new BigDecimal(\\\"0.3\\\"); System.out.println(a.add(b).equals(c)); // true\",\"❗ 注意：用字符串构造 BigDecimal 更精确，不要用 double 构造！\"]},\"32\":{\"h\":\"运算符\"},\"33\":{\"h\":\"自增自减运算符\",\"t\":[\"自增 (++) 和自减 (--) 运算符 是一类常用的一元运算符，用于对变量的值进行 +1 或 -1 操作。它们可以放在变量的前面（前缀）或后面（后缀），但位置不同会导致表达式运算顺序不同。\",\"表达式\",\"含义说明\",\"++x（前缀）\",\"先将 x 加 1，再使用它的值\",\"x++（后缀）\",\"先使用 x 的原值，再加 1\",\"--x（前缀）\",\"先将 x 减 1，再使用它的值\",\"x--（后缀）\",\"先使用 x 的原值，再减 1\",\"示例：\",\"int x = 5; int a = ++x; // x 先加 1 → x = 6，然后赋值给 a → a = 6 int b = x++; // b 先得到 x 的值 6，然后 x 再加 1 → x = 7, b = 6 int y = 5; int c = --y; // y 先减 1 → y = 4，然后赋值给 c → c = 4 int d = y--; // d 先得到 y 的值 4，然后 y 再减 1 → y = 3, d = 4\"]},\"34\":{\"h\":\"移位运算符\",\"t\":[\"移位运算符（Shift Operators） 是对整数类型（二进制位）进行操作的一种运算符，适用于 byte、short、int、long 类型，主要用于高效的数值计算、加密压缩、位图处理等。\",\"使用移位运算符的原因：\",\"高效：现代处理器具有专门的硬件指令来执行这些移位操作，这些指令通常在一个时钟周期内完成。相比之下，乘法和除法等算术运算在硬件层面上需要更多的时钟周期来完成。\",\"节省内存：通过移位操作，可以使用一个整数（如 int 或 long）来存储多个布尔值或标志位，从而节省内存。\",\"Java 中有三种移位运算符：\",\"<< :左移运算符，向左移若干位，高位丢弃，低位补零。x << n,相当于 x 乘以 2 的 n 次方(不溢出的情况下)\",\">> :带符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。x >> n,相当于 x 除以 2 的 n 次方\",\">>> :无符号右移，所有位向右移动，不保留符号位，高位补 0（仅适用于 int/long）\",\"🌰举例说明\",\"int a = 8; // 二进制：0000 1000 System.out.println(a << 1); // 16（左移1位：0001 0000） System.out.println(a >> 1); // 4 （右移1位：0000 0100） System.out.println(a >>> 1); // 4 （和 >> 相同，因为正数符号位为0） int b = -8; // 二进制：1111 1000（补码表示） System.out.println(b >> 1); // -4（符号位为 1，保留，11111100） System.out.println(b >>> 1); // 2147483644（补 0，变成大正数 ，01111100）\",\"⚠️注意：\",\"当移位的位数超过数值所占有的位数，会先对相应位数求余（%）后再进行左移/右移操作（int 32位，long 64位）\",\"移位不会改变变量本身（除非赋值）\",\"移位操作符实际上支持的类型只有int和long，编译器在对short、byte、char类型进行移位前，都会将其转换为int类型再操作\"]},\"35\":{\"h\":\"continue、break 和 return\",\"t\":[\"在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后 ，提前终止循环，这就需要用到下面几个关键词：\",\"continue：指跳出当前的这一次循环，继续下一次循环。\",\"break：指跳出整个循环体，继续执行循环下面的语句。\",\"return 用于跳出所在方法，结束该方法的运行。return 一般有两种用法：\",\"return;：直接使用 return 结束方法执行，用于没有返回值函数的方法\",\"return value;：return 一个特定值，用于有返回值函数的方法\"]},\"36\":{\"h\":\"变量\",\"t\":[\"成员变量与局部变量的区别：\",\"比较项\",\"成员变量\",\"局部变量\",\"定义位置\",\"类中，方法外\",\"方法内部、构造器、代码块中\",\"默认值\",\"✅有，数值型为0，引用型为 null\",\"❌没有，必须手动初始化后才能使用\",\"存储位置\",\"位于堆内存中，因为成员变量都属于对象的属性，静态成员变量（static修饰）是属于类级别的变量，它在堆内存中只有一个实例，被该类的所有实例共享\",\"位于栈内存中，具体在 Java 虚拟机栈中的局部变量表中\",\"生存周期\",\"随对象创建而创建，随对象回收而消亡\",\"随方法调用创建，方法结束后销毁\",\"成员变量与局部变量的区别\"]},\"37\":{\"h\":\"方法\",\"t\":[\"静态方法为什么不能调用非静态成员？\",\"这个需要结合 JVM 的相关知识，主要原因如下：\",\"静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。\",\"在类的非静态成员不存在的时候静态方法就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。\",\"静态方法和实例方法有何不同？\",\"1、调用方式\",\"在外部调用静态方法时，可以使用 类名.方法名 的方式，也可以使用 对象.方法名 的方式，而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象 。\",\"不过，需要注意的是一般不建议使用 对象.方法名 的方式来调用静态方法。这种方式非常容易造成混淆，静态方法不属于类的某个对象而是属于这个类。\",\"因此，一般建议使用 类名.方法名 的方式来调用静态方法。\",\"2、访问类成员是否存在限制\",\"静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。\",\"重载和重写的区别\",\"重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理\",\"重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法\",\"重载发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。重载就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理\",\"重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。\",\"方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。\",\"如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。\",\"构造方法无法被重写\"]},\"38\":{\"h\":\"和\"},\"39\":{\"h\":\"运算符\",\"t\":[\"== 运算符是一个关系运算符，对于基本类型和引用类型的作用效果是不同的\",\"对于基本数据类型来说，== 比较的是值。\",\"int a = 10; int b = 10; int c = 20; System.out.println(a == b); // true (值相等) System.out.println(a == c); // false (值不相等)\",\"对于引用数据类型来说，== 比较的是对象的内存地址。\",\"String s1 = new String(\\\"Hello\\\"); String s2 = new String(\\\"Hello\\\"); // s1 和 s2 是两个不同的String对象 String s3 = s1; // s3 和 s1 指向同一个String对象 System.out.println(s1 == s2); // false (s1 和 s2 指向不同的内存地址) System.out.println(s1 == s3); // true (s1 和 s3 指向同一个内存地址) // 对于包装类型，== 的行为还会受到缓存机制的影响 Integer i1 = 100; // 自动装箱，100在Integer的缓存范围内 Integer i2 = 100; // 自动装箱，100在Integer的缓存范围内 Integer i3 = 200; // 自动装箱，200超出Integer的缓存范围 Integer i4 = 200; // 自动装箱，200超出Integer的缓存范围 System.out.println(i1 == i2); // true (因为100在缓存范围内，通常会指向同一个对象) System.out.println(i3 == i4); // false (因为200超出缓存范围，会创建两个新对象) // 注意：Float 和 Double 没有缓存机制，即使值相同，== 也会是 false。 Float f1 = 1.0f; Float f2 = 1.0f; System.out.println(f1 == f2); // false\",\"因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。\"]},\"40\":{\"h\":\"方法\",\"t\":[\"equals() 方法是 java.lang.Object 类中的一个方法，它被设计用来比较两个对象的内容是否相等。\",\"Object 类中 equals() 的默认实现：在 Object 类中，equals() 方法的默认实现与 == 运算符的行为完全相同，即它也比较的是对象的引用地址。\",\"Object 类中 equals() 方法：\",\"public boolean equals(Object obj) { return (this == obj); }\",\"Object o1 = new Object(); Object o2 = new Object(); System.out.println(o1.equals(o2)); // false (默认行为是比较地址)\",\"被重写 (Override) 的 equals() 方法：许多 Java 核心库中的类（例如 String、Integer、ArrayList 等）都重写了 equals() 方法，以提供基于内容的比较逻辑。\",\"String 类的 equals()：比较字符串的字符序列是否相同。\",\"String s1 = new String(\\\"Hello\\\"); String s2 = new String(\\\"Hello\\\"); String s3 = \\\"World\\\"; System.out.println(s1.equals(s2)); // true (内容相等) System.out.println(s1.equals(s3)); // false\",\"Integer 类的 equals()：比较包装的整数值是否相同。\",\"Integer i1 = new Integer(100); // 尽管现在不推荐直接使用new Integer() Integer i2 = new Integer(100); Integer i3 = 200; Integer i4 = 200; System.out.println(i1.equals(i2)); // true (值相等) System.out.println(i3.equals(i4)); // true (值相等)\",\"自定义类重写 equals()：如果是自己定义的类需要进行基于内容的比较，那么必须重写 equals() 方法（通常也需要同时重写 hashCode() 方法，以满足 equals 和 hashCode 的通用约定）。\",\"class MyPoint { int x; int y; public MyPoint(int x, int y) { this.x = x; this.y = y; } @Override public boolean equals(Object obj) { // 1. 检查是否为同一个对象 if (this == obj) return true; // 2. 检查传入对象是否为空或类型不匹配 if (obj == null || getClass() != obj.getClass()) return false; // 3. 类型转换 MyPoint other = (MyPoint) obj; // 4. 比较关键字段的内容 return x == other.x && y == other.y; } // 同时重写 hashCode() @Override public int hashCode() { return Objects.hash(x, y); } } MyPoint p1 = new MyPoint(1, 2); MyPoint p2 = new MyPoint(1, 2); MyPoint p3 = new MyPoint(3, 4); System.out.println(p1 == p2); // false (不同对象) System.out.println(p1.equals(p2)); // true (内容相等，因为我们重写了equals) System.out.println(p1.equals(p3)); // false\"]},\"41\":{\"h\":\"方法\",\"t\":[\"hashCode() 方法是 java.lang.Object 类中的一个方法，它返回该对象的哈希码（hash code）值。哈希码是一个整数，它在散列数据结构（如 HashMap、HashSet、HashTable）中起着提高查找对象效率的作用。\",\"以 HashSet 为例，当我们把对象存入 HashSet 时，会先计算出对象的 hashCode 来得到对象在底层数组中存储的 “桶” 的位置，同时也会与其他已经加入的对象的 hashCode 值作比较，如果没有相符的 hashCode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashCode 值的对象，这时会调用 equals() 方法来检查 hashCode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。\",\"以上也便是 JDK 同时提供 hashCode() 和 equals() 方法的原因。\",\"在 Object 类中，hashCode() 的默认实现通常会将对象的内存地址转换为一个整数。这意味着，即使两个不同的对象内容完全相同，它们的哈希码也可能是不同的（因为它们在内存中的地址不同）。\",\"因此，Java 规范对这两个方法定义了非常重要的约定（Contract）：\",\"如果两个对象根据 equals(Object obj) 方法是相等的，那么调用这两个对象中任意一个的 hashCode() 方法都必须产生相同的整数结果。\",\"理解： 如果我们认为两个对象是“一样”的（通过 equals 比较），那么它们的哈希码就必须一样。否则，我们将无法在哈希表中正确地查找这些对象。 例如，如果我们把一个 MyObject A 存入 HashSet，然后用一个与 Aequals 的 MyObject B 去查找 ，如果 A 和 B 的 hashCode 不同，HashSet 定位到不同的存储桶中，导致找不到 A。 删除对象也是同理，我们可能无法通过一个逻辑上相等的对象来删除另一个对象，因为 HashSet 会基于 hashCode() 查找错误的存储桶。\",\"如果两个对象根据 equals(Object obj) 方法是不相等的，那么调用这两个对象中任意一个的 hashCode() 方法不要求产生不同的整数结果。\",\"理解： 两个不相等的对象可以有相同的哈希码。这种情况被称为哈希冲突（hash collision）。哈希冲突是允许的，但冲突越少越好，因为它会降低哈希表的性能（需要进一步比较 equals）。\",\"在应用程序执行期间，只要一个对象的 equals() 比较中所用的信息没有被修改，那么对该对象多次调用 hashCode() 方法都必须始终返回相同的整数结果。\",\"理解： 哈希码必须是稳定的。如果一个对象的哈希码在使用过程中会发生变化，那么当它被放入哈希表后，你可能就无法再找到它了。\",\"所以，我们在重写 equals() 方法的同时，也要重写 hashCode() 方法，以满足 equals 和 hashCode 的通用约定。\"]},\"42\":{\"h\":\"基础知识2\"},\"43\":{\"h\":\"面向对象\",\"t\":[\"面向过程编程（Procedural-Oriented Programming，POP）和面向对象编程（Object-Oriented Programming，OOP）是两种常见的编程范式，两者对比如下：\",\"比较项\",\"面向过程（POP）\",\"面向对象（OOP）\",\"核心思想\",\"以过程（函数）为中心\",\"以对象（类）为中心\",\"组织方式\",\"程序 = 函数 + 数据\",\"程序 = 对象（属性 + 方法）\",\"关注点\",\"关注流程和步骤\",\"关注数据和行为\",\"数据访问\",\"数据是公开的，函数直接操作\",\"数据封装在对象中，通过方法访问\",\"扩展性和维护性\",\"结构紧密，修改难度大\",\"模块化强，易于扩展与维护\",\"重用性\",\"通过函数复用\",\"通过类继承、接口、多态复用\",\"适用场景\",\"小程序、算法流程清晰的系统\",\"中大型系统、复杂业务逻辑建模\",\"代表语言\",\"C、汇编、早期 Pascal\",\"Java、C++、Python、C#\",\"OOP 的三大特征\",\"封装：把数据和操作封装在对象中，不允许外部对象直接访问对象内部的信息，但对外暴露接口，提供一些可以被外界访问的方法来操作属性。\",\"继承：使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。\",\"⚠️关于继承，注意以下几点：\",\"子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。\",\"子类可以拥有自己属性和方法，即子类可以对父类进行扩展。\",\"子类可以用自己的方式实现父类的方法。\",\"多态：一个对象具有多种的状态，具体的表现为父类的引用指向子类对象的实例，动态绑定调用方法。\",\"Animal animal = new Dog(); // Animal 是父类，Dog 是它的子类\",\"⚠️关于多态，注意以下几点：\",\"对象类型和引用类型之间具有继承（类）/实现（接口）的关系；\",\"引用类型变量发出的方法调用的到底是哪个类中的方法，必须在程序运行期间才能确定；\",\"多态不能调用“只在子类存在但在父类不存在”的方法；\",\"如果子类重写了父类的方法，真正执行的是子类重写的方法，如果子类没有重写父类的方法，执行的是父类的方法。\"]},\"44\":{\"h\":\"接口与抽象类\"},\"45\":{\"h\":\"抽象类\",\"t\":[\"抽象类（abstract class） 是一种不能被实例化的类，用来被子类继承并扩展，其主要作用是为一组子类提供共同的属性、行为或接口定义。子类继承抽象类时，子类必须实现父类中定义的抽象方法。\",\"如果一个抽象类 A，继承一个抽象类 B，此时不需要重写 B 中的抽象方法，但当 A 被继承时，A 的子类还是要重写 B 中的抽象方法。\",\"abstract class 类名 { // 成员变量 // 构造方法（可有） // 普通方法（可实现） // 抽象方法（无方法体，至少有一个） }\"]},\"46\":{\"h\":\"接口\",\"t\":[\"接口通过 interface 关键字来定义，它可以包含一些常量和方法，如下所示：\",\"public interface BasketballPlayer { // 常量 String NAME = \\\"Shawn\\\"; // 抽象方法 String getName(); // 静态方法 static boolean isTrue(String name) { return name.equals(NAME); } // 默认方法 default void printBasketball(){ System.out.println(\\\"篮球\\\"); } }\",\"反编译这段代码的字节码后，如下所示：\",\"public interface BasketballPlayer { public static final String NAME; public abstract String getName(); public static boolean isTrue(String); public void printBasketball(); }\",\"可以发现以下几点：\",\"没有 private、default 或者 static 修饰的方法是隐式抽象的，会自动加上 public abstract 修饰符，正如上例中的 getName 方法，其实是一个抽象方法 —— 这便是定义接口的意义。\",\"接口中定义的变量默认是用 public static final 修饰的。\",\"Java 官方文档上有这样的声明：\",\"Every field declaration in the body of an interface is implicitly public, static, and final.\",\"因此，接口可以用来作为常量类使用，还能省略掉 public static final。\",\"从 Java 8 开始，接口中允许引入静态方法，比如上例中的 isTrue() 方法，这允许我们可以在接口中提供一些与接口本身紧密关联的实用的辅助方法，而不必创建一个单独的工具类来存放这些方法，从而提高提高内聚性。\",\"因此，接口中的 static 方法必须要有方法体：\",\"接口中的 static 方法要有方法体\",\"从 Java 8 开始，接口中允许定义 default 方法，比如上例中的 printBasketball() 方法。\",\"为什么需要 default 方法？\",\"在 Java 8 之前，如果我们修改了一个接口（例如，添加了一个新方法），所有实现该接口的类都必须同时修改，以实现这个新方法。这在大型项目中，尤其是当接口被许多不同的模块或第三方库实现时，会成为一个巨大的问题，因为这将导致大量的代码修改和兼容性问题。\",\"default 方法的出现解决了这个问题。它允许我们在接口中定义带有默认实现的方法。这意味着，如果一个实现类没有提供自己的实现，它将自动继承接口中提供的默认实现，而不需要修改代码。这使得接口的演进变得更加平滑和安全。\",\"因此，接口中的 default 方法也必须要有方法体：\",\"接口中的 default 方法要有方法体\",\"从 Java 9 开始，接口中允许定义 private 方法来封装一些重复的逻辑，供默认方法和静态方法调用，提高代码的可读性和可维护性。\",\"接口不可以被实例化，也就是说接口不能有静态代码块和构造方法。\"]},\"47\":{\"h\":\"两者的区别\",\"t\":[\"语法层面：\",\"继承和实现：一个类只能继承一个类（包括抽象类），因为 Java 不支持多继承。但一个类可以实现多个接口，一个接口也可以继承多个其他接口。\",\"成员变量：接口中的成员变量只能是 public static final 类型的，不能被修改且必须有初始值。抽象类的成员变量可以有任何修饰符（private, protected, public），可以在子类中被重新定义或赋值。\",\"方法：Java 8 之前，接口中的方法默认是 public abstract ，也就是只能有方法声明。自 Java 8 起，可以在接口中定义 default（默认） 方法和 static （静态）方法。 自 Java 9 起，接口可以包含 private 方法。抽象类可以包含抽象方法和非抽象方法。抽象方法没有方法体，必须在子类中实现。非抽象方法有具体实现，可以直接在抽象类中使用或在子类中重写。\",\"设计层面：\",\"接口的核心设计理念是契约或者能力，它定义了一组对象可以拥有的公共行为的规范（What），而不关心这些行为是如何实现的。接口的关注点是行为的抽象，它描述了一个类能做什么，通常用于标识一种 has-a 的关系。\",\"抽象类的核心设计理念是模版或者骨架，它提供了一个部分实现的基类（可能包含具体方法和抽象方法），旨在被子类继承和扩展（How + What）。抽象类通常用于标识一种 is-a 的关系，即子类是抽象类的一种特殊类型。它不仅定义了 “我能做什么”，还可能提供了 “我如何做一部分”。\",\"举个栗子🌰：\",\"比如一个物流派送系统中，有多种类型的运输工具，比如：卡车、货轮、飞机、无人机等等。\",\"我们可以用接口定义 “能力” —— 比如 “可以飞”（Flyable）、“可以装货”（Loadable），我们不用关心对象是飞机还是无人机，只要能飞，就实现 Flyable；只要能装货，就实现 Loadable。\",\"public interface Flyable { void fly(); } public interface Loadable { void loadCargo(double weight); }\",\"我们可以用抽象类定义 “模版” —— 比如 “运输工具”（TransportVehicle），这个抽象类描述的是 “所有运输工具的通用部分”，比如都有一个司机、都需要执行送货操作，属于 “是一种运输工具” 的类型关系，是一个继承体系。\",\"public abstract class TransportVehicle { protected String id; protected String driver; public void assignDriver(String driverName) { this.driver = driverName; } public abstract void deliver(String destination); }\",\"🚛卡车 Truck：\",\"public class Truck extends TransportVehicle implements Loadable { @Override public void deliver(String destination) { System.out.println(\\\"Truck delivering to \\\" + destination); } @Override public void loadCargo(double weight) { System.out.println(\\\"Truck loaded with \\\" + weight + \\\"kg\\\"); } }\",\"🚁无人机：\",\"public class Drone extends TransportVehicle implements Flyable, Loadable { @Override public void deliver(String destination) { System.out.println(\\\"Drone flying to \\\" + destination); } @Override public void fly() { System.out.println(\\\"Drone taking off...\\\"); } @Override public void loadCargo(double weight) { System.out.println(\\\"Drone loaded with \\\" + weight + \\\"kg\\\"); } }\"]},\"48\":{\"h\":\"深拷贝和浅拷贝\"},\"49\":{\"h\":\"浅拷贝\",\"t\":[\"浅拷贝会在堆上创建一个新的对象（区别于引用拷贝：两个不同的引用指向同一个对象），这个新对象里的基本数据类型和对应的包装数据类型以及不可变对象 String 成员是原对象值的副本，而引用类型成员（比如对象、数组）仅仅是复制了引用地址，这意味着原对象和新对象会共享这些引用类型成员指向的内存空间（指向同一个堆内容中的引用类型成员）。\",\"class Subject { String name; public Subject(String name) { this.name = name; } } class Student implements Cloneable { String studentName; // 不可变对象 Subject subject; // 引用类型成员 int age; // 基本数据类型 Integer height; // 包装数据类型 public Student(String studentName, String subjectName, int age, Integer height) { this.studentName = studentName; this.subject = new Subject(subjectName); this.age = age; this.height = height; } @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); // 执行浅拷贝 } public void display() { System.out.println(\\\"学生姓名: \\\" + studentName + \\\", 科目: \\\" + subject.name + \\\", 年龄: \\\" + age + \\\", 身高: \\\" + height); System.out.println(\\\"Subject 对象内存地址: \\\" + subject.hashCode()); } } public class ShallowCopyDemo { public static void main(String[] args) { try { Student originalStudent = new Student(\\\"张三\\\", \\\"数学\\\", 18, 175); System.out.println(\\\"原始学生信息:\\\"); originalStudent.display(); Student clonedStudent = (Student) originalStudent.clone(); // 浅拷贝 System.out.println(\\\"\\\\n拷贝学生信息 (浅拷贝后):\\\"); clonedStudent.display(); // 修改拷贝对象的引用类型成员 clonedStudent.studentName = \\\"李四\\\"; // 不可变类型修改，互不影响 clonedStudent.subject.name = \\\"物理\\\"; // 引用类型修改，会影响原对象 clonedStudent.age = 21; // 基本类型修改，互不影响 clonedStudent.height = 180; // 包装类型修改，互不影响 System.out.println(\\\"\\\\n修改拷贝对象后:\\\"); System.out.println(\\\"原始学生信息:\\\"); originalStudent.display(); // 注意：原对象的科目也变成了“物理” System.out.println(\\\"拷贝学生信息:\\\"); clonedStudent.display(); } catch (CloneNotSupportedException e) { e.printStackTrace(); } } }\",\"运行结果：\",\"原始学生信息: 学生姓名: 张三, 科目: 数学, 年龄: 18, 身高: 175 Subject 对象内存地址: 356573597 拷贝学生信息 (浅拷贝后): 学生姓名: 张三, 科目: 数学, 年龄: 18, 身高: 175 Subject 对象内存地址: 356573597 修改拷贝对象后: 原始学生信息: 学生姓名: 张三, 科目: 物理, 年龄: 18, 身高: 175 <-- 原对象的科目也变成了“物理” Subject 对象内存地址: 356573597 拷贝学生信息: 学生姓名: 李四, 科目: 物理, 年龄: 21, 身高: 180 Subject 对象内存地址: 356573597\",\"可以看到，originalStudent 和 clonedStudent 的 subject 成员指向了同一个 Subject 对象，所以修改其中一个会导致另一个也受影响；而 studentName、age 和 height 则相互独立，互不影响。\",\"浅拷贝 —— 引用的 Subject 对象共享\"]},\"50\":{\"h\":\"深拷贝\",\"t\":[\"深拷贝不仅会复制对象本身，还会递归地复制其内部所有引用的对象。这意味着原对象和新对象在内存中是完全独立的，没有任何共享的引用。\",\"常见的深拷贝的实现方式：\",\"递归实现 clone()： 在 clone() 方法中，除了调用 super.clone() 进行浅拷贝外，还要手动对其所有引用类型成员调用它们的 clone() 方法，确保它们也被完全复制。这种方式要求所有涉及到拷贝的类都实现 Cloneable 接口。\",\"序列化和反序列化： 将对象先序列化成字节流，再从字节流反序列化回来。这种方式会创建全新的对象图，是实现深拷贝的一种简单有效的方法，但需要类实现 Serializable 接口，并且会有一定的性能开销。\",\"构造器或工厂方法： 手动编写代码，在构造新对象时，创建所有引用类型成员的新实例并拷贝数据。\",\"下面是使用递归的方式实现的深拷贝：\",\"class SubjectDeep implements Cloneable { String name; public SubjectDeep(String name) { this.name = name; } @Override protected Object clone() throws CloneNotSupportedException { return super.clone(); // SubjectDeep 自身也需要浅拷贝 } } class StudentDeep implements Cloneable { String studentName; SubjectDeep subject; // 引用类型成员 int age; Integer height; public StudentDeep(String studentName, String subjectName, int age, Integer height) { this.studentName = studentName; this.subject = new SubjectDeep(subjectName); this.age = age; this.height = height; } // 深拷贝实现 @Override protected Object clone() throws CloneNotSupportedException { StudentDeep clonedStudent = (StudentDeep) super.clone(); // 首先进行浅拷贝 // 关键步骤：手动对引用类型成员进行深拷贝 clonedStudent.subject = (SubjectDeep) subject.clone(); return clonedStudent; } public void display() { System.out.println(\\\"学生姓名: \\\" + studentName + \\\", 科目: \\\" + subject.name + \\\", 年龄: \\\" + age + \\\", 身高: \\\" + height); System.out.println(\\\"SubjectDeep 对象内存地址: \\\" + subject.hashCode()); } } public class DeepCopyDemo { public static void main(String[] args) { try { StudentDeep originalStudent = new StudentDeep(\\\"张三\\\", \\\"数学\\\", 18, 175); System.out.println(\\\"原始学生信息:\\\"); originalStudent.display(); StudentDeep clonedStudent = (StudentDeep) originalStudent.clone(); // 深拷贝 System.out.println(\\\"\\\\n拷贝学生信息 (深拷贝后):\\\"); clonedStudent.display(); // 修改拷贝对象的引用类型成员 clonedStudent.studentName = \\\"李四\\\"; clonedStudent.subject.name = \\\"物理\\\"; clonedStudent.age = 21; clonedStudent.height = 180; System.out.println(\\\"\\\\n修改拷贝对象后:\\\"); System.out.println(\\\"原始学生信息:\\\"); originalStudent.display(); // 注意：原对象的科目**没有**被修改 System.out.println(\\\"拷贝学生信息:\\\"); clonedStudent.display(); } catch (CloneNotSupportedException e) { e.printStackTrace(); } } }\",\"运行结果：\",\"原始学生信息: 学生姓名: 张三, 科目: 数学, 年龄: 18, 身高: 175 SubjectDeep 对象内存地址: 356573597 拷贝学生信息 (深拷贝后): 学生姓名: 张三, 科目: 数学, 年龄: 18, 身高: 175 SubjectDeep 对象内存地址: 1735600054 <-- 地址不同了 修改拷贝对象后: 原始学生信息: 学生姓名: 张三, 科目: 数学, 年龄: 18, 身高: 175 <-- 原始对象的科目未被修改 SubjectDeep 对象内存地址: 356573597 拷贝学生信息: 学生姓名: 李四, 科目: 物理, 年龄: 21, 身高: 180 SubjectDeep 对象内存地址: 1735600054\",\"现在，修改 clonedStudent 的 subject 不会影响 originalStudent 的 subject，因为 clonedStudent.subject 是一个全新的 SubjectDeep 对象，在内存中与原对象是完全独立的。\",\"深拷贝 —— 引用的 Subject 对象不共享\"]},\"51\":{\"h\":\"两者对比\",\"t\":[\"特性\",\"浅拷贝（Shallow Copy）\",\"深拷贝（Deep Copy）\",\"拷贝深度\",\"只拷贝对象本身，不拷贝其内部引用的对象。\",\"递归地拷贝对象本身及其所有内部引用的对象。\",\"独立性\",\"原始对象和拷贝对象共享引用类型成员。\",\"原始对象和拷贝对象完全独立。\",\"修改影响\",\"修改拷贝对象的引用类型成员，会影响原始对象。\",\"修改拷贝对象的任何成员，不影响原始对象。\",\"适用场景\",\"1. 对象只包含基本数据类型及其对应包装类型。 2. 对象包含不可变对象（如 String）。 3. 你可以接受共享引用类型成员的风险，或不需要修改它们。\",\"1. 对象包含可变的引用类型成员。 2. 需要确保原对象和拷贝对象完全隔离，修改互不影響。\",\"实现复杂性\",\"简单，直接调用 super.clone()。\",\"复杂，需要递归拷贝所有层级的引用对象。\"]},\"52\":{\"h\":\"异常\"},\"53\":{\"h\":\"分类\",\"t\":[\"Java 的异常体系是一个完善的类层次结构，其基类是 java.lang.Throwable。Throwable 又派生出两个主要子类：Error 和 Exception。\",\"异常类结构层次图\"]},\"54\":{\"h\":\"\",\"t\":[\"Error 代表了程序中严重的问题，通常是由 JVM 自身、操作系统或硬件问题引起的，比如内存溢出（OutOfMemoryError）、栈溢出（StackOverflowError）等。\",\"通常，应用程序不应该尝试捕获或处理 Error，因为它们表示 JVM 处于一种不可恢复的状态。\"]},\"55\":{\"h\":\"\",\"t\":[\"程序本身可以合法处理的异常，这些异常通常是由程序逻辑、外部资源（文件、网络）或用户输入等问题引起的，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。\",\"受检异常 (Checked Exception)：继承自 Exception 类，但不继承 RuntimeException。编译器会强制开发者预见并处理这些可能发生的外部问题，提高代码的健壮性。 如果我们在方法中调用了可能抛出受检异常的方法，那么必须使用 try-catch 块来捕获它，或者在方法签名中使用 throws 关键字声明它。否则，程序将无法通过编译。 常见的有：\",\"IOException (文件找不到、网络中断等)\",\"SQLException (数据库操作错误)\",\"ClassNotFoundException\",\"非受检异常 (Unchecked Exception) / 运行时异常 (Runtime Exception):继承自 RuntimeException，而 RuntimeException 继承自 Exception）。 编译器不会强制我们处理这类异常。即使我们不捕获或声明它们，程序也能编译通过。但如果在运行时发生这类异常而没有被捕获，程序会终止。 常见的有：\",\"NullPointerException (空指针引用)\",\"ArrayIndexOutOfBoundsException (数组越界)\",\"ClassCastException (类型转换错误)\",\"ArithmeticException (算术错误，如除以零)\"]},\"56\":{\"h\":\"处理机制\",\"t\":[\"Java 提供了以下关键字来处理异常：\",\"try：用于监听。将要被监听的代码(可能抛出异常的代码)放在 try 语句块之内，当 try 语句块内发生异常时，异常就被抛出。\",\"catch：用于捕获异常。catch 用来捕获 try 语句块中发生的异常。\",\"finally：finally 语句块总是会被执行。它主要用于回收在try块里打开的物力资源(如数据库连接、网络连接和磁盘文件)。只有 finally 块，执行完成之后，才会回来执行 try 或者 catch 块中的 return 或者 throw 语句，如果 finally 中使用了 return 或者 throw 等终止方法的语句，则就不会跳回执行，直接停止。\",\"throw：用于抛出异常。\",\"throws：用在方法签名中，用于声明该方法可能抛出的异常。\"]},\"57\":{\"h\":\"\",\"t\":[\"在 Java 中，throws 关键字用于声明一个方法可能抛出的异常类型。这是一种让调用者知道该方法在执行过程中可能会遇到的异常，从而使得调用者可以采取相应的处理措施。\",\"public static void method() throws IOException, FileNotFoundException{ //something statements }\",\"⚠️注意：\",\"若是父类的方法没有声明异常，则子类继承后，也不能声明异常。\",\"如果是非受检异常（unchecked exception），即 Error、RuntimeException 或它们的子类，那么可以不使用 throws 关键字来声明要抛出的异常，编译仍能顺利通过，但在运行时会被系统抛出。\",\"如果是受检查异常（checked exception），要么用 try-catch 语句捕获，要么用 throws 子句将它抛出，否则会导致编译时错误。\",\"某个方法抛出了异常，那么该方法的调用者必须处理或者重新抛出该异常。\"]},\"58\":{\"h\":\"\",\"t\":[\"在 Java 中，throw 关键字用于显式地抛出一个异常。这意味着程序员可以在代码的特定位置主动触发异常，以指示出现了某种错误或不正常的状态。\",\"public static double method(int value) { if(value == 0) { throw new ArithmeticException(\\\"参数不能为0\\\"); //抛出一个运行时异常 } return 11.0 / value; }\",\"⚠️注意：\",\"必须是 Throwable 的子类：throw 后面跟的是一个 Throwable 对象，这可以是一个异常（如 IllegalArgumentException、NullPointerException 等）或错误（如 OutOfMemoryError）。\",\"使用位置：throw 通常在方法体内使用，在代码的逻辑流中，当满足特定条件时，可以抛出异常。\",\"控制流影响：抛出异常会立即终止当前方法的执行，控制流会转到调用该方法的地方，直到找到合适的 catch 块处理异常。\"]},\"59\":{\"h\":\"\",\"t\":[\"在一个 try - catch 语句块中可以捕获多个异常类型，并对不同类型的异常做出不同的处理：\",\"public static void method() { try { // 抛出异常 } catch (NullPointerException e) { System.out.println(\\\"捕获到 NullPointerException: \\\" + e.getMessage()); } catch (ArithmeticException e) { System.out.println(\\\"捕获到 ArithmeticException: \\\" + e.getMessage()); } }\",\"同一个 catch 也可以捕获多种类型异常，用 | 隔开：\",\"public static void method() { try { // 抛出异常 } catch (NullPointerException | ArithmeticException e) { System.out.println(\\\"捕获到异常: \\\" + e.getMessage()); } }\"]},\"60\":{\"h\":\"\",\"t\":[\"try 块：用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。\",\"catch 块：用于处理 try 捕获到的异常。\",\"finally 块：无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return 语句时，finally 语句块将在方法返回之前被执行。\",\"常规语法：\",\"try { //执行程序代码，可能会出现异常 } catch(Exception e) { //捕获异常并处理 } finally { //必执行的代码 }\",\"执行顺序：\",\"当 try 没有捕获到异常时：try 语句块中的语句逐一被执行，程序将跳过 catch 语句块，执行 finally 语句块和其后的语句；\",\"当 try 捕获到异常，catch 语句块里没有处理此异常的情况：此异常将会抛给 JVM，语句块里的语句还是会被执行，但 finally 语句块后的语句不会被执行；\",\"当 try 捕获到异常，catch 语句块里有处理此异常的情况：在 try 语句块中是按照顺序来执行的，当执行到某一条语句出现异常时，程序将跳到 catch 语句块，并与 catch 语句块逐一匹配，找到与之对应的处理程序，其他的 catch 语句块将不会被执行，而 try 语句块中，出现异常之后的语句也不会被执行，catch 语句块执行完后，执行 finally 语句块里的语句，最后执行 finally 语句块后的语句。\",\"⚠️注意：\",\"若 catch 语句块和 finall 语句块里同时存在 return 语句时，代码 try 语句块中的 return 语句会被忽略。这是因为 try 语句中的 return 返回值会先被暂存在一个本地变量中，当执行到 finally 语句中的 return 之后，这个本地变量的值就变为了 finally 语句中的 return 返回值。 另外， 如果 try 块中抛出了一个异常，并且 finally 块中又有一个 return 语句，那么这个 return 语句会阻止异常的传播，导致异常被静默地吞噬掉，外部调用者将无法感知到异常的发生。 所以不要在 finally 语句块中使用 return ！\",\"在某些情况下，finally 中的代码不会被执行。在以下 4 种特殊情况下，finally 块的代码不会被执行：\",\"程序所在的线程死亡。\",\"关闭 CPU。\",\"在前面的代码中用了 System.exit() 退出程序。\",\"finally 语句块中发生了异常。\"]},\"61\":{\"h\":\"\",\"t\":[\"try 块中引起异常，异常代码之后的语句不再执行，直接执行 finally 语句。try 块没有引发异常，则执行完 try 块就执行 finally 语句。\",\"try-finally 可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如 IO 流中执行完相应操作后，关闭相应资源；使用 Lock 对象保证线程同步，通过 finally 可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。\",\"//以 Lock 加锁为例，演示 try - finally ReentrantLock lock = new ReentrantLock(); try { //需要加锁的代码 } finally { lock.unlock(); //保证锁一定被释放 }\"]},\"62\":{\"h\":\"泛型\",\"t\":[\"在 Java 中，泛型 (Generics) 是 JDK 5 引入的一项强大特性，它允许我们在定义类、接口和方法时，使用类型参数 (type parameters)。泛型的核心目的是为了在编译时捕获类型错误，提高代码的类型安全性和可读性，并消除强制类型转换的麻烦。\",\"编译器可以对泛型参数进行检测，并且通过泛型参数可以指定传入的对象类型。\",\"比如 ArrayList<String> lists = new ArrayList<String>() 这行代码就指明了该 ArrayList 对象只能传入 String 对象，如果传入其他类型的对象就会报错。\",\"ArrayList<E> extends AbstractList<E>\",\"并且，原生 List 返回类型是 Object ，需要手动转换类型才能使用，使用泛型后编译器自动转换。\"]},\"63\":{\"h\":\"泛型参数\",\"t\":[\"泛型使用尖括号 <> 来定义类型参数，通常使用单个大写字母表示，如 E (Element), T (Type), K (Key), V (Value) 等。\"]},\"64\":{\"h\":\"泛型类\",\"t\":[\"我们可以定义一个类，使其操作的某些类型在实例化时才确定。\",\"// 泛型类，T 是类型参数 public class Box<T> { private T content; // content 的类型由 T 决定 public Box(T content) { this.content = content; } public T getContent() { return content; } public void setContent(T content) { this.content = content; } public static void main(String[] args) { // 实例化时指定具体的类型参数 Box<String> stringBox = new Box<>(\\\"Hello Generics\\\"); String s = stringBox.getContent(); // 无需强制类型转换 System.out.println(s); Box<Integer> integerBox = new Box<>(123); Integer i = integerBox.getContent(); // 无需强制类型转换 System.out.println(i); // integerBox.setContent(\\\"abc\\\"); // 编译错误！类型不匹配 } }\",\"输出如下：\",\"Hello Generics 123\"]},\"65\":{\"h\":\"泛型接口\",\"t\":[\"接口也可以使用泛型，定义了操作类型的规范。\",\"public interface Pair<K, V> { K getKey(); V getValue(); } public class OrderedPair<K, V> implements Pair<K, V> { private K key; private V value; public OrderedPair(K key, V value) { this.key = key; this.value = value; } @Override public K getKey() { return key; } @Override public V getValue() { return value; } public static void main(String[] args) { Pair<String, Integer> p1 = new OrderedPair<>(\\\"MyAge\\\", 30); System.out.println(p1.getKey() + \\\": \\\" + p1.getValue()); } }\",\"输出如下：\",\"MyAge: 30\"]},\"66\":{\"h\":\"泛型方法\",\"t\":[\"方法也可以独立于其所在的类而具有泛型能力。\",\"public class GenericMethodDemo { // 泛型方法，T 是方法级别的类型参数 public static <T> void printArray(T[] inputArray) { for (T element : inputArray) { System.out.printf(\\\"%s \\\", element); } System.out.println(); } // 另一个泛型方法，返回类型为 T public static <T> T getFirstElement(T[] array) { if (array != null && array.length > 0) { return array[0]; } return null; } public static void main(String[] args) { Integer[] intArray = { 1, 2, 3, 4, 5 }; Double[] doubleArray = { 1.1, 2.2, 3.3, 4.4 }; String[] stringArray = { \\\"Hello\\\", \\\"World\\\", \\\"Java\\\" }; printArray(intArray); printArray(doubleArray); printArray(stringArray); System.out.println(\\\"First Integer: \\\" + getFirstElement(intArray)); System.out.println(\\\"First String: \\\" + getFirstElement(stringArray)); } }\",\"输出如下：\",\"1 2 3 4 5 1.1 2.2 3.3 4.4 Hello World Java First Integer: 1 First String: Hello\",\"⚠️注意：\",\"泛型方法的类型参数 <T> 放在返回类型之前。\",\"public static <T> void printArray(T[] inputArray) 一般被称为静态泛型方法;在 Java 中泛型只是一个占位符，必须在传递类型后才能使用。类在实例化时才能真正的传递类型参数，由于静态方法的加载先于类的实例化，也就是说类中的泛型还没有传递真正的类型参数，静态的方法的加载就已经完成了，所以静态泛型方法是没有办法使用类上声明的泛型的。只能使用自己声明的 <T>\"]},\"67\":{\"h\":\"类型通配符\",\"t\":[\"泛型通配符 ? 用于在方法签名中，表示一种不确定的类型，但可以对其进行限制。\"]},\"68\":{\"h\":\"上界通配符\",\"t\":[\"上界通配符 (Upper Bounde Wildcard)，顾名思义，存在一个最上级的界限，即指定一个最高级别的父类，它表示对于该上界类型以及其子类都适用，类型可以是 T 或 T 的任何子类。用于限制泛型类型为某个类的子类或其自身。主要用于读取(get) 数据。\",\"public static void printList(List<? extends Number> list) { // 可以从列表中读取 Number 或其子类的对象 for (Number n : list) { System.out.println(n); } // list.add(new Integer(10)); // 编译错误！不能往List中添加元素（除了null） // 因为不知道确切的子类型是什么 } public static void main(String[] args) { List<Integer> integers = Arrays.asList(1, 2, 3); List<Double> doubles = Arrays.asList(1.1, 2.2, 3.3); printList(integers); // 接收 Integer 列表 printList(doubles); // 接收 Double 列表 }\",\"输出如下：\",\"1 2 3 1.1 2.2 3.3\",\"我们可以从列表中安全地读取 Number 对象，因为任何 Number 的子类都可以向上转型为 Number。但不能往里面添加元素（除了 null），因为不知道确切的子类型是什么。\",\"添加元素运行报错\"]},\"69\":{\"h\":\"下界通配符\",\"t\":[\"与上界通配符相反，下界通配符 (Lower Bound Wildcard)，顾名思义，存在一个最低级的界限，即指定一个最低级别的子类，它表示对于该下界类型以及其父类都适用，类型可以是 T 或 T 的任何超类（父类）。用于限制泛型类型为某个类的超类或其自身。主要用于写入 (put) 数据。\",\"public static void addNumbers(List<? super Number> list) { // 可以向列表中添加 Number 或 Number 的子类（如果有的话） list.add(10); list.add(20); list.add(new Integer(30)); // Number x = list.get(0); // 编译错误！无法保证取出的具体类型，只能保证是 Object public static void main(String[] args) { List<Number> numbers = new ArrayList<>(); List<Object> objects = new ArrayList<>(); addNumbers(numbers); // 接收 Number 列表 addNumbers(objects); // 接收 Object 列表 System.out.println(numbers); System.out.println(objects); }\",\"输出如下：\",\"[10, 20, 30] [10, 20, 30]\",\"我们可以安全地往列表中添加 Integer 对象或其子类（如果有的话），因为 Integer 及其子类都可以向上转型为 Integer 的任何超类。但不能安全地从中读取，因为只知道它至少是 Integer 的一个超类，具体是哪个父类不确定。\"]},\"70\":{\"h\":\"无界通配符\",\"t\":[\"表示类型可以是任何类型。等同于 <? extends Object>。通常用于：\",\"不关心列表中元素的具体类型时。\",\"只读取元素而不修改它们时。\",\"当需要与传统非泛型代码兼容时。\",\"public static void printUnknownList(List<?> list) { for (Object o : list) { // 只能按 Object 类型处理 System.out.println(o); } // list.add(\\\"something\\\"); // 编译错误！不能添加元素（除了null） }\"]},\"71\":{\"h\":\"PECS 原则\",\"t\":[\"Producer Extends, Consumer Super\",\"关于何时使用 extends 和 super 的助记符：\",\"Producer Extends： 如果是生产（提供/读取）数据，使用 extends（上界通配符）。\",\"Consumer Super： 如果是消费（接收/写入）数据，使用 super（下界通配符）。\"]},\"72\":{\"h\":\"泛型擦除\",\"t\":[\"Java 泛型在编译时通过类型擦除来实现。在编译后的字节码中，所有的泛型类型参数都会被替换成它们的上界（通常是 Object）。\",\"List<String> 在运行时会变成 List。\",\"T 会被替换为 Object。\",\"T extends Number 会被替换为 Number。\"]},\"73\":{\"h\":\"修饰符\",\"t\":[\"Java 的修饰符主要分为两大类：\",\"访问控制修饰符（Access Control Modifiers）：用于控制类、方法和字段的可见性。\",\"非访问控制修饰符（Non-Access Modifiers）：用于指定程序元素的特殊行为和特性。\"]},\"74\":{\"h\":\"访问控制修饰符\"},\"75\":{\"h\":\"\",\"t\":[\"公开的，被 public 修饰的类、方法或字段，可以在任何包中的任何类被访问。\"]},\"76\":{\"h\":\"\",\"t\":[\"受保护的，不能修饰类（除了内部类），被 protected 修饰的方法或字段，可以在同一个包内以及不同包的子类中被访问。\"]},\"77\":{\"h\":\"\",\"t\":[\"包访问权限，如果不指定任何访问修饰符，那么它就是 default 访问级别，默认访问模式下的类、方法和变量可以被同一包中的其他类访问。\"]},\"78\":{\"h\":\"\",\"t\":[\"私有的，不能修饰类（除了内部类），被 private 修饰的方法或字段，只能在声明它们的类内部被访问,通常用于封装类的内部实现细节，对外提供公共方法（getter/setter）进行访问。\"]},\"79\":{\"h\":\"非访问控制修饰符\"},\"80\":{\"h\":\"\",\"t\":[\"静态的，static 成员（字段或方法）属于类本身，而不是类的任何特定实例。\",\"静态变量（类变量）：定义在类中的变量，如果用 static 修饰，则该变量是所有对象共享的。\",\"public class MyClass { public static int staticVar = 0; public void incrementStaticVar() { staticVar++; } } public class Main { public static void main(String[] args) { MyClass obj1 = new MyClass(); MyClass obj2 = new MyClass(); obj1.incrementStaticVar(); obj2.incrementStaticVar(); System.out.println(MyClass.staticVar); // 输出：2 } }\",\"静态方法：静态方法可以直接通过类名调用，不需要创建类的实例。静态方法不能访问实例变量和实例方法，只能访问静态变量和静态方法。\",\"public class MyClass { public static void staticMethod() { System.out.println(\\\"This is a static method.\\\"); } } public class Main { public static void main(String[] args) { MyClass.staticMethod(); // 调用静态方法 } }\",\"静态代码块：静态代码块用于初始化静态变量，在类加载时执行。\",\"public class MyClass { static { System.out.println(\\\"Static block executed.\\\"); } } public class Main { public static void main(String[] args) { MyClass obj = new MyClass(); // 静态块在类加载时执行 } }\"]},\"81\":{\"h\":\"\",\"t\":[\"最终的，final 修饰符用于表示不可改变的常量、不可继承的类或不可重写的方法。\",\"final 变量：使用 final 修饰的变量不可改变，必须在声明时或通过构造方法初始化。\",\"public class MyClass { public final int finalVar = 10; public void changeFinalVar() { // finalVar = 20; // 错误：无法改变 final 变量 } }\",\"final 方法：使用 final 修饰的方法不能被子类重写。\",\"public class Parent { public final void finalMethod() { System.out.println(\\\"This method cannot be overridden.\\\"); } } public class Child extends Parent { // public void finalMethod() { // 错误：无法重写 final 方法 // } }\",\"final 类：使用 final 修饰的类不能被继承。\",\"public final class MyClass { // Class implementation } // public class SubClass extends MyClass { // 错误：无法继承 final 类 // }\"]},\"82\":{\"h\":\"\",\"t\":[\"抽象的，用于声明抽象类和抽象方法。\",\"abstract 类：不能被直接实例化。它通常包含抽象方法，需要子类去实现。\",\"abstract 方法：只有方法签名，没有方法体。子类必须实现所有继承的抽象方法，除非子类也是抽象类。\"]},\"83\":{\"h\":\"\",\"t\":[\"同步的，用于方法和代码块，确保在多线程环境下，同一时间只有一个线程可以访问该方法或代码块，用于实现线程安全。\"]},\"84\":{\"h\":\"\",\"t\":[\"易变的，用于字段。它确保多线程环境下，对该字段的修改总是被立即写入主内存，并且每次读取都从主内存中获取最新值，防止编译器或处理器进行缓存优化，从而保证了可见性。\"]},\"85\":{\"h\":\"\",\"t\":[\"瞬态的，用于字段，当一个对象被序列化（转换为字节流，如保存到文件或网络传输）时，被 transient 修饰的字段将不会被序列化。反序列化时，这些字段将恢复为它们的默认值（例如，对象类型为 null，基本类型为 0）。\"]},\"86\":{\"h\":\"\",\"t\":[\"本地的，用于方法。表示该方法是用非 Java 语言（如 C/C++）实现的，并通过 Java 本地接口（JNI）与 Java 代码进行交互。\"]},\"87\":{\"h\":\"可变长参数\",\"t\":[\"...，可变长参数，它允许我们在方法中接受不定数量的同类型参数。这个特性在 Java 5 中引入，主要用于简化需要接受多个参数但数量不定的情况，例如打印日志、格式化字符串或处理一系列的数值。\",\"⚠️注意：\",\"一个方法中只能有一个可变长参数：这是因为编译器需要知道哪些参数是可变的。如果允许有多个，编译器将无法确定如何匹配传递的参数。\",\"// 错误示例：不能有两个可变长参数 // public void calculate(int... nums, String... names) {}\",\"可变长参数必须是参数列表的最后一个参数：这是为了避免歧义。如果可变长参数后面还有其他参数，编译器将无法确定哪些参数属于可变长部分，哪些属于后面的常规参数。\",\"// 正确示例：可变长参数放在最后 public void doSomething(String prefix, int... numbers) { /* ... */ } // 错误示例：可变长参数后面还有其他参数 // public void doSomethingElse(int... numbers, String suffix) { /* ... */ }\",\"可变长参数在内部被当作数组处理：尽管我们在调用方法时可以传递一系列独立的参数，但在方法内部，这些参数会被自动封装成一个对应类型的数组。我们可以使用数组的所有操作（如 length 属性、循环遍历等）。\"]},\"88\":{\"h\":\"反射\",\"t\":[\"Java 的反射 (Reflection) 允许 Java 程序在运行时检查、操作类、接口、字段和方法。\",\"反射赋予了我们在运行时分析类以及执行类中方法的能力，我们可以在不知道它们的具体类型或名称的情况下，动态地创建对象、调用方法、访问或修改字段，\",\"反射是 Java 动态性的体现，是许多高级框架（如 Spring、Hibernate、JUnit 等）和工具（如 IDE）能够正常工作的基础。\",\"反射功能主要通过 java.lang.reflect 包中的类来实现。\"]},\"89\":{\"h\":\"获取 对象\",\"t\":[\"一切反射操作都始于获取一个类的 Class 对象，有三种主要方式：\",\"如果知道类的全限定名，可以使用 Class.forName(String className) 去获取：\",\"try { Class<?> myClass = Class.forName(\\\"java.lang.String\\\"); System.out.println(\\\"Class Name: \\\" + myClass.getName()); } catch (ClassNotFoundException e) { e.printStackTrace(); }\",\"如果编译时知道具体的类，可以使用这种方式：\",\"Class<String> stringClass = String.class; System.out.println(\\\"Class Name: \\\" + stringClass.getName());\",\"如果已经有了某个类的实例对象，可以通过它获取其 Class 对象：\",\"String s = \\\"Hello\\\"; Class<?> stringClassFromObject = s.getClass(); System.out.println(\\\"Class Name: \\\" + stringClassFromObject.getName());\",\"如果知道类的全限定名，可以通过类加载器去获取：\",\"try { Class<?> myClass = ClassLoader.getSystemClassLoader().loadClass(\\\"java.lang.String\\\"); System.out.println(\\\"Class Name: \\\" + myClass.getName()); } catch (ClassNotFoundException e) { e.printStackTrace(); }\",\"以上输出均为：\",\"Class Name: java.lang.String\"]},\"90\":{\"h\":\"创建实例对象\",\"t\":[\"有了 Class 对象后，我们可以创建该类的实例：\",\"假设有以下 Person 类：\",\"public class Person { private String name; // 私有字段 private Integer age; // 私有字段 public Integer height; // 公有字段 // 无参构造器 public Person() { name = \\\"zhangsan\\\"; age = 18; height = 180; } // 有参构造器 public Person(String name, Integer age, Integer height) { this.name = name; this.age = age; this.height = height; } // 公共方法 public void publicMethod() { System.out.println(\\\"publicMethod\\\"); } public String saySomething(String word) { return word; } // 私有方法 private void privateMethod() { System.out.println(\\\"privateMethod\\\"); } @Override public String toString() { return \\\"Person{\\\" + \\\"name='\\\" + name + '\\\\'' + \\\", age=\\\" + age + \\\", height=\\\" + height + '}'; } }\",\"Class.newInstance()： 它只能调用无参构造器，并且如果构造器是私有的或抛出异常，会直接抛出。\",\"try { Class<?> personClass = Class.forName(\\\"com.shawn.Person\\\"); // 适用于旧代码（Java 9+ 不推荐使用）或明确知道有无参公共构造器的情况 Person person = (Person) personClass.newInstance(); System.out.println(person); } catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) { e.printStackTrace(); }\",\"输出如下，可以发现调用的是 Person 类的无参构造器:\",\"Person{name='zhangsan', age=18, height=180}\",\"Constructor.newInstance(Object... initargs)： 通过获取 Constructor 对象来创建实例，可以调用任何访问修饰符的构造器（需要设置可访问性）。\",\"try { Class<?> personClass = Class.forName(\\\"com.shawn.Person\\\"); // 获取无参构造器 Constructor<?> constructor = personClass.getConstructor(); Person person1 = (Person) constructor.newInstance(); // 获取带参数的构造器 Constructor<?> constructorWithArgs = personClass.getConstructor(String.class, Integer.class, Integer.class); Person person2 = (Person) constructorWithArgs.newInstance(\\\"Alice\\\", 18, 168); System.out.println(\\\"person1:\\\" + person1); // 打印 Person 对象信息 System.out.println(\\\"person2:\\\" + person2); // 打印 Person 对象信息 } catch (Exception e) { e.printStackTrace(); }\",\"输出如下：\",\"person1:Person{name='zhangsan', age=18, height=180} person2:Person{name='Alice', age=18, height=168}\"]},\"91\":{\"h\":\"获取和操作字段\",\"t\":[\"我们可以通过反射获取类的字段信息，并对其进行读写操作。\",\"try { Class<?> personClass = Class.forName(\\\"com.shawn.Person\\\"); Person person = (Person) personClass.getConstructor().newInstance(); // 创建一个 Person 实例 // Field nameField = personClass.getField(\\\"name\\\"); // 如果 name 是private，会抛异常 // 获取 Person 类所有的公共字段 (包括继承的公共字段) Field[] fields = personClass.getFields(); System.out.println(\\\"Person 类的所有公有字段如下：\\\"); for (Field field : fields) { System.out.println(field.getName()); } System.out.println(\\\"===========================\\\"); // 获取 Person 类所有声明的字段 (包括私有、保护、默认访问权限，但不包括继承的) Field[] declaredFields = personClass.getDeclaredFields(); System.out.println(\\\"Person 类的所有字段如下：\\\"); for (Field declaredField : declaredFields) { System.out.println(declaredField.getName()); } System.out.println(\\\"===========================\\\"); // 获取 Person 的 name 私有字段 Field nameField = personClass.getDeclaredField(\\\"name\\\"); nameField.setAccessible(true); // 允许访问私有字段 // 设置字段的值 nameField.set(person, \\\"Bob\\\"); // 获取字段的值 String name = (String) nameField.get(person); System.out.println(\\\"Name: \\\" + name); } catch (Exception e) { e.printStackTrace(); }\",\"输出如下：\",\"Person 类的所有公有字段如下： height =========================== Person 类的所有字段如下： name age height =========================== Name: Bob\",\"getFields()：返回所有公共字段（包括继承的）。\",\"getDeclaredFields()：返回类自身声明的所有字段（包括私有，不包括继承的）。\",\"setAccessible(true)：可以突破 private 访问限制，但会带来安全风险和性能下降。\"]},\"92\":{\"h\":\"获取和调用方法\",\"t\":[\"我们可以通过反射获取类的方法信息，并动态调用它们。\",\"try { Class<?> personClass = Class.forName(\\\"com.shawn.Person\\\"); Person person = (Person)personClass.getConstructor(String.class, Integer.clasInteger.class).newInstance(\\\"Charlie\\\", 28,185); // 获取 Person 类的所有公有方法（包括继承的） Method[] methods = personClass.getMethods(); System.out.println(\\\"Person 类的所有公有方法如下：\\\"); for (Method method : methods) { System.out.println(method.getName()); } System.out.println(\\\"===========================\\\"); // getMethod 可以获取公共方法，包括继承的，getMethod (方法名, 参数类型列表) Method saySomethingMethod = personClass.getMethod(\\\"saySomething\\\", String.class); // 调用方法 (invoke(对象实例, 参数列表)) String result = (String) saySomethingMethod.invoke(person, \\\"Greeting\\\"); System.out.println(\\\"Method result: \\\" + result); System.out.println(\\\"===========================\\\"); // 获取 Person 类的私有方法 (getDeclaredMethod) Method privateMethod = personClass.getDeclaredMethod(\\\"privateMethod\\\"); privateMethod.setAccessible(true); // 允许访问私有方法 privateMethod.invoke(person); // 执行私有方法 } catch (Exception e) { e.printStackTrace(); }\",\"输出如下：\",\"Person 类的所有公有方法如下： toString saySomething publicMethod wait wait wait equals hashCode getClass notify notifyAll =========================== Method result: Greeting =========================== privateMethod\",\"getMethods()：返回所有公共方法（包括继承的）。\",\"getDeclaredMethods()：返回类自身声明的所有方法（包括私有，不包括继承的）。\"]},\"93\":{\"h\":\"String\"},\"94\":{\"h\":\"不可变性\",\"t\":[\"Java 中的 String 代表了不可变的字符序列，下面是 String 类声明的源码(Java 8 版本)：\",\"public final class String implements java.io.Serializable, Comparable<String>, CharSequence { /** The value is used for character storage. */ private final char value[]; /** Cache the hash code for the string */ private int hash; // Default to 0 ... ... ... }\",\"1、String 类是 final 的，这意味着它不能被子类继承\",\"2、String 类使用 private 和 final 关键字修饰的字符数组来保存字符串，并且 String 类没有提供任何可以修改 value 数组内容的公共方法，这意味着 String 对象一旦被创建，value 引用本身以及它的值不能被改变，value 变量的引用永远指向同一个字符串数组，并且外部代码无法直接访问或修改 value 数组，所有看似“修改”字符串的方法（如 substring(), replace(), concat() 等），实际上都是创建并返回一个新的 String 对象，而原始对象的内容保持不变。以上这种手段确保了 String 对象的完全不可变性。\",\"String s = \\\"Hello\\\"; System.out.println(\\\"s的地址:\\\" + System.identityHashCode(s)); s = s + \\\" World\\\"; System.out.println(\\\"s的地址:\\\" + System.identityHashCode(s)); // s 的地址会发生变化 System.out.println(s);\",\"输出结果如下：\",\"s的地址:356573597 s的地址:1735600054 Hello World\"]},\"95\":{\"h\":\"JDK 9 的改进\",\"t\":[\"在 JDK 9 及后面的版本中，Java 的 String 类的内部实现确实从 char[] value 变成了 byte[] value，并且新增了一个 byte coder 字段。这项重要的改进被称为 \\\"Compact Strings\\\" (紧凑字符串)，其主要目的是为了节省内存空间。\",\"下面是 JDK 11 版本中 String 类的源码，注意和 JDK 8 版本的不同：\",\"public final class String implements java.io.Serializable, Comparable<String>, CharSequence { @Stable private final byte[] value; private final byte coder; private int hash; }\",\"在 JDK 9 之前，Java 的 char 类型是 16 位的，这意味着每个字符占用 2 个字节（因为它基于 UTF-16 编码）。然而，在实际应用中，大部分字符串（尤其是在西方语言环境中）只包含 ISO-8859-1 (Latin-1) 字符，这些字符只需要 8 位（1 个字节）就能表示。JDK 官方也说了绝大部分字符串对象只包含 Latin-1 可表示的字符。\",\"JDK 的官方说明\",\"这意味着，对于只包含 Latin-1 字符的字符串，旧的 char[] 实现会浪费一半的内存空间，因为它为每个字符都分配了 2 个字节，即使只需要 1 个字节。考虑到 String 对象在 Java 应用程序中是使用最频繁的对象之一，这种内存浪费是非常巨大的。\",\"为了解决这个问题，JDK 9 引入了 Compact Strings 特性：\",\"String 类的内部字符数组类型从 char[] 变为了 byte[]。\",\"新增了一个 byte coder 字段来记录字符串的编码方式。这个字段有两个可能的值：\",\"String.LATIN1 (值为 0)：表示字符串中的所有字符都可以用 ISO-8859-1 (Latin-1) 编码表示，每个字符占用 1 个字节。\",\"String.UTF16 (值为 1)：表示字符串中包含需要 UTF-16 编码的字符（比如中文字符、表情符号等），每个字符占用 2 个字节。\",\"当创建一个新的 String 对象时，JVM 会检查字符串中的所有字符：\",\"如果所有字符都在 Latin-1 范围内（即它们的 Unicode 码点小于等于 255），那么字符串就会以 Latin-1 编码存储在 byte[] 数组中，每个字符占用 1 字节。此时 coder 字段设置为 LATIN1。\",\"如果字符串中包含任何 Latin-1 范围之外的字符，那么字符串就会以 UTF-16 编码存储在 byte[] 数组中，每个字符占用 2 字节（即 char 数组的等价形式）。此时 coder 字段设置为 UTF16。\",\"这样改进的主要目的就是为了节省字符串占用的内存空间。内存占用减少带来的另外一个好处，就是 JVM GC 的次数也会减少，另外，这个改动是 JVM 内部的实现细节，对于 Java 应用程序的开发者而言是透明的。我们仍然像以前一样使用 String 类，无需修改代码。\"]},\"96\":{\"h\":\"字符串常量池\",\"t\":[\"Java 虚拟机（JVM）为了优化性能，维护了一个特殊的内存区域，称为字符串常量池。\",\"当我们使用字符串字面量创建 String 对象时，JVM 会首先在字符串常量池中查找是否已经存在内容相同的字符串。\",\"如果存在，则直接返回该字符串在常量池中的引用，而不会创建新的对象。\",\"如果不存在，则在常量池中创建这个新的字符串对象，并返回其引用。\",\"当我们使用 new String(\\\"hello\\\") 创建对象时，总会在堆内存中创建一个新的 String 对象。如果字面量 \\\"hello\\\" 不在常量池中，JVM 还会把它放入常量池。\",\"String str1 = \\\"hello\\\"; // 在常量池中创建 \\\"hello\\\" (如果不存在)，str1 指向它 String str2 = \\\"hello\\\"; // str2 直接指向常量池中已有的 \\\"hello\\\" System.out.println(str1 == str2); // true (引用相同，因为指向同一个常量池对象) String str3 = new String(\\\"world\\\"); // 在堆中创建 \\\"world\\\" 对象，str3 指向它 // 如果常量池中没有\\\"world\\\"，也会在常量池中创建 String str4 = new String(\\\"world\\\"); // 在堆中创建另一个新的 \\\"world\\\" 对象，str4 指向它 System.out.println(str3 == str4); // false (引用不同，是两个不同的堆对象) System.out.println(str3.equals(str4)); // true (内容相同) String str5 = \\\"world\\\"; // str5 指向常量池中的 \\\"world\\\" System.out.println(str3 == str5); // false (一个在堆，一个在常量池) System.out.println(str3.equals(str5)); // true (内容相同)\",\"字符串常量池\",\"字符串常量池是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。\"]},\"97\":{\"h\":\"方法\",\"t\":[\"String 类的 itern() 方法可以强制将堆中的 String 对象添加到字符串常量池中。如果常量池中已经存在内容相同的字符串，则返回常量池中该字符串的引用。\",\"String s1 = new String(\\\"abc\\\"); // 在堆中创建对象 String s2 = \\\"abc\\\"; // 在常量池中创建或获取对象 System.out.println(s1 == s2); // false String s3 = s1.intern(); // s3 会指向常量池中的\\\"abc\\\" String s4 = s2.intern(); System.out.println(s3 == s2); // true System.out.println(s3 == s1); // false (s1 依然是堆中的那个对象)\"]},\"98\":{\"h\":\"/\",\"t\":[\"由于 String 的不可变性，频繁地对字符串进行修改（如拼接操作）会创建大量的中间 String 对象，这会消耗额外的内存和 CPU 资源，影响性能。因此，Java 提供了两个可变的字符序列类 StringBuffer 和 StringBuilder 来解决这个问题。\",\"字符序列类\",\"线程安全性\",\"性能\",\"StringBuffer\",\"线程安全，它的所有公共方法都已同步（synchronized），因此在多线程环境下是安全的。\",\"相对于 String 的频繁拼接，StringBuffer 效率更高，但因为同步开销，比 StringBuilder 略慢。\",\"StringBuilder\",\"非线程安全，它的方法没有同步，因此在多线程环境下不安全。\",\"在单线程环境下，StringBuilder 的性能优于 StringBuffer 和 String 的拼接。\"]},\"99\":{\"h\":\"常用方法\",\"t\":[\"String 类提供了大量用于操作字符串的方法：\",\"方法\",\"作用\",\"length()\",\"返回字符串长度\",\"isEmpty()\",\"判断字符串是否为空\",\"charAt(int index)\",\"返回指定索引处的字符\",\"substring(int beginIndex) / substring(int beginIndex, int endIndex)\",\"截取子字符串\",\"indexOf(String str) / lastIndexOf(String str)\",\"查找子字符串第一次/最后一次出现的位置\",\"contains(CharSequence s)\",\"判断是否包含子字符串\",\"startsWith(String prefix) / endsWith(String suffix)\",\"判断是否以指定前缀/后缀开头或结尾\",\"replace(char oldChar, char newChar) / replace(CharSequence target, CharSequence replacement)\",\"替换字符或子字符串\",\"trim()\",\"去除字符串两端的空白字符\",\"toUpperCase() / toLowerCase()\",\"转换为大写/小写\",\"split(String regex)\",\"根据正则表达式拆分字符串\",\"equals(Object anObject)\",\"比较字符串内容是否相等\",\"equalsIgnoreCase(String anotherString)\",\"忽略大小写比较内容\",\"compareTo(String anotherString)\",\"按字典顺序比较字符串\",\"getBytes() / toCharArray()\",\"转换为字节数组/字符数组\",\"valueOf()\",\"将其他数据类型转换为 String\"]},\"100\":{\"h\":\"编译优化\",\"t\":[\"对于编译期可以确定值的字符串，也就是常量字符串 ，JVM 会将其存入字符串常量池。并且，字符串常量拼接得到的字符串常量在编译阶段就已经被存放字符串常量池\",\"在编译过程中，Javac 编译器会进行一个叫做常量折叠(Constant Folding)的代码优化。《深入理解 Java 虚拟机》中有介绍到：\",\"常量折叠\",\"常量折叠会把常量表达式的值求出来作为常量嵌在最终生成的代码中，这是 Javac 编译器会对源代码做的极少量优化措施之一(代码优化几乎都在即时编译器中进行)。\",\"并不是所有的常量都会进行折叠，只有编译器在程序编译期就可以确定值的常量才可以：\",\"基本数据类型( byte、boolean、short、char、int、float、long、double)以及字符串常量\",\"final 修饰的基本数据类型和字符串变量\",\"字符串通过 “+” 拼接得到的字符串、基本数据类型之间算数运算（加减乘除）、基本数据类型的位运算（<<、>>、>>> ）\",\"final String s1 = \\\"Hello\\\"; final String s2 = \\\" World\\\"; String str1 = \\\"Hello World\\\"; String str2 = \\\"Hello\\\" + \\\" World\\\"; // 编译器会优化成 String str2 = \\\"Hello World\\\"; System.out.println(str1 == str2); // true，指向常量池中同一个字符串常量 String str3 = s1 + s2; // 字符串使用 final 关键字声明之后，可以让编译器当做常量来处理，其效果就相当于访问常量 System.out.println(str1 == str3); // true\",\"如果编译器在运行时才能知道其确切值的话，就无法对其优化，比如以下实例代码，str2 在运行时才能确定其值：\",\"final String str1 = \\\"str\\\"; final String str2 = getStr(); String c = \\\"str\\\" + \\\"ing\\\"; // 常量池中的对象 String d = str1 + str2; // 在堆上创建的新的对象 System.out.println(c == d); // false public static String getStr() { return \\\"ing\\\"; }\",\"无 final 修饰的引用的值在程序编译期是无法确定的，编译器也无法对其进行优化。\",\"对象引用和 “+” 的字符串拼接方式，实际上是通过 StringBuilder 调用 append() 方法实现的，拼接完成之后调用 toString() 得到一个 String 对象 。\",\"String s1 = \\\"Hello\\\"; String s2 = \\\" World\\\"; String s3 = \\\"Hello World\\\"; String str = s1 + s2; // str 是堆上的一个字符串对象 System.out.println(s3 == str); // false\",\"上面的代码对应的字节码如下：\",\"字节码\"]},\"101\":{\"h\":\"Java集合 1\"},\"102\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"103\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"104\":{\"h\":\"Java 集合2\"},\"105\":{\"h\":\"标题 2\",\"t\":[\"这里是内容。\"]},\"106\":{\"h\":\"标题 3\",\"t\":[\"这里是内容。\"]},\"107\":{\"h\":\"volatile\",\"t\":[\"在 Java 中，volatile 关键字是一个非常重要的非访问控制修饰符，它用于修饰类的成员变量。在多线程环境中，volatile 可以保证变量的可见性，如果我们将变量声明为 volatile ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。\",\"在 JDK 5 之后 volatile 关键字还具备一定的有序性（Ordering）。\",\"在了解 volatile 实现原理之前，我们先来看下与其实现原理相关的 CPU 术语与说明，下图摘自 《Java 并发编程的艺术》：\",\"相关 CPU 术语与说明\"]},\"108\":{\"h\":\"可见性\",\"t\":[\"在多核处理器架构下，每个线程在执行时为了提高效率，通常会从主内存 （Main Memory）中读取共享变量的副本到自己的工作内存 （Working Memory) 或 CPU 缓存中。线程对变量的所有操作，都是在工作内存中进行的，操作完成后再择机写入主内存。\",\"内存模型的简单结构如下图所示：\",\"线程工作内存和主内存\",\"这就带来了一个问题：如果一个线程修改了变量的值，但这个修改还没有被写回主内存，其他线程从自己的工作内存中读取的变量值依然是旧的，这就是可见性问题。\",\"volatile 关键字就是用来解决这个问题的。当一个变量被 volatile 修饰后：\",\"对 volatile 变量的写入操作：会强制将修改后的值立即写回主内存。\",\"对 volatile 变量的读取操作：会强制从主内存中读取最新的值，而不是从线程的本地缓存中读取。\"]},\"109\":{\"h\":\"原理\",\"t\":[\"在 Java 中，对被 volatile 修饰的共享变量进行写操作时，JVM 会生成带 lock 前缀的 CPU 指令，lock 指令会触发缓存一致性协议（比如 MESI 协议），将当前处理器缓存行的数据回写到系统内存并使其他 CPU 中缓存的该变量副本失效。\",\"缓存一致性协议工作原理：处理器通过总线嗅探 （bus snooping） 监听其他处理器对内存的读写，当检测到其他处理器修改了自己缓存行对应的内存地址时，会将该缓存行标记为无效（Invalid），下次访问时会强制从内存重新读取最新数据。\",\"早期的 Intel486 和 Pentium 会直接在总线上发出 LOCK# 信号，锁住总线，开销大，新的处理器（ P6 及以后）通常是锁缓存行（缓存锁定）并写回内存，然后利用缓存一致性协议来保证修改的原子性和可见性。\",\"感受 volatile 可见性的示例代码如下：\",\"public class VolatileVisibilityDemo { private static volatile boolean ready = false; private static int number = 0; static class ReaderThread extends Thread { @Override public void run() { // 当 ready 变为 true 时，跳出循环 while (!ready) { // 如果 ready 没有被 volatile 修饰，这里的循环可能永远不会停止 // 因为 ReaderThread 无法感知到主线程对其的修改 } System.out.println(\\\"ReaderThread 结束循环，number = \\\" + number); } } public static void main(String[] args) throws InterruptedException { new ReaderThread().start(); Thread.sleep(1000); // 确保 ReaderThread 先运行 number = 42; ready = true; // 写入 volatile 变量，强制刷新到主内存 System.out.println(\\\"主线程已修改了 number 和 ready 的值\\\"); } }\",\"输出如下：\",\"主线程已修改了 number 和 ready 的值 ReaderThread 结束循环，number = 42\",\"如果 ready 变量没有使用 volatile 修饰，主线程即使修改了 ready 的值，ReaderThread 也无法感知到，会因为其 CPU 缓存中的 ready 一直是 false 而陷入死循环，永远无法结束。\",\"ready 变量使用 volatile 修饰后，主线程线程对 ready 的修改会立即被同步到主内存，ReaderThread 会感知到这个变化，从而结束循环。\"]},\"110\":{\"h\":\"有序性\",\"t\":[\"为了提高性能，编译器和处理器可能会对指令进行重排序 （Reordering）。在单线程环境下，这种重排序不会影响最终结果，但在多线程环境下可能会导致意想不到的错误。\",\"volatile 除了保证可见性，还通过在底层插入内存屏障 （Memory Barrier） 来保证有序性，它会禁止特定类型的指令重排序：\",\"当写入一个 volatile 变量时，所有在它之前的普通写操作，都必须先完成，并且将结果刷新到主内存中。\",\"当读取一个 volatile 变量时，所有在它之后的普通读写操作，都必须等到读取 volatile 变量的操作完成后才能执行。\",\"这个特性保证了在 volatile 变量之前执行的操作，对其他线程是可见的。\",\"比如在上面的例子中，number = 42; 的赋值操作，会先于 ready = true; 的写入操作完成，并对 ReaderThread 可见。\"]},\"111\":{\"h\":\"与 的区别\",\"t\":[\"volatile 和 synchronized 都是用于解决多线程问题的，但它们有本质上的区别：\",\"特性\",\"volatile\",\"synchronized\",\"作用\",\"主要解决可见性和有序性问题。\",\"解决可见性、有序性，同时还具备原子性。\",\"原子性\",\"不保证原子性。对 volatile 变量的自增（i++）操作不是原子的，它包含读、改、写三个步骤。\",\"保证原子性。确保同一时间只有一个线程可以执行同步代码块。\",\"锁机制\",\"不提供任何锁机制，不会阻塞线程。\",\"提供锁机制，会阻塞其他线程，开销较大。\",\"适用范围\",\"只能修饰成员变量。\",\"可以修饰方法和代码块。\",\"使用场景\",\"适用于那些一个线程写入、多个线程读取的状态标记或标志量。\",\"适用于需要保证原子操作、数据完整性的复杂业务逻辑。\"]},\"112\":{\"h\":\"的正确使用场景\",\"t\":[\"volatile 关键字非常轻量，它不能替代 synchronized 来保证线程安全。它适用于以下两种情况：\",\"作为状态标志量： 某个线程需要不断检查一个标志位，而另一个线程会改变这个标志位来通知它。\",\"单次写入、多次读取的计数器或状态值： 确保一个线程对某个值的修改能立即被其他线程看到，但这个修改本身不需要是原子性的（例如，volatile int status）。\",\"不能使用 volatile 的场景：\",\"volatile 不适用于需要原子性的复合操作，例如 i++。因为 i++ 操作分为读取、修改、写入三个步骤，而 volatile 只能保证读和写的可见性，无法保证整个复合操作是原子的。如果多个线程同时执行 i++，仍然会发生竞态条件。在这种情况下，我们需要使用 synchronized、AtomicInteger 等原子类来确保线程安全。\",\"⚠️注意：上面 volatile 缓存一致性的原子性是 CPU 层面的，在缓存行锁住期间，别的 CPU 对该地址的读写会被阻塞或失效，这样能保证这个变量的读 - 改 - 写（单次内存操作）是不可被打断的，这种原子性是硬件层面保证单条或少数几条机器指令不可分割。\",\"而 synchronized 的原子性是 JVM 层面的，属于更高层次的并发控制。\",\"举个例子🌰：\",\"假设我们有个共享变量 count，多个线程要做 count++：\",\"volatile 修饰的 count\",\"每次写都会让 CPU 把缓存行回写内存，并让其他 CPU 缓存失效。\",\"但是 count++ 本质是三个步骤： \",\"读 count\",\"加 1\",\"写回 count\",\"如果两个线程同时执行，可能都先读到同一个旧值，然后覆盖彼此的结果（数据竞争）。\",\"因此 volatile 保证可见性，但不能保证这个复合操作的原子性。\",\"synchronized 包裹 count++\",\"一个线程进锁执行完 count++ 整个过程后才释放锁。\",\"另一个线程必须等到锁释放后才能执行，所以结果不会丢失。\",\"因此 synchronized 保证了整个临界区的原子性。\"]},\"113\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"114\":{\"h\":\"Mysql\"},\"115\":{\"h\":\"Database\"},\"116\":{\"h\":\"Redis\"},\"117\":{\"h\":\"Basis\"},\"118\":{\"h\":\"Java\"},\"119\":{\"h\":\"Collection\"},\"120\":{\"h\":\"Concurrent\"}},\"dirtCount\":0,\"index\":[[\"临界\",{\"1\":{\"112\":1}}],[\"彼此\",{\"1\":{\"112\":1}}],[\"少数几条\",{\"1\":{\"112\":1}}],[\"别的\",{\"1\":{\"112\":1}}],[\"竞争\",{\"1\":{\"112\":1}}],[\"竞态\",{\"1\":{\"112\":1}}],[\"竞赛\",{\"1\":{\"3\":3}}],[\"轻量\",{\"1\":{\"112\":1}}],[\"较大\",{\"1\":{\"111\":1}}],[\"阻塞\",{\"1\":{\"111\":2,\"112\":1}}],[\"阻止\",{\"1\":{\"60\":1}}],[\"禁止\",{\"1\":{\"110\":1}}],[\"屏障\",{\"1\":{\"110\":1}}],[\"屏幕\",{\"1\":{\"3\":1}}],[\"插入\",{\"1\":{\"110\":1}}],[\"排序\",{\"1\":{\"110\":3}}],[\"排列\",{\"1\":{\"31\":1}}],[\"死循环\",{\"1\":{\"109\":1}}],[\"死亡\",{\"1\":{\"60\":1}}],[\"程\",{\"1\":{\"109\":2}}],[\"程已\",{\"1\":{\"109\":2}}],[\"程对\",{\"1\":{\"109\":1}}],[\"程序代码\",{\"1\":{\"60\":1}}],[\"程序员\",{\"1\":{\"58\":1}}],[\"程序逻辑\",{\"1\":{\"55\":1}}],[\"程序运行\",{\"1\":{\"43\":1}}],[\"程序\",{\"1\":{\"21\":1,\"24\":2,\"43\":3,\"54\":1,\"55\":4,\"60\":4,\"73\":1,\"88\":1,\"100\":2}}],[\"利用\",{\"1\":{\"109\":1}}],[\"信号\",{\"1\":{\"109\":1}}],[\"信息\",{\"1\":{\"3\":2,\"21\":1,\"22\":4,\"23\":1,\"24\":1,\"25\":1,\"41\":1,\"43\":1,\"49\":8,\"50\":8,\"90\":2,\"91\":1,\"92\":1}}],[\"#\",{\"1\":{\"109\":1}}],[\"嗅探\",{\"1\":{\"109\":1}}],[\"失效\",{\"1\":{\"109\":1,\"112\":2}}],[\"协议\",{\"1\":{\"109\":4}}],[\"择机\",{\"1\":{\"108\":1}}],[\"架构\",{\"1\":{\"108\":1}}],[\"核\",{\"1\":{\"108\":1}}],[\"核心思想\",{\"1\":{\"43\":1}}],[\"核心\",{\"1\":{\"40\":1,\"47\":2,\"62\":1}}],[\"艺术\",{\"1\":{\"107\":1}}],[\"摘自\",{\"1\":{\"107\":1}}],[\"术语\",{\"1\":{\"107\":2}}],[\"几乎\",{\"1\":{\"100\":1}}],[\"几个\",{\"1\":{\"35\":1}}],[\"极少量\",{\"1\":{\"100\":1}}],[\"极广\",{\"1\":{\"29\":1}}],[\"嵌\",{\"1\":{\"100\":1}}],[\"嵌入\",{\"1\":{\"22\":1}}],[\"》\",{\"1\":{\"100\":1,\"107\":1}}],[\"《\",{\"1\":{\"100\":1,\"107\":1}}],[\"折叠\",{\"1\":{\"100\":4}}],[\"叫做\",{\"1\":{\"100\":1}}],[\"第一次\",{\"1\":{\"99\":1}}],[\"第三方\",{\"1\":{\"46\":1}}],[\"截取\",{\"1\":{\"99\":1}}],[\"截断\",{\"1\":{\"31\":1}}],[\"判断\",{\"1\":{\"99\":3}}],[\"优于\",{\"1\":{\"98\":1}}],[\"优化\",{\"0\":{\"100\":1},\"1\":{\"29\":1,\"84\":1,\"96\":1,\"100\":4}}],[\"略慢\",{\"1\":{\"98\":1}}],[\"拼接\",{\"1\":{\"98\":3,\"100\":4}}],[\"拼写错误\",{\"1\":{\"23\":1}}],[\"针对\",{\"1\":{\"96\":1}}],[\"量\",{\"1\":{\"96\":2,\"111\":1,\"112\":1}}],[\"区\",{\"1\":{\"112\":1}}],[\"区域\",{\"1\":{\"96\":2}}],[\"区别\",{\"0\":{\"30\":1,\"47\":1,\"111\":1},\"1\":{\"3\":1,\"30\":1,\"36\":2,\"37\":1,\"49\":1,\"111\":1}}],[\"池是\",{\"1\":{\"96\":1}}],[\"池中\",{\"1\":{\"96\":9,\"97\":5,\"100\":2}}],[\"池\",{\"0\":{\"96\":1},\"1\":{\"96\":5,\"100\":2}}],[\"仍然\",{\"1\":{\"95\":1,\"112\":1}}],[\"仍能\",{\"1\":{\"57\":1}}],[\"透明\",{\"1\":{\"95\":1}}],[\"记录\",{\"1\":{\"95\":1}}],[\"记忆\",{\"1\":{\"3\":1}}],[\"绝大部分\",{\"1\":{\"95\":1}}],[\"西方\",{\"1\":{\"95\":1}}],[\"然而\",{\"1\":{\"95\":1}}],[\"然后\",{\"1\":{\"3\":2,\"25\":1,\"33\":4,\"41\":1,\"109\":1,\"112\":1}}],[\"紧凑\",{\"1\":{\"95\":1}}],[\"紧密\",{\"1\":{\"43\":1,\"46\":1}}],[\"及\",{\"1\":{\"95\":1,\"109\":1}}],[\"及其\",{\"1\":{\"51\":2,\"69\":1}}],[\"永远\",{\"1\":{\"94\":1,\"109\":2}}],[\"版本\",{\"1\":{\"94\":1,\"95\":3}}],[\"gc\",{\"1\":{\"95\":1}}],[\"greeting\",{\"1\":{\"92\":2}}],[\"genericmethoddemo\",{\"1\":{\"66\":1}}],[\"generics\",{\"1\":{\"62\":1,\"64\":2}}],[\"getstr\",{\"1\":{\"100\":2}}],[\"getsystemclassloader\",{\"1\":{\"89\":1}}],[\"getbytes\",{\"1\":{\"99\":1}}],[\"getdeclaredmethods\",{\"1\":{\"92\":1}}],[\"getdeclaredmethod\",{\"1\":{\"92\":2}}],[\"getdeclaredfield\",{\"1\":{\"91\":1}}],[\"getdeclaredfields\",{\"1\":{\"91\":2}}],[\"getfields\",{\"1\":{\"91\":2}}],[\"getfield\",{\"1\":{\"91\":1}}],[\"getfirstelement\",{\"1\":{\"66\":3}}],[\"getvalue\",{\"1\":{\"65\":3}}],[\"getkey\",{\"1\":{\"65\":3}}],[\"getconstructor\",{\"1\":{\"90\":2,\"91\":1,\"92\":1}}],[\"getcontent\",{\"1\":{\"64\":3}}],[\"getclass\",{\"1\":{\"40\":2,\"89\":1,\"92\":1}}],[\"getmessage\",{\"1\":{\"59\":3}}],[\"getmethods\",{\"1\":{\"92\":2}}],[\"getmethod\",{\"1\":{\"25\":1,\"92\":3}}],[\"get\",{\"1\":{\"29\":1,\"68\":1,\"69\":1,\"91\":1}}],[\"getname\",{\"1\":{\"25\":1,\"46\":3,\"89\":4,\"91\":2,\"92\":1}}],[\"getannotation\",{\"1\":{\"25\":2}}],[\"getter\",{\"1\":{\"22\":1,\"78\":1}}],[\"突破\",{\"1\":{\"91\":1}}],[\"突出\",{\"1\":{\"3\":1}}],[\"读\",{\"1\":{\"111\":1,\"112\":3}}],[\"读写\",{\"1\":{\"109\":1,\"112\":1}}],[\"读写操作\",{\"1\":{\"91\":1,\"110\":1}}],[\"读取\",{\"1\":{\"22\":2,\"68\":3,\"69\":1,\"70\":1,\"71\":1,\"84\":1,\"107\":1,\"108\":5,\"109\":1,\"110\":2,\"111\":1,\"112\":2}}],[\"设置\",{\"1\":{\"90\":1,\"91\":1,\"95\":2}}],[\"设计\",{\"1\":{\"40\":1,\"47\":3}}],[\"明确\",{\"1\":{\"90\":1}}],[\"明白\",{\"1\":{\"3\":1}}],[\"旧值\",{\"1\":{\"112\":1}}],[\"旧\",{\"1\":{\"90\":1,\"95\":1,\"108\":1}}],[\"zhangsan\",{\"1\":{\"90\":3}}],[\"均为\",{\"1\":{\"89\":1}}],[\"限定\",{\"1\":{\"89\":2}}],[\"限制\",{\"1\":{\"37\":2,\"67\":1,\"68\":1,\"69\":1,\"91\":1}}],[\"全\",{\"1\":{\"89\":2}}],[\"全新\",{\"1\":{\"50\":2}}],[\"始于\",{\"1\":{\"89\":1}}],[\"始终\",{\"1\":{\"41\":1}}],[\"赋予\",{\"1\":{\"88\":1}}],[\"赋值\",{\"1\":{\"33\":2,\"34\":1,\"47\":1,\"110\":1}}],[\"遍历\",{\"1\":{\"87\":1}}],[\"歧义\",{\"1\":{\"87\":1}}],[\"格式化\",{\"1\":{\"87\":1}}],[\"格外\",{\"1\":{\"3\":1}}],[\"交互\",{\"1\":{\"86\":1}}],[\"瞬态\",{\"1\":{\"85\":1}}],[\"防止\",{\"1\":{\"84\":1}}],[\"入主\",{\"1\":{\"84\":1,\"108\":1}}],[\"写回\",{\"1\":{\"112\":1}}],[\"写\",{\"1\":{\"84\":1,\"108\":3,\"109\":2,\"110\":1,\"111\":1,\"112\":4}}],[\"写入\",{\"1\":{\"69\":1,\"71\":1,\"108\":1,\"109\":1,\"110\":2,\"111\":1,\"112\":2}}],[\"易变\",{\"1\":{\"84\":1}}],[\"易于\",{\"1\":{\"43\":1}}],[\"环境\",{\"1\":{\"83\":1,\"84\":1,\"95\":1,\"98\":3,\"107\":1,\"110\":2}}],[\"细节\",{\"1\":{\"78\":1,\"95\":1}}],[\"权限\",{\"1\":{\"77\":1,\"91\":1}}],[\"控制\",{\"1\":{\"73\":1,\"112\":1}}],[\"控制流\",{\"1\":{\"58\":2}}],[\"替换\",{\"1\":{\"72\":2,\"99\":1}}],[\"替换成\",{\"1\":{\"72\":1}}],[\"替代\",{\"1\":{\"23\":1,\"112\":1}}],[\"擦除\",{\"0\":{\"72\":1},\"1\":{\"72\":1}}],[\"界\",{\"1\":{\"71\":1}}],[\"界限\",{\"1\":{\"68\":1,\"69\":1}}],[\"助记符\",{\"1\":{\"71\":1}}],[\"按\",{\"1\":{\"70\":1,\"99\":1}}],[\"按照\",{\"1\":{\"60\":1}}],[\"兼容\",{\"1\":{\"70\":1}}],[\"兼容性问题\",{\"1\":{\"46\":1}}],[\"取出\",{\"1\":{\"69\":1}}],[\"取值\",{\"1\":{\"25\":1,\"28\":1,\"29\":1}}],[\"低级\",{\"1\":{\"69\":1}}],[\"低位\",{\"1\":{\"34\":2}}],[\"往里面\",{\"1\":{\"68\":1}}],[\"往\",{\"1\":{\"68\":1}}],[\"顾名思义\",{\"1\":{\"68\":1,\"69\":1}}],[\"?\",{\"1\":{\"67\":1,\"68\":1,\"69\":1,\"70\":2,\"89\":3,\"90\":4,\"91\":1,\"92\":1}}],[\"符\",{\"1\":{\"66\":1}}],[\"符号\",{\"1\":{\"34\":5}}],[\"决定\",{\"1\":{\"64\":1}}],[\"key\",{\"1\":{\"63\":1,\"65\":5}}],[\"k\",{\"1\":{\"63\":1,\"65\":7}}],[\"kg\",{\"1\":{\"47\":2}}],[\"尖括号\",{\"1\":{\"63\":1}}],[\"检测\",{\"1\":{\"62\":1,\"109\":1}}],[\"检查\",{\"1\":{\"22\":2,\"40\":2,\"41\":1,\"55\":2,\"57\":1,\"88\":1,\"95\":1,\"112\":1}}],[\"麻烦\",{\"1\":{\"62\":1}}],[\"麻木\",{\"1\":{\"3\":1}}],[\"消耗\",{\"1\":{\"96\":1,\"98\":1}}],[\"消费\",{\"1\":{\"71\":1}}],[\"消除\",{\"1\":{\"62\":1}}],[\"消亡\",{\"1\":{\"36\":1}}],[\"锁定\",{\"1\":{\"109\":1}}],[\"锁住\",{\"1\":{\"109\":1,\"112\":1}}],[\"锁\",{\"1\":{\"61\":1,\"109\":1,\"111\":3,\"112\":2}}],[\"锁会\",{\"1\":{\"61\":1}}],[\"演示\",{\"1\":{\"61\":1}}],[\"演进\",{\"1\":{\"46\":1}}],[\"释放\",{\"1\":{\"61\":2,\"112\":2}}],[\"退出\",{\"1\":{\"60\":1}}],[\"线程\",{\"1\":{\"60\":1,\"61\":1,\"83\":2,\"98\":3,\"108\":6,\"109\":1,\"110\":1,\"111\":5,\"112\":11}}],[\"吞噬\",{\"1\":{\"60\":1}}],[\"静默\",{\"1\":{\"60\":1}}],[\"静态方法\",{\"1\":{\"37\":11,\"46\":3,\"66\":1,\"80\":5}}],[\"静态\",{\"1\":{\"36\":1,\"37\":6,\"46\":1,\"47\":1,\"66\":3,\"80\":7}}],[\"暂\",{\"1\":{\"60\":1}}],[\"抛\",{\"1\":{\"60\":1,\"91\":1}}],[\"抛出\",{\"1\":{\"37\":1,\"55\":1,\"56\":4,\"57\":6,\"58\":4,\"59\":2,\"60\":1,\"90\":2}}],[\"逐一\",{\"1\":{\"60\":2}}],[\"逐渐\",{\"1\":{\"3\":4}}],[\"必\",{\"1\":{\"60\":1}}],[\"必须\",{\"1\":{\"29\":1,\"36\":1,\"37\":2,\"40\":1,\"41\":4,\"43\":1,\"45\":1,\"46\":3,\"47\":2,\"55\":2,\"57\":1,\"58\":1,\"60\":1,\"66\":1,\"81\":1,\"82\":1,\"87\":1,\"110\":2,\"112\":1}}],[\"隔开\",{\"1\":{\"59\":1}}],[\"隔离\",{\"1\":{\"51\":1}}],[\"合适\",{\"1\":{\"58\":1}}],[\"合法\",{\"1\":{\"55\":1}}],[\"立即\",{\"1\":{\"58\":1,\"84\":1,\"108\":1,\"109\":1,\"112\":1}}],[\"跟\",{\"1\":{\"58\":1,\"60\":1}}],[\"触发\",{\"1\":{\"58\":1,\"109\":1}}],[\"主线\",{\"1\":{\"109\":5}}],[\"主\",{\"1\":{\"108\":1,\"109\":2,\"110\":1}}],[\"主存\",{\"1\":{\"107\":1}}],[\"主动\",{\"1\":{\"58\":1}}],[\"主要\",{\"1\":{\"3\":1,\"21\":1,\"22\":1,\"29\":1,\"34\":1,\"37\":1,\"45\":1,\"53\":1,\"56\":1,\"68\":1,\"69\":1,\"73\":1,\"87\":1,\"88\":1,\"89\":1,\"95\":2,\"96\":1,\"111\":1}}],[\"显式\",{\"1\":{\"58\":1}}],[\"显示\",{\"1\":{\"23\":1}}],[\"子\",{\"1\":{\"68\":2,\"99\":3}}],[\"子句\",{\"1\":{\"57\":1}}],[\"子类\",{\"1\":{\"22\":1,\"37\":5,\"43\":11,\"45\":4,\"47\":4,\"53\":1,\"57\":2,\"58\":1,\"68\":3,\"69\":3,\"76\":1,\"82\":3}}],[\"若\",{\"1\":{\"57\":1,\"60\":1}}],[\"若干位\",{\"1\":{\"34\":2}}],[\"措施\",{\"1\":{\"57\":1,\"100\":1}}],[\"采取相应\",{\"1\":{\"57\":1}}],[\"采用\",{\"1\":{\"29\":1}}],[\"遇到\",{\"1\":{\"57\":1,\"60\":1}}],[\"遇见\",{\"1\":{\"3\":1}}],[\"停止\",{\"1\":{\"56\":1,\"109\":1}}],[\"跳\",{\"1\":{\"60\":2}}],[\"跳回\",{\"1\":{\"56\":1}}],[\"跳出\",{\"1\":{\"35\":3,\"109\":1}}],[\"磁盘\",{\"1\":{\"56\":1}}],[\"连接\",{\"1\":{\"56\":1,\"61\":2}}],[\"监听\",{\"1\":{\"56\":2,\"109\":1}}],[\"零个\",{\"1\":{\"60\":1}}],[\"零\",{\"1\":{\"55\":1}}],[\"预见\",{\"1\":{\"55\":1}}],[\"恢复\",{\"1\":{\"54\":1,\"85\":1}}],[\"处\",{\"1\":{\"99\":1}}],[\"处于\",{\"1\":{\"54\":1}}],[\"处理程序\",{\"1\":{\"60\":1}}],[\"处理器\",{\"1\":{\"34\":1,\"84\":1,\"108\":1,\"109\":5,\"110\":1}}],[\"处理\",{\"0\":{\"56\":1},\"1\":{\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"25\":2,\"29\":2,\"34\":1,\"37\":2,\"54\":1,\"55\":5,\"56\":1,\"57\":2,\"58\":1,\"59\":1,\"60\":5,\"70\":1,\"87\":2,\"100\":1}}],[\"捕获\",{\"1\":{\"54\":1,\"55\":4,\"56\":2,\"57\":1,\"59\":5,\"60\":7,\"61\":1,\"62\":1}}],[\"尝试\",{\"1\":{\"54\":1}}],[\"由\",{\"1\":{\"54\":1,\"55\":1,\"64\":1}}],[\"由于\",{\"1\":{\"3\":1,\"66\":1,\"98\":1}}],[\"派\",{\"1\":{\"53\":1}}],[\"派送\",{\"1\":{\"47\":1}}],[\"层次\",{\"1\":{\"53\":1}}],[\"层次结构\",{\"1\":{\"53\":1}}],[\"层级\",{\"1\":{\"51\":1}}],[\"层面\",{\"1\":{\"34\":1,\"47\":2,\"112\":3}}],[\"影響\",{\"1\":{\"51\":1}}],[\"影响\",{\"1\":{\"3\":1,\"21\":1,\"30\":1,\"39\":1,\"49\":6,\"50\":1,\"51\":3,\"58\":1,\"98\":1,\"110\":1}}],[\"风险\",{\"1\":{\"51\":1,\"91\":1}}],[\"未\",{\"1\":{\"50\":1}}],[\"未来\",{\"1\":{\"3\":2}}],[\"首先\",{\"1\":{\"50\":1,\"96\":1}}],[\"回\",{\"1\":{\"109\":1}}],[\"回写\",{\"1\":{\"109\":1}}],[\"回主\",{\"1\":{\"108\":2}}],[\"回来\",{\"1\":{\"50\":1,\"56\":1}}],[\"回收\",{\"1\":{\"36\":1,\"56\":1}}],[\"流中\",{\"1\":{\"58\":1,\"61\":1}}],[\"流反\",{\"1\":{\"50\":1}}],[\"流\",{\"1\":{\"50\":1,\"85\":1}}],[\"流程\",{\"1\":{\"43\":2}}],[\"递归\",{\"1\":{\"50\":3,\"51\":2}}],[\"独立性\",{\"1\":{\"51\":1}}],[\"独立\",{\"1\":{\"49\":1,\"50\":2,\"51\":1,\"66\":1,\"87\":1}}],[\"物力\",{\"1\":{\"56\":1}}],[\"物理\",{\"1\":{\"49\":5,\"50\":2}}],[\"物流\",{\"1\":{\"47\":1}}],[\"互不\",{\"1\":{\"49\":4,\"51\":1}}],[\"互联网\",{\"1\":{\"3\":2}}],[\"李四\",{\"1\":{\"49\":2,\"50\":2}}],[\"张三\",{\"1\":{\"49\":4,\"50\":4}}],[\"年龄\",{\"1\":{\"49\":5,\"50\":5}}],[\"科目\",{\"1\":{\"49\":7,\"50\":7}}],[\"科吗\",{\"1\":{\"3\":1}}],[\"姓名\",{\"1\":{\"49\":5,\"50\":5}}],[\"副本\",{\"1\":{\"49\":1,\"108\":1,\"109\":1}}],[\"浅\",{\"0\":{\"48\":1,\"49\":1},\"1\":{\"49\":6,\"50\":3,\"51\":1}}],[\"拷贝\",{\"0\":{\"48\":2,\"49\":1,\"50\":1},\"1\":{\"49\":14,\"50\":22,\"51\":12}}],[\"深入\",{\"1\":{\"100\":1}}],[\"深度\",{\"1\":{\"51\":1}}],[\"深\",{\"0\":{\"48\":1,\"50\":1},\"1\":{\"50\":10,\"51\":1}}],[\"深深\",{\"1\":{\"3\":1}}],[\"送货\",{\"1\":{\"47\":1}}],[\"司机\",{\"1\":{\"47\":1}}],[\"飞\",{\"1\":{\"47\":1}}],[\"飞机\",{\"1\":{\"47\":2}}],[\"货轮\",{\"1\":{\"47\":1}}],[\"卡车\",{\"1\":{\"47\":2}}],[\"栗子\",{\"1\":{\"47\":1}}],[\"旨在\",{\"1\":{\"47\":1}}],[\"骨架\",{\"1\":{\"47\":1}}],[\"模型\",{\"1\":{\"108\":1}}],[\"模式\",{\"1\":{\"77\":1}}],[\"模版\",{\"1\":{\"47\":2}}],[\"模块\",{\"1\":{\"46\":1}}],[\"模块化\",{\"1\":{\"43\":1}}],[\"描述\",{\"1\":{\"47\":2}}],[\"公有\",{\"1\":{\"90\":1,\"91\":2,\"92\":3}}],[\"公共\",{\"1\":{\"47\":1,\"78\":1,\"90\":2,\"91\":3,\"92\":2,\"94\":1,\"98\":1}}],[\"公开\",{\"1\":{\"43\":1,\"75\":1}}],[\"契约\",{\"1\":{\"47\":1}}],[\"理念\",{\"1\":{\"47\":2}}],[\"理解\",{\"1\":{\"41\":3,\"100\":1}}],[\"供\",{\"1\":{\"46\":1}}],[\"9\",{\"0\":{\"95\":1},\"1\":{\"46\":1,\"47\":1,\"90\":1,\"95\":3}}],[\"9223372036854775807\",{\"1\":{\"28\":1}}],[\"9223372036854775808\",{\"1\":{\"28\":1}}],[\"平滑\",{\"1\":{\"46\":1}}],[\"平时\",{\"1\":{\"3\":1}}],[\"巨大\",{\"1\":{\"46\":1,\"95\":1}}],[\"库\",{\"1\":{\"46\":1}}],[\"库中的类\",{\"1\":{\"40\":1}}],[\"尤其\",{\"1\":{\"46\":1,\"95\":1}}],[\"添加\",{\"1\":{\"46\":1,\"68\":3,\"69\":2,\"70\":1,\"97\":1}}],[\"辅助\",{\"1\":{\"46\":1}}],[\"掉\",{\"1\":{\"46\":1,\"60\":1}}],[\"官方\",{\"1\":{\"46\":1,\"95\":2}}],[\"—\",{\"1\":{\"46\":2,\"47\":4,\"49\":2,\"50\":2}}],[\"隐式\",{\"1\":{\"46\":1}}],[\"至少\",{\"1\":{\"45\":1,\"69\":1}}],[\"至此\",{\"1\":{\"3\":2}}],[\"体现\",{\"1\":{\"88\":1}}],[\"体内\",{\"1\":{\"58\":1}}],[\"体系\",{\"1\":{\"47\":1,\"53\":1}}],[\"体\",{\"1\":{\"45\":1,\"46\":4,\"47\":1,\"82\":1}}],[\"普通\",{\"1\":{\"45\":1,\"110\":2}}],[\"共同\",{\"1\":{\"45\":1}}],[\"共享\",{\"1\":{\"36\":1,\"49\":2,\"50\":2,\"51\":2,\"80\":1,\"107\":1,\"108\":1,\"109\":1,\"112\":1}}],[\"哪个\",{\"1\":{\"43\":1,\"69\":1}}],[\"哪些\",{\"1\":{\"24\":1,\"87\":3}}],[\"绑定\",{\"1\":{\"43\":1}}],[\"动态性\",{\"1\":{\"88\":1}}],[\"动态\",{\"1\":{\"43\":1,\"88\":1,\"92\":1}}],[\"私有\",{\"1\":{\"43\":3,\"78\":1,\"90\":4,\"91\":4,\"92\":4}}],[\"拥有\",{\"1\":{\"43\":3,\"47\":1}}],[\"选择性\",{\"1\":{\"43\":1}}],[\"增加\",{\"1\":{\"43\":1}}],[\"增长\",{\"1\":{\"3\":1}}],[\"暴露\",{\"1\":{\"43\":1}}],[\"汇编\",{\"1\":{\"43\":1}}],[\"代表\",{\"1\":{\"43\":1,\"54\":1,\"94\":1}}],[\"代码优化\",{\"1\":{\"100\":2}}],[\"代码生成\",{\"1\":{\"22\":1}}],[\"代码\",{\"1\":{\"3\":1,\"21\":4,\"22\":3,\"23\":2,\"36\":1,\"46\":5,\"50\":1,\"55\":1,\"56\":2,\"58\":2,\"60\":5,\"61\":4,\"62\":2,\"70\":1,\"80\":2,\"83\":2,\"86\":1,\"90\":1,\"94\":1,\"95\":1,\"100\":3,\"109\":1,\"111\":2}}],[\"建立\",{\"1\":{\"43\":1}}],[\"建模\",{\"1\":{\"43\":1}}],[\"建议\",{\"1\":{\"23\":1,\"37\":2}}],[\"性是\",{\"1\":{\"112\":3}}],[\"性的\",{\"1\":{\"112\":1}}],[\"性\",{\"0\":{\"108\":1},\"1\":{\"43\":1,\"73\":1,\"84\":1,\"90\":1,\"107\":1,\"108\":1,\"109\":3,\"110\":1,\"111\":6,\"112\":5}}],[\"性能\",{\"1\":{\"29\":1,\"30\":2,\"41\":1,\"50\":1,\"91\":1,\"96\":2,\"98\":3,\"110\":1}}],[\"扩展\",{\"1\":{\"43\":2,\"45\":1,\"47\":1}}],[\"扩展性\",{\"1\":{\"43\":1}}],[\"强大\",{\"1\":{\"62\":1}}],[\"强制\",{\"1\":{\"55\":2,\"62\":1,\"64\":2,\"97\":1,\"108\":2,\"109\":2}}],[\"强\",{\"1\":{\"43\":1}}],[\"难度\",{\"1\":{\"43\":1}}],[\"维护\",{\"1\":{\"43\":1,\"96\":1}}],[\"维护性\",{\"1\":{\"43\":1}}],[\"维度\",{\"1\":{\"30\":1}}],[\"封装\",{\"1\":{\"43\":3,\"46\":1,\"78\":1,\"87\":1}}],[\"步骤\",{\"1\":{\"43\":1,\"111\":1,\"112\":2}}],[\"步入\",{\"1\":{\"3\":1}}],[\"组织\",{\"1\":{\"43\":1}}],[\"范式\",{\"1\":{\"43\":1}}],[\"范围\",{\"1\":{\"28\":1,\"29\":6,\"30\":1,\"37\":2,\"39\":6,\"95\":2}}],[\"稳定\",{\"1\":{\"41\":1,\"107\":1}}],[\"降低\",{\"1\":{\"41\":1}}],[\"越界\",{\"1\":{\"55\":1}}],[\"越\",{\"1\":{\"41\":1}}],[\"越少\",{\"1\":{\"41\":1}}],[\"冲突\",{\"1\":{\"41\":3}}],[\"冲刺\",{\"1\":{\"3\":1}}],[\"称为\",{\"1\":{\"41\":1,\"66\":1,\"95\":1,\"96\":1}}],[\"称得上\",{\"1\":{\"3\":1}}],[\"删除\",{\"1\":{\"41\":2}}],[\"规范\",{\"1\":{\"41\":1,\"47\":1,\"65\":1}}],[\"便是\",{\"1\":{\"41\":1,\"46\":1}}],[\"速度\",{\"1\":{\"41\":1}}],[\"假设\",{\"1\":{\"41\":1,\"90\":1,\"112\":1}}],[\"”\",{\"1\":{\"41\":2,\"43\":1,\"47\":9,\"49\":2,\"94\":1,\"100\":2}}],[\"桶\",{\"1\":{\"41\":3}}],[\"“\",{\"1\":{\"41\":2,\"43\":1,\"47\":9,\"49\":2,\"94\":1,\"100\":2}}],[\"底层\",{\"1\":{\"41\":1,\"110\":1}}],[\"效率\",{\"1\":{\"41\":1,\"98\":1}}],[\"效果\",{\"1\":{\"39\":1,\"100\":1}}],[\"查找\",{\"1\":{\"41\":4,\"96\":1,\"99\":1}}],[\"起\",{\"1\":{\"41\":1,\"47\":2}}],[\"起步\",{\"1\":{\"3\":1}}],[\"散列\",{\"1\":{\"41\":2}}],[\"码点\",{\"1\":{\"95\":1}}],[\"码中\",{\"1\":{\"72\":1}}],[\"码后\",{\"1\":{\"46\":1}}],[\"码是\",{\"1\":{\"41\":1}}],[\"码\",{\"1\":{\"41\":6,\"100\":2}}],[\"哈希\",{\"1\":{\"41\":12}}],[\"!\",{\"1\":{\"40\":1,\"66\":1,\"109\":1}}],[\"|\",{\"1\":{\"40\":2,\"59\":2,\"90\":2}}],[\"推荐\",{\"1\":{\"40\":1,\"90\":1}}],[\"尽管\",{\"1\":{\"40\":1,\"87\":1}}],[\"尽量避免\",{\"1\":{\"30\":1}}],[\"while\",{\"1\":{\"109\":1}}],[\"what\",{\"1\":{\"47\":2}}],[\"wait\",{\"1\":{\"92\":3}}],[\"working\",{\"1\":{\"108\":1}}],[\"word\",{\"1\":{\"90\":2}}],[\"world\",{\"1\":{\"40\":1,\"66\":2,\"94\":2,\"96\":7,\"100\":6}}],[\"wildcard\",{\"1\":{\"68\":1,\"69\":1}}],[\"with\",{\"1\":{\"47\":2}}],[\"weight\",{\"1\":{\"47\":5}}],[\"wrapper\",{\"1\":{\"30\":1}}],[\"序列化\",{\"1\":{\"50\":3,\"85\":3}}],[\"序列\",{\"1\":{\"40\":1,\"50\":1,\"94\":1,\"98\":2}}],[\"完\",{\"1\":{\"61\":2,\"112\":1}}],[\"完后\",{\"1\":{\"60\":1}}],[\"完善\",{\"1\":{\"53\":1}}],[\"完全\",{\"1\":{\"50\":3,\"51\":2,\"94\":1}}],[\"完全相同\",{\"1\":{\"40\":1,\"41\":1}}],[\"完成\",{\"1\":{\"34\":2,\"56\":1,\"66\":1,\"100\":1,\"108\":1,\"110\":3}}],[\"超类\",{\"1\":{\"69\":4}}],[\"超出\",{\"1\":{\"39\":3}}],[\"超过\",{\"1\":{\"34\":1}}],[\"声明\",{\"1\":{\"37\":1,\"46\":1,\"47\":1,\"55\":2,\"56\":1,\"57\":4,\"66\":2,\"78\":1,\"81\":1,\"82\":1,\"91\":2,\"92\":1,\"94\":1,\"100\":1,\"107\":1}}],[\"异常\",{\"0\":{\"52\":1},\"1\":{\"37\":1,\"53\":2,\"55\":10,\"56\":8,\"57\":9,\"58\":7,\"59\":6,\"60\":15,\"61\":4,\"90\":1,\"91\":1}}],[\"列表\",{\"1\":{\"37\":1,\"68\":4,\"69\":4,\"70\":1,\"87\":1,\"92\":2}}],[\"编码表示\",{\"1\":{\"95\":1}}],[\"编码方式\",{\"1\":{\"95\":1}}],[\"编码\",{\"1\":{\"95\":4}}],[\"编程\",{\"1\":{\"43\":2,\"107\":1}}],[\"编写\",{\"1\":{\"37\":1,\"50\":1}}],[\"编译器\",{\"1\":{\"22\":2,\"23\":6,\"34\":1,\"55\":2,\"62\":2,\"84\":1,\"87\":3,\"100\":8,\"110\":1}}],[\"编译\",{\"0\":{\"100\":1},\"1\":{\"21\":1,\"22\":2,\"23\":1,\"24\":1,\"28\":1,\"55\":2,\"57\":2,\"62\":1,\"64\":1,\"68\":1,\"69\":1,\"70\":1,\"72\":2,\"89\":1,\"100\":5}}],[\"传输\",{\"1\":{\"85\":1}}],[\"传统\",{\"1\":{\"70\":1}}],[\"传播\",{\"1\":{\"60\":1}}],[\"传入\",{\"1\":{\"40\":1,\"62\":3}}],[\"传\",{\"1\":{\"37\":1}}],[\"传递\",{\"1\":{\"30\":1,\"39\":1,\"66\":3,\"87\":2}}],[\"响应\",{\"1\":{\"37\":1}}],[\"输入\",{\"1\":{\"37\":2,\"55\":1}}],[\"输出\",{\"1\":{\"23\":1,\"25\":1,\"31\":2,\"64\":1,\"65\":1,\"66\":1,\"68\":1,\"69\":1,\"80\":1,\"89\":1,\"90\":2,\"91\":1,\"92\":1,\"94\":1,\"109\":1}}],[\"允许\",{\"1\":{\"37\":3,\"41\":1,\"43\":1,\"46\":5,\"62\":1,\"87\":2,\"88\":1,\"91\":1,\"92\":1}}],[\"因此\",{\"1\":{\"37\":1,\"41\":1,\"46\":3,\"98\":3,\"112\":2}}],[\"因为\",{\"1\":{\"3\":2,\"34\":1,\"36\":1,\"39\":3,\"40\":1,\"41\":3,\"46\":1,\"47\":1,\"50\":1,\"54\":1,\"68\":3,\"69\":2,\"95\":2,\"96\":1,\"98\":1,\"109\":2,\"112\":1}}],[\"混淆\",{\"1\":{\"37\":1}}],[\"造成\",{\"1\":{\"37\":1}}],[\"去除\",{\"1\":{\"99\":1}}],[\"去\",{\"1\":{\"37\":1,\"41\":1,\"82\":1,\"89\":1}}],[\"去年\",{\"1\":{\"3\":1}}],[\"化时\",{\"1\":{\"64\":2,\"66\":1}}],[\"化成\",{\"1\":{\"50\":1}}],[\"化\",{\"1\":{\"37\":1,\"45\":1,\"46\":1,\"66\":1,\"82\":1}}],[\"访问控制\",{\"0\":{\"74\":1,\"79\":1},\"1\":{\"73\":2,\"107\":1}}],[\"访问\",{\"1\":{\"37\":10,\"43\":4,\"75\":1,\"76\":1,\"77\":5,\"78\":2,\"80\":2,\"83\":1,\"88\":1,\"90\":2,\"91\":3,\"92\":1,\"94\":1,\"100\":1}}],[\"非泛\",{\"1\":{\"70\":1}}],[\"非常\",{\"1\":{\"41\":1,\"95\":1,\"107\":1,\"112\":1}}],[\"非常容易\",{\"1\":{\"37\":1}}],[\"非\",{\"0\":{\"79\":1},\"1\":{\"37\":4,\"47\":2,\"55\":1,\"73\":1,\"86\":1,\"98\":1,\"107\":1}}],[\"非法操作\",{\"1\":{\"37\":1}}],[\"非法\",{\"1\":{\"29\":1}}],[\"销毁\",{\"1\":{\"36\":1}}],[\"虚拟机\",{\"1\":{\"36\":1,\"96\":1,\"100\":1}}],[\"具备\",{\"1\":{\"107\":1,\"111\":1}}],[\"具体方法\",{\"1\":{\"47\":1}}],[\"具体\",{\"1\":{\"36\":1,\"43\":1,\"47\":1,\"64\":1,\"69\":2,\"70\":1,\"88\":1,\"89\":1}}],[\"具有\",{\"1\":{\"34\":1,\"43\":2,\"66\":1}}],[\"级别\",{\"1\":{\"36\":1,\"66\":1,\"69\":1,\"77\":1}}],[\"修饰符\",{\"0\":{\"73\":1,\"74\":1,\"79\":1},\"1\":{\"37\":3,\"46\":1,\"47\":1,\"73\":3,\"77\":1,\"81\":1,\"90\":1,\"107\":1}}],[\"修饰\",{\"1\":{\"36\":1,\"37\":1,\"46\":2,\"75\":1,\"76\":2,\"78\":2,\"80\":1,\"81\":3,\"85\":1,\"94\":1,\"100\":2,\"107\":1,\"108\":1,\"109\":4,\"111\":2,\"112\":1}}],[\"修改\",{\"1\":{\"29\":1,\"41\":1,\"43\":1,\"46\":4,\"47\":1,\"49\":8,\"50\":6,\"51\":5,\"70\":1,\"84\":1,\"88\":1,\"94\":3,\"95\":1,\"98\":1,\"108\":3,\"109\":7,\"112\":3}}],[\"属于\",{\"1\":{\"36\":2,\"37\":5,\"47\":1,\"80\":1,\"87\":2,\"112\":1}}],[\"属性\",{\"1\":{\"24\":1,\"36\":1,\"43\":6,\"45\":1,\"87\":1}}],[\"块\",{\"1\":{\"36\":1,\"46\":1,\"55\":1,\"56\":7,\"58\":1,\"59\":1,\"60\":33,\"61\":3,\"80\":3,\"83\":2,\"111\":2}}],[\"外界\",{\"1\":{\"43\":1}}],[\"外部\",{\"1\":{\"37\":1,\"43\":1,\"55\":2,\"60\":1,\"94\":1}}],[\"外\",{\"1\":{\"36\":1,\"50\":1}}],[\"项\",{\"1\":{\"36\":1,\"43\":1}}],[\"项目\",{\"1\":{\"3\":2}}],[\"语法\",{\"1\":{\"47\":1,\"60\":1}}],[\"语句\",{\"1\":{\"35\":1,\"56\":6,\"57\":1,\"59\":1,\"60\":38,\"61\":3}}],[\"语言\",{\"1\":{\"23\":1,\"43\":1,\"86\":1,\"95\":1}}],[\"关闭\",{\"1\":{\"60\":1,\"61\":3}}],[\"关心\",{\"1\":{\"47\":2,\"70\":1}}],[\"关联\",{\"1\":{\"46\":1}}],[\"关于\",{\"1\":{\"43\":2,\"71\":1}}],[\"关注\",{\"1\":{\"43\":2}}],[\"关注点\",{\"1\":{\"43\":1,\"47\":1}}],[\"关键步骤\",{\"1\":{\"50\":1}}],[\"关键字\",{\"1\":{\"40\":1,\"46\":1,\"55\":1,\"56\":1,\"57\":2,\"58\":1,\"94\":1,\"100\":1,\"107\":2,\"108\":1,\"112\":1}}],[\"关键词\",{\"1\":{\"35\":1}}],[\"关系\",{\"1\":{\"31\":1,\"39\":1,\"43\":1,\"47\":3}}],[\"终止\",{\"1\":{\"35\":1,\"55\":1,\"56\":1,\"58\":1}}],[\"某\",{\"1\":{\"60\":1}}],[\"某个\",{\"1\":{\"37\":1,\"57\":1,\"68\":1,\"69\":1,\"89\":1,\"112\":2}}],[\"某种\",{\"1\":{\"35\":1,\"58\":1}}],[\"某些\",{\"1\":{\"23\":1,\"29\":1,\"60\":1,\"64\":1}}],[\"达到\",{\"1\":{\"35\":1}}],[\"次\",{\"1\":{\"112\":1}}],[\"次访问\",{\"1\":{\"109\":1}}],[\"次数\",{\"1\":{\"35\":1,\"41\":1,\"95\":1}}],[\"次方\",{\"1\":{\"34\":2}}],[\"满足\",{\"1\":{\"35\":1,\"40\":1,\"41\":1,\"58\":1}}],[\"条件\",{\"1\":{\"35\":2,\"112\":1}}],[\"改\",{\"1\":{\"111\":1,\"112\":1}}],[\"改动\",{\"1\":{\"95\":1}}],[\"改进\",{\"0\":{\"95\":1},\"1\":{\"95\":2}}],[\"改变\",{\"1\":{\"34\":1,\"81\":3,\"94\":1,\"112\":1}}],[\"改为\",{\"1\":{\"29\":1}}],[\"%\",{\"1\":{\"34\":1,\"66\":1}}],[\"求余\",{\"1\":{\"34\":1}}],[\"变化\",{\"1\":{\"109\":1}}],[\"变为\",{\"1\":{\"60\":1,\"95\":1,\"109\":1}}],[\"变\",{\"1\":{\"49\":3,\"51\":1,\"94\":1}}],[\"变得\",{\"1\":{\"46\":1}}],[\"变成\",{\"1\":{\"34\":1,\"49\":2,\"72\":1,\"95\":1}}],[\"变量值\",{\"1\":{\"108\":1}}],[\"变量\",{\"0\":{\"36\":1},\"1\":{\"25\":1,\"33\":2,\"34\":1,\"36\":6,\"37\":2,\"39\":2,\"43\":1,\"45\":1,\"46\":1,\"47\":3,\"60\":2,\"77\":1,\"80\":7,\"81\":3,\"94\":1,\"100\":1,\"107\":4,\"108\":6,\"109\":5,\"110\":4,\"111\":2,\"112\":2}}],[\"仅仅\",{\"1\":{\"49\":1}}],[\"仅\",{\"1\":{\"34\":1}}],[\"右\",{\"1\":{\"34\":1}}],[\"右移\",{\"1\":{\"34\":5}}],[\"负数\",{\"1\":{\"34\":1}}],[\"补码\",{\"1\":{\"34\":1}}],[\"补\",{\"1\":{\"34\":5}}],[\"补零\",{\"1\":{\"34\":1}}],[\"溢出\",{\"1\":{\"34\":1,\"54\":2}}],[\"向上\",{\"1\":{\"68\":1,\"69\":1}}],[\"向\",{\"1\":{\"34\":2,\"69\":1}}],[\"左移\",{\"1\":{\"34\":4}}],[\"节省\",{\"1\":{\"34\":2,\"95\":2}}],[\"除非\",{\"1\":{\"34\":1,\"82\":1}}],[\"除以\",{\"1\":{\"34\":1,\"55\":1}}],[\"除法\",{\"1\":{\"34\":1}}],[\"除了\",{\"1\":{\"3\":2,\"50\":1,\"68\":2,\"70\":1,\"76\":1,\"78\":1,\"110\":1}}],[\"乘法\",{\"1\":{\"34\":1}}],[\"乘以\",{\"1\":{\"31\":1,\"34\":1}}],[\"周期\",{\"1\":{\"34\":2,\"36\":1}}],[\"周围\",{\"1\":{\"3\":1}}],[\"硬件\",{\"1\":{\"34\":2,\"112\":1}}],[\"专门\",{\"1\":{\"34\":1,\"96\":1}}],[\"专业对口\",{\"1\":{\"3\":1}}],[\"专业知识\",{\"1\":{\"3\":2}}],[\"现代\",{\"1\":{\"34\":1}}],[\"现在\",{\"1\":{\"3\":1,\"40\":1,\"50\":1}}],[\"原子\",{\"1\":{\"109\":1,\"111\":6,\"112\":9}}],[\"原理\",{\"0\":{\"109\":1},\"1\":{\"107\":2,\"109\":1}}],[\"原则\",{\"0\":{\"71\":1}}],[\"原生\",{\"1\":{\"62\":1}}],[\"原始\",{\"1\":{\"49\":4,\"50\":5,\"51\":4,\"94\":1}}],[\"原\",{\"1\":{\"49\":5,\"50\":3,\"51\":1}}],[\"原因\",{\"1\":{\"34\":1,\"37\":1,\"41\":1}}],[\"原值\",{\"1\":{\"33\":2}}],[\"压缩\",{\"1\":{\"34\":1}}],[\"压力\",{\"1\":{\"3\":1}}],[\"适用范围\",{\"1\":{\"111\":1}}],[\"适用\",{\"1\":{\"34\":2,\"43\":1,\"51\":1,\"68\":1,\"69\":1,\"90\":1,\"111\":2,\"112\":1}}],[\"移动\",{\"1\":{\"34\":1}}],[\"移位\",{\"0\":{\"34\":1},\"1\":{\"34\":9}}],[\"移除\",{\"1\":{\"23\":1}}],[\"给\",{\"1\":{\"33\":2,\"60\":1}}],[\"减\",{\"1\":{\"33\":1}}],[\"减少\",{\"1\":{\"21\":1,\"22\":1,\"95\":2,\"96\":1}}],[\"再次\",{\"1\":{\"37\":1}}],[\"再减\",{\"1\":{\"33\":2}}],[\"再加\",{\"1\":{\"33\":2}}],[\"再\",{\"1\":{\"33\":2,\"34\":2,\"41\":1,\"50\":1,\"108\":1}}],[\"加减乘除\",{\"1\":{\"100\":1}}],[\"加锁\",{\"1\":{\"61\":2}}],[\"加入\",{\"1\":{\"41\":2}}],[\"加载\",{\"1\":{\"37\":1,\"66\":2,\"80\":2,\"89\":1}}],[\"加密\",{\"1\":{\"34\":1}}],[\"加\",{\"1\":{\"33\":1,\"112\":1}}],[\"加上\",{\"1\":{\"3\":1,\"28\":2,\"46\":1}}],[\"先读\",{\"1\":{\"112\":1}}],[\"先于\",{\"1\":{\"66\":1,\"110\":1}}],[\"先减\",{\"1\":{\"33\":1}}],[\"先加\",{\"1\":{\"33\":1}}],[\"先\",{\"1\":{\"33\":6,\"50\":1,\"107\":1,\"109\":1,\"110\":1}}],[\"含义\",{\"1\":{\"33\":1}}],[\"顺序\",{\"1\":{\"33\":1,\"37\":1,\"60\":2,\"99\":1}}],[\"顺利\",{\"1\":{\"3\":1,\"57\":1}}],[\"表情符号\",{\"1\":{\"95\":1}}],[\"表现\",{\"1\":{\"43\":1}}],[\"表后\",{\"1\":{\"41\":1}}],[\"表\",{\"1\":{\"41\":1}}],[\"表中\",{\"1\":{\"36\":1,\"41\":1}}],[\"表达式\",{\"1\":{\"33\":2,\"100\":1}}],[\"表示\",{\"1\":{\"24\":3,\"31\":2,\"34\":1,\"54\":1,\"63\":1,\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"81\":1,\"86\":1,\"95\":4}}],[\"常规\",{\"1\":{\"60\":1,\"87\":1}}],[\"常量\",{\"0\":{\"96\":1},\"1\":{\"46\":3,\"81\":1,\"96\":15,\"97\":5,\"100\":18}}],[\"常用\",{\"0\":{\"99\":1},\"1\":{\"33\":1}}],[\"常见\",{\"1\":{\"23\":1,\"43\":1,\"50\":1,\"55\":2}}],[\"！\",{\"1\":{\"31\":1,\"60\":1,\"64\":1,\"68\":1,\"69\":1,\"70\":1}}],[\"❗\",{\"1\":{\"31\":1}}],[\"*\",{\"1\":{\"31\":5,\"50\":4,\"87\":4,\"94\":6}}],[\"结尾\",{\"1\":{\"99\":1}}],[\"结合\",{\"1\":{\"37\":1}}],[\"结构\",{\"1\":{\"35\":1,\"43\":1,\"53\":1,\"108\":1}}],[\"结果\",{\"1\":{\"31\":1,\"41\":3,\"49\":1,\"50\":1,\"94\":1,\"110\":2,\"112\":2}}],[\"结束\",{\"1\":{\"3\":2,\"35\":3,\"36\":1,\"109\":4}}],[\"部分\",{\"1\":{\"31\":1,\"47\":2,\"87\":1}}],[\"存放\",{\"1\":{\"46\":1,\"100\":1}}],[\"存入\",{\"1\":{\"41\":2,\"100\":1}}],[\"存\",{\"1\":{\"39\":1}}],[\"存在\",{\"1\":{\"31\":1,\"37\":6,\"43\":3,\"60\":2,\"68\":1,\"69\":1,\"96\":4,\"97\":1}}],[\"存储\",{\"1\":{\"30\":1,\"31\":1,\"34\":1,\"36\":1,\"41\":3,\"95\":2}}],[\"直到\",{\"1\":{\"31\":1,\"58\":1}}],[\"直接\",{\"1\":{\"21\":1,\"22\":1,\"30\":1,\"35\":1,\"37\":1,\"40\":1,\"43\":2,\"47\":1,\"51\":1,\"56\":1,\"61\":1,\"80\":1,\"82\":1,\"90\":1,\"94\":1,\"96\":2,\"109\":1}}],[\"转型\",{\"1\":{\"68\":1,\"69\":1}}],[\"转到\",{\"1\":{\"58\":1}}],[\"转换\",{\"1\":{\"31\":1,\"34\":1,\"41\":1,\"62\":2,\"85\":1,\"99\":2}}],[\"转换成\",{\"1\":{\"31\":1}}],[\"转变\",{\"1\":{\"3\":1}}],[\"十进制\",{\"1\":{\"31\":1}}],[\"精确\",{\"1\":{\"31\":4}}],[\"精度\",{\"0\":{\"31\":1},\"1\":{\"28\":1,\"29\":1,\"31\":3}}],[\"办法\",{\"1\":{\"31\":2,\"66\":1}}],[\"解决\",{\"1\":{\"31\":1,\"46\":1,\"95\":1,\"98\":1,\"108\":1,\"111\":3}}],[\"解释\",{\"1\":{\"31\":1}}],[\"解析\",{\"1\":{\"22\":1,\"28\":1}}],[\"情况\",{\"1\":{\"31\":1,\"34\":1,\"41\":1,\"60\":4,\"87\":1,\"88\":1,\"90\":1,\"112\":2}}],[\"损失\",{\"1\":{\"31\":1}}],[\"循环体\",{\"1\":{\"35\":1}}],[\"循环\",{\"1\":{\"31\":2,\"35\":9,\"87\":1,\"109\":5}}],[\"宽度\",{\"1\":{\"31\":1}}],[\"小写\",{\"1\":{\"99\":1}}],[\"小于\",{\"1\":{\"37\":1,\"95\":1}}],[\"小\",{\"1\":{\"37\":1,\"43\":1}}],[\"小数\",{\"1\":{\"31\":5}}],[\"小厂\",{\"1\":{\"3\":1}}],[\"令人\",{\"1\":{\"31\":1}}],[\"例子\",{\"1\":{\"31\":1,\"110\":1,\"112\":1}}],[\"例如\",{\"1\":{\"22\":3,\"23\":1,\"25\":1,\"40\":1,\"41\":1,\"46\":1,\"61\":1,\"85\":1,\"87\":1,\"112\":2}}],[\"举个\",{\"1\":{\"47\":1,\"112\":1}}],[\"举例说明\",{\"1\":{\"34\":1}}],[\"举\",{\"1\":{\"31\":1}}],[\"🌰\",{\"1\":{\"31\":1,\"34\":1,\"47\":1,\"112\":1}}],[\"丢失\",{\"0\":{\"31\":1},\"1\":{\"31\":1,\"112\":1}}],[\"丢弃\",{\"1\":{\"24\":1,\"34\":2}}],[\"丰富\",{\"1\":{\"30\":1}}],[\"涉及\",{\"1\":{\"30\":1,\"50\":1}}],[\"稍低\",{\"1\":{\"30\":1}}],[\"泛\",{\"1\":{\"30\":1}}],[\"泛型\",{\"0\":{\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"72\":1},\"1\":{\"29\":2,\"30\":1,\"62\":4,\"63\":1,\"64\":1,\"65\":1,\"66\":8,\"67\":1,\"68\":1,\"69\":1,\"72\":2}}],[\"场景\",{\"0\":{\"112\":1},\"1\":{\"30\":3,\"43\":1,\"51\":1,\"111\":1,\"112\":1}}],[\"堆\",{\"1\":{\"30\":1,\"36\":2,\"49\":2,\"96\":5,\"97\":3,\"100\":2}}],[\"栈中\",{\"1\":{\"36\":1}}],[\"栈\",{\"1\":{\"30\":2,\"36\":1,\"54\":1}}],[\"✅\",{\"1\":{\"30\":3,\"31\":1,\"36\":1}}],[\"否\",{\"1\":{\"30\":1}}],[\"否则\",{\"1\":{\"28\":2,\"41\":1,\"55\":1,\"57\":1}}],[\"系统\",{\"1\":{\"30\":1,\"43\":2,\"47\":1,\"57\":1,\"109\":1}}],[\"严重\",{\"1\":{\"30\":1,\"54\":1}}],[\"拆分\",{\"1\":{\"99\":1}}],[\"拆\",{\"1\":{\"30\":2}}],[\"拆箱\",{\"1\":{\"30\":2}}],[\"→\",{\"1\":{\"30\":2,\"33\":6}}],[\"装货\",{\"1\":{\"47\":2}}],[\"装箱\",{\"1\":{\"30\":4,\"39\":4}}],[\"装配\",{\"1\":{\"22\":1}}],[\"联系\",{\"0\":{\"30\":1}}],[\"&\",{\"1\":{\"29\":2,\"40\":2,\"66\":2}}],[\"源码\",{\"1\":{\"29\":2,\"94\":1,\"95\":1}}],[\"源代码\",{\"1\":{\"24\":1,\"100\":1}}],[\"🚁\",{\"1\":{\"47\":1}}],[\"🚛\",{\"1\":{\"47\":1}}],[\"🔐\",{\"1\":{\"31\":1}}],[\"🛠\",{\"1\":{\"29\":1}}],[\"📦\",{\"1\":{\"29\":1}}],[\"引发\",{\"1\":{\"61\":1}}],[\"引起\",{\"1\":{\"54\":1,\"55\":1,\"61\":1}}],[\"引用\",{\"1\":{\"29\":2,\"30\":1,\"36\":1,\"39\":4,\"40\":1,\"43\":3,\"49\":10,\"50\":8,\"51\":7,\"55\":1,\"94\":2,\"96\":4,\"97\":1,\"100\":2}}],[\"引入\",{\"1\":{\"21\":1,\"23\":2,\"24\":1,\"46\":1,\"62\":1,\"87\":1,\"95\":1}}],[\"y\",{\"1\":{\"29\":2,\"33\":8,\"40\":7}}],[\"x\",{\"1\":{\"29\":2,\"33\":16,\"34\":4,\"40\":7,\"69\":1}}],[\"xml\",{\"1\":{\"22\":1}}],[\"🧪\",{\"1\":{\"29\":1}}],[\"资源\",{\"1\":{\"29\":1,\"55\":1,\"56\":1,\"61\":2,\"98\":1}}],[\"浪费\",{\"1\":{\"29\":1,\"95\":2}}],[\"❌\",{\"1\":{\"29\":1,\"30\":3,\"36\":1}}],[\"两端\",{\"1\":{\"99\":1}}],[\"两大类\",{\"1\":{\"73\":1}}],[\"两种\",{\"1\":{\"35\":1,\"43\":1,\"112\":1}}],[\"两者\",{\"0\":{\"30\":1,\"47\":1,\"51\":1},\"1\":{\"41\":1,\"43\":1}}],[\"两个\",{\"1\":{\"29\":1,\"39\":2,\"40\":1,\"41\":8,\"49\":1,\"53\":1,\"87\":1,\"95\":1,\"96\":1,\"98\":1,\"112\":1}}],[\"两年\",{\"1\":{\"3\":1}}],[\"默认\",{\"1\":{\"29\":1,\"40\":3,\"41\":1,\"46\":5,\"47\":2,\"77\":1,\"91\":1}}],[\"默认值\",{\"1\":{\"24\":1,\"25\":1,\"28\":2,\"29\":1,\"30\":1,\"36\":1,\"85\":1}}],[\"返回值\",{\"1\":{\"35\":2,\"37\":3,\"60\":2}}],[\"返回\",{\"1\":{\"29\":1,\"41\":2,\"60\":1,\"62\":1,\"66\":2,\"91\":2,\"92\":2,\"94\":1,\"96\":2,\"97\":1,\"99\":2}}],[\"新增\",{\"1\":{\"95\":2}}],[\"新类\",{\"1\":{\"43\":2}}],[\"新建\",{\"1\":{\"29\":1}}],[\"新\",{\"1\":{\"29\":1,\"39\":1,\"43\":2,\"46\":2,\"49\":3,\"50\":3,\"94\":1,\"95\":1,\"96\":4,\"100\":1,\"109\":1}}],[\"频繁\",{\"1\":{\"29\":1,\"30\":1,\"95\":1,\"98\":2}}],[\"手动\",{\"1\":{\"36\":1,\"50\":3,\"62\":1}}],[\"手段\",{\"1\":{\"29\":1,\"94\":1}}],[\"手机\",{\"1\":{\"3\":1}}],[\"缓存\",{\"1\":{\"29\":15,\"39\":8,\"84\":1,\"108\":2,\"109\":10,\"112\":4}}],[\"not\",{\"1\":{\"113\":1}}],[\"notifyall\",{\"1\":{\"92\":1}}],[\"notify\",{\"1\":{\"92\":1}}],[\"non\",{\"1\":{\"73\":1}}],[\"nosuchmethodexception\",{\"1\":{\"25\":1}}],[\"nums\",{\"1\":{\"87\":1}}],[\"numbers\",{\"1\":{\"69\":3,\"87\":2}}],[\"number\",{\"1\":{\"68\":6,\"69\":6,\"72\":2,\"109\":7,\"110\":1}}],[\"nullpointerexception\",{\"1\":{\"55\":1,\"58\":1,\"59\":3}}],[\"null\",{\"1\":{\"29\":1,\"30\":4,\"36\":1,\"40\":1,\"66\":2,\"68\":2,\"70\":1,\"85\":1}}],[\"namefield\",{\"1\":{\"91\":5}}],[\"names\",{\"1\":{\"87\":1}}],[\"name\",{\"1\":{\"46\":5,\"49\":6,\"50\":6,\"89\":5,\"90\":10,\"91\":9}}],[\"n\",{\"1\":{\"34\":4,\"49\":2,\"50\":2,\"68\":2}}],[\"newchar\",{\"1\":{\"99\":1}}],[\"newinstance\",{\"1\":{\"90\":5,\"91\":1,\"92\":1}}],[\"new\",{\"1\":{\"29\":2,\"31\":3,\"39\":2,\"40\":10,\"43\":1,\"49\":2,\"50\":2,\"58\":1,\"61\":1,\"62\":1,\"64\":2,\"65\":1,\"68\":1,\"69\":3,\"80\":3,\"96\":3,\"97\":1,\"109\":1}}],[\"需要\",{\"1\":{\"29\":1,\"34\":1,\"35\":2,\"37\":3,\"40\":2,\"41\":1,\"45\":1,\"46\":2,\"47\":1,\"50\":2,\"51\":3,\"61\":2,\"62\":1,\"70\":1,\"80\":1,\"82\":1,\"87\":2,\"90\":1,\"95\":3,\"111\":1,\"112\":4}}],[\"需求\",{\"1\":{\"25\":1}}],[\"支持\",{\"1\":{\"29\":2,\"30\":4,\"34\":1,\"47\":1}}],[\"集合\",{\"0\":{\"101\":1,\"104\":1},\"1\":{\"29\":1,\"30\":3}}],[\"包裹\",{\"1\":{\"112\":1}}],[\"包内\",{\"1\":{\"76\":1}}],[\"包中\",{\"1\":{\"75\":1,\"77\":1,\"88\":1}}],[\"包括\",{\"1\":{\"43\":1,\"47\":1,\"91\":6,\"92\":5}}],[\"包\",{\"1\":{\"29\":1,\"76\":1,\"77\":1}}],[\"包装\",{\"0\":{\"29\":1},\"1\":{\"29\":12,\"30\":2,\"39\":1,\"40\":1,\"49\":3,\"51\":1}}],[\"包含\",{\"1\":{\"22\":1,\"23\":2,\"24\":1,\"25\":1,\"46\":1,\"47\":3,\"51\":3,\"82\":1,\"95\":5,\"99\":1,\"111\":1}}],[\"height\",{\"1\":{\"49\":7,\"50\":6,\"90\":10,\"91\":2}}],[\"hello\",{\"1\":{\"28\":1,\"39\":2,\"40\":2,\"64\":2,\"66\":3,\"89\":1,\"94\":2,\"96\":6,\"100\":6}}],[\"how\",{\"1\":{\"47\":1}}],[\"has\",{\"1\":{\"47\":1}}],[\"hashtable\",{\"1\":{\"41\":1}}],[\"hashset\",{\"1\":{\"41\":8}}],[\"hashmap\",{\"1\":{\"41\":1}}],[\"hash\",{\"1\":{\"40\":1,\"41\":2,\"94\":2,\"95\":1}}],[\"hashcode\",{\"1\":{\"40\":4,\"41\":15,\"49\":1,\"50\":1,\"92\":1}}],[\"high\",{\"1\":{\"29\":1}}],[\"hibernate\",{\"1\":{\"22\":1,\"88\":1}}],[\"h\",{\"1\":{\"28\":1}}],[\"注意\",{\"1\":{\"28\":1,\"30\":1,\"31\":1,\"34\":1,\"37\":1,\"39\":1,\"43\":2,\"49\":1,\"50\":1,\"57\":1,\"58\":1,\"60\":1,\"66\":1,\"87\":1,\"95\":1,\"112\":1}}],[\"注解\",{\"0\":{\"21\":1,\"23\":1,\"24\":1,\"25\":1},\"1\":{\"21\":3,\"22\":8,\"23\":1,\"24\":22,\"25\":14}}],[\"️\",{\"1\":{\"28\":1,\"29\":1,\"30\":1,\"34\":1,\"43\":2,\"57\":1,\"58\":1,\"60\":1,\"66\":1,\"87\":1,\"112\":1}}],[\"⚠\",{\"1\":{\"28\":1,\"30\":1,\"34\":1,\"43\":2,\"57\":1,\"58\":1,\"60\":1,\"66\":1,\"87\":1,\"112\":1}}],[\"双引号\",{\"1\":{\"28\":1}}],[\"双\",{\"1\":{\"28\":1}}],[\"位来\",{\"1\":{\"112\":1}}],[\"位为\",{\"1\":{\"34\":2}}],[\"位向\",{\"1\":{\"34\":1}}],[\"位置\",{\"1\":{\"30\":1,\"33\":1,\"36\":2,\"41\":2,\"58\":2,\"99\":1}}],[\"位于\",{\"1\":{\"29\":1,\"36\":2}}],[\"位\",{\"1\":{\"28\":2,\"34\":8,\"95\":2,\"100\":1,\"112\":1}}],[\"位数\",{\"1\":{\"28\":1,\"34\":3}}],[\"尾数\",{\"1\":{\"28\":2}}],[\"尾声\",{\"1\":{\"3\":1}}],[\"单条\",{\"1\":{\"112\":1}}],[\"单\",{\"1\":{\"112\":1}}],[\"单次\",{\"1\":{\"112\":1}}],[\"单线程\",{\"1\":{\"98\":1,\"110\":1}}],[\"单个\",{\"1\":{\"63\":1}}],[\"单独\",{\"1\":{\"46\":1}}],[\"单引号\",{\"1\":{\"28\":1}}],[\"单精度\",{\"1\":{\"28\":1}}],[\"单身\",{\"1\":{\"3\":1}}],[\"endswith\",{\"1\":{\"99\":1}}],[\"endindex\",{\"1\":{\"99\":1}}],[\"executed\",{\"1\":{\"80\":1}}],[\"exit\",{\"1\":{\"60\":1}}],[\"exception\",{\"1\":{\"53\":1,\"55\":8,\"57\":2,\"60\":1,\"90\":1,\"91\":1,\"92\":1}}],[\"extends\",{\"1\":{\"47\":2,\"62\":1,\"68\":1,\"70\":1,\"71\":4,\"72\":1,\"81\":2,\"109\":1}}],[\"error\",{\"1\":{\"53\":1,\"54\":2,\"57\":1}}],[\"every\",{\"1\":{\"46\":1}}],[\"element\",{\"1\":{\"63\":1,\"66\":2}}],[\"elementtype\",{\"1\":{\"24\":4,\"25\":1}}],[\"else\",{\"1\":{\"29\":1}}],[\"equalsignorecase\",{\"1\":{\"99\":1}}],[\"equals\",{\"1\":{\"29\":2,\"31\":1,\"40\":21,\"41\":10,\"46\":1,\"92\":1,\"96\":2,\"99\":1}}],[\"e308\",{\"1\":{\"28\":1}}],[\"e38\",{\"1\":{\"28\":1}}],[\"e\",{\"1\":{\"28\":2,\"49\":2,\"50\":2,\"59\":6,\"60\":1,\"62\":2,\"63\":1,\"89\":4,\"90\":4,\"91\":2,\"92\":2}}],[\"utf16\",{\"1\":{\"95\":2}}],[\"utf\",{\"1\":{\"95\":3}}],[\"used\",{\"1\":{\"94\":1}}],[\"upper\",{\"1\":{\"68\":1}}],[\"unicode\",{\"1\":{\"95\":1}}],[\"unlock\",{\"1\":{\"61\":1}}],[\"unchecked\",{\"1\":{\"23\":1,\"55\":2,\"57\":1}}],[\"u0000\",{\"1\":{\"28\":1}}],[\"\\\\\",{\"1\":{\"28\":1,\"49\":2,\"50\":2,\"90\":1}}],[\"'\",{\"1\":{\"28\":6,\"90\":12}}],[\"^\",{\"1\":{\"28\":5}}],[\"~\",{\"1\":{\"28\":8,\"29\":6}}],[\"01111100\",{\"1\":{\"34\":1}}],[\"0100\",{\"1\":{\"34\":1}}],[\"0001\",{\"1\":{\"34\":1}}],[\"0000\",{\"1\":{\"34\":3}}],[\"0.6\",{\"1\":{\"31\":1}}],[\"0.8\",{\"1\":{\"31\":2}}],[\"0.4\",{\"1\":{\"31\":3}}],[\"0.3\",{\"1\":{\"31\":2}}],[\"0.30000000000000004\",{\"1\":{\"31\":1}}],[\"0.2\",{\"1\":{\"31\":6}}],[\"0.1\",{\"1\":{\"31\":2}}],[\"0.0\",{\"1\":{\"28\":2}}],[\"0\",{\"1\":{\"28\":5,\"29\":1,\"30\":1,\"31\":3,\"34\":4,\"36\":1,\"58\":2,\"66\":2,\"69\":1,\"80\":1,\"85\":1,\"94\":1,\"95\":1,\"109\":1}}],[\"示例\",{\"1\":{\"28\":1,\"29\":1,\"33\":1,\"87\":3,\"109\":1}}],[\"空白\",{\"1\":{\"99\":1}}],[\"空\",{\"1\":{\"55\":1}}],[\"空间\",{\"1\":{\"28\":1}}],[\"空闲\",{\"1\":{\"3\":1}}],[\"占用\",{\"1\":{\"95\":7}}],[\"占位\",{\"1\":{\"66\":1}}],[\"占有\",{\"1\":{\"34\":1}}],[\"占\",{\"1\":{\"28\":1}}],[\"布尔值\",{\"1\":{\"34\":1}}],[\"布尔\",{\"1\":{\"28\":1}}],[\"型\",{\"1\":{\"28\":2,\"30\":1,\"36\":2,\"62\":1,\"66\":1,\"70\":1}}],[\"浮点数\",{\"0\":{\"31\":1},\"1\":{\"31\":2}}],[\"浮点\",{\"1\":{\"28\":1,\"29\":1,\"31\":1}}],[\"basis\",{\"0\":{\"117\":1}}],[\"basketballplayer\",{\"1\":{\"46\":2}}],[\"barrier\",{\"1\":{\"110\":1}}],[\"bus\",{\"1\":{\"109\":1}}],[\"business\",{\"1\":{\"25\":2}}],[\"beginindex\",{\"1\":{\"99\":2}}],[\"be\",{\"1\":{\"81\":1}}],[\"block\",{\"1\":{\"80\":1}}],[\"bob\",{\"1\":{\"91\":2}}],[\"bound\",{\"1\":{\"69\":1}}],[\"bounde\",{\"1\":{\"68\":1}}],[\"box\",{\"1\":{\"64\":6}}],[\"body\",{\"1\":{\"46\":1}}],[\"boolean\",{\"1\":{\"28\":3,\"29\":3,\"40\":2,\"46\":2,\"100\":1,\"109\":1}}],[\"break\",{\"0\":{\"35\":1},\"1\":{\"35\":1}}],[\"bigdecimal\",{\"1\":{\"31\":9}}],[\"b\",{\"1\":{\"28\":2,\"29\":3,\"30\":2,\"31\":2,\"33\":3,\"34\":3,\"39\":2,\"41\":2,\"45\":3}}],[\"byte\",{\"1\":{\"28\":3,\"29\":3,\"34\":2,\"95\":8,\"100\":1}}],[\"整数\",{\"1\":{\"31\":1,\"34\":2,\"40\":1,\"41\":5}}],[\"整数型\",{\"1\":{\"28\":1}}],[\"整型\",{\"1\":{\"28\":1}}],[\"整个\",{\"1\":{\"1\":1,\"7\":1,\"35\":1,\"112\":3}}],[\"404\",{\"1\":{\"113\":1}}],[\"42\",{\"1\":{\"109\":2,\"110\":1}}],[\"4.4\",{\"1\":{\"66\":2}}],[\"4.\",{\"1\":{\"40\":1}}],[\"4.9\",{\"1\":{\"28\":1}}],[\"45\",{\"1\":{\"28\":1}}],[\"4\",{\"1\":{\"28\":3,\"33\":4,\"34\":3,\"40\":1,\"60\":1,\"66\":2}}],[\"65535\",{\"1\":{\"28\":1}}],[\"63\",{\"1\":{\"28\":2}}],[\"64\",{\"1\":{\"28\":2,\"34\":1}}],[\"6\",{\"1\":{\"28\":1,\"33\":4}}],[\"种\",{\"1\":{\"28\":7,\"60\":1}}],[\"打断\",{\"1\":{\"112\":1}}],[\"打开\",{\"1\":{\"56\":1}}],[\"打印\",{\"1\":{\"25\":1,\"87\":1,\"90\":2}}],[\"打破\",{\"1\":{\"3\":1}}],[\"日志\",{\"1\":{\"25\":1,\"87\":1}}],[\"日子\",{\"1\":{\"3\":1}}],[\"登录\",{\"1\":{\"25\":1}}],[\"拦截器\",{\"1\":{\"25\":1}}],[\"配合\",{\"1\":{\"25\":2}}],[\"配置文件\",{\"1\":{\"22\":1}}],[\"配置\",{\"1\":{\"21\":1,\"22\":3,\"29\":1}}],[\"通知\",{\"1\":{\"112\":1}}],[\"通配符\",{\"0\":{\"67\":1,\"68\":1,\"69\":1,\"70\":1},\"1\":{\"67\":1,\"68\":1,\"69\":2,\"71\":2}}],[\"通用\",{\"1\":{\"40\":1,\"41\":1,\"47\":1}}],[\"通常\",{\"1\":{\"25\":1,\"34\":1,\"39\":1,\"40\":1,\"41\":1,\"47\":2,\"54\":2,\"55\":1,\"58\":1,\"63\":1,\"70\":1,\"72\":1,\"78\":1,\"82\":1,\"108\":1,\"109\":1}}],[\"通过\",{\"1\":{\"22\":1,\"24\":2,\"25\":4,\"28\":1,\"29\":1,\"34\":1,\"37\":2,\"41\":2,\"43\":3,\"46\":1,\"55\":3,\"57\":1,\"61\":1,\"62\":1,\"72\":1,\"80\":1,\"81\":1,\"86\":1,\"88\":1,\"89\":2,\"90\":1,\"91\":1,\"92\":1,\"100\":2,\"109\":1,\"110\":1}}],[\"itern\",{\"1\":{\"97\":1}}],[\"illegalaccessexception\",{\"1\":{\"90\":1}}],[\"illegalargumentexception\",{\"1\":{\"58\":1}}],[\"io\",{\"1\":{\"61\":1,\"94\":1,\"95\":1}}],[\"ioexception\",{\"1\":{\"55\":1,\"57\":1}}],[\"identityhashcode\",{\"1\":{\"94\":2}}],[\"ide\",{\"1\":{\"88\":1}}],[\"id\",{\"1\":{\"47\":1}}],[\"implementation\",{\"1\":{\"81\":1}}],[\"implements\",{\"1\":{\"47\":2,\"49\":1,\"50\":2,\"65\":1,\"94\":1,\"95\":1}}],[\"implicitly\",{\"1\":{\"46\":1}}],[\"import\",{\"1\":{\"31\":1}}],[\"i4\",{\"1\":{\"39\":2,\"40\":2}}],[\"i3\",{\"1\":{\"39\":2,\"40\":2}}],[\"i2\",{\"1\":{\"39\":2,\"40\":2}}],[\"i1\",{\"1\":{\"39\":2,\"40\":2}}],[\"isempty\",{\"1\":{\"99\":1}}],[\"iso\",{\"1\":{\"95\":2}}],[\"is\",{\"1\":{\"46\":1,\"47\":1,\"80\":1,\"94\":1}}],[\"istrue\",{\"1\":{\"46\":3}}],[\"isnan\",{\"1\":{\"29\":1}}],[\"isannotationpresent\",{\"1\":{\"25\":1}}],[\"i\",{\"1\":{\"28\":1,\"29\":5,\"64\":2,\"111\":1,\"112\":3}}],[\"if\",{\"1\":{\"25\":1,\"29\":1,\"40\":2,\"58\":1,\"66\":1}}],[\"invalid\",{\"1\":{\"109\":1}}],[\"invoke\",{\"1\":{\"92\":3}}],[\"ing\",{\"1\":{\"100\":2}}],[\"indexof\",{\"1\":{\"99\":1}}],[\"index\",{\"1\":{\"99\":1}}],[\"initargs\",{\"1\":{\"90\":1}}],[\"instantiationexception\",{\"1\":{\"90\":1}}],[\"incrementstaticvar\",{\"1\":{\"80\":3}}],[\"inputarray\",{\"1\":{\"66\":3}}],[\"in\",{\"1\":{\"46\":1}}],[\"intarray\",{\"1\":{\"66\":3}}],[\"intel486\",{\"1\":{\"109\":1}}],[\"interruptedexception\",{\"1\":{\"109\":1}}],[\"intern\",{\"1\":{\"97\":2}}],[\"interface\",{\"1\":{\"25\":1,\"46\":4,\"47\":2,\"65\":1}}],[\"integers\",{\"1\":{\"68\":2}}],[\"integerbox\",{\"1\":{\"64\":3}}],[\"integercache\",{\"1\":{\"29\":2}}],[\"integer\",{\"1\":{\"29\":19,\"30\":3,\"39\":8,\"40\":9,\"49\":2,\"50\":2,\"64\":2,\"65\":1,\"66\":3,\"68\":3,\"69\":5,\"90\":6,\"92\":1}}],[\"int\",{\"1\":{\"25\":1,\"28\":3,\"29\":3,\"30\":5,\"33\":6,\"34\":8,\"39\":3,\"40\":5,\"49\":2,\"50\":2,\"58\":1,\"80\":1,\"81\":1,\"87\":3,\"94\":1,\"95\":1,\"99\":4,\"100\":1,\"109\":1,\"112\":1}}],[\"inherited\",{\"1\":{\"24\":1}}],[\">\",{\"1\":{\"25\":1,\"29\":3,\"31\":5,\"34\":19,\"62\":4,\"63\":1,\"64\":5,\"65\":5,\"66\":6,\"68\":3,\"69\":5,\"70\":2,\"72\":1,\"89\":4,\"90\":4,\"91\":1,\"92\":1,\"94\":1,\"95\":1,\"100\":5}}],[\"<\",{\"1\":{\"25\":1,\"29\":3,\"34\":6,\"49\":1,\"50\":2,\"62\":4,\"63\":1,\"64\":5,\"65\":5,\"66\":5,\"68\":3,\"69\":5,\"70\":2,\"72\":1,\"89\":4,\"90\":4,\"91\":1,\"92\":1,\"94\":1,\"95\":1,\"100\":2}}],[\"省略\",{\"1\":{\"25\":1,\"46\":1}}],[\"另外\",{\"1\":{\"60\":1,\"95\":2}}],[\"另\",{\"1\":{\"25\":1,\"41\":1,\"49\":1,\"66\":1,\"96\":1,\"112\":2}}],[\"p6\",{\"1\":{\"109\":1}}],[\"pentium\",{\"1\":{\"109\":1}}],[\"person2\",{\"1\":{\"90\":4}}],[\"person1\",{\"1\":{\"90\":4}}],[\"personclass\",{\"1\":{\"90\":5,\"91\":6,\"92\":5}}],[\"person\",{\"1\":{\"90\":21,\"91\":14,\"92\":10}}],[\"performoperation\",{\"1\":{\"25\":4}}],[\"pecs\",{\"0\":{\"71\":1}}],[\"put\",{\"1\":{\"69\":1}}],[\"publicmethod\",{\"1\":{\"90\":2,\"92\":1}}],[\"public\",{\"1\":{\"25\":5,\"29\":1,\"40\":4,\"46\":10,\"47\":15,\"49\":5,\"50\":5,\"57\":1,\"58\":1,\"59\":2,\"64\":5,\"65\":6,\"66\":5,\"68\":2,\"69\":2,\"70\":1,\"75\":1,\"80\":12,\"81\":9,\"87\":3,\"90\":7,\"94\":1,\"95\":1,\"100\":1,\"109\":3}}],[\"python\",{\"1\":{\"43\":1}}],[\"pair\",{\"1\":{\"65\":3}}],[\"parent\",{\"1\":{\"81\":2}}],[\"parameters\",{\"1\":{\"62\":1}}],[\"parsexxx\",{\"1\":{\"30\":1}}],[\"parseint\",{\"1\":{\"29\":1}}],[\"pascal\",{\"1\":{\"43\":1}}],[\"pop\",{\"1\":{\"43\":2}}],[\"prefix\",{\"1\":{\"87\":1,\"99\":1}}],[\"producer\",{\"1\":{\"71\":2}}],[\"protected\",{\"1\":{\"47\":3,\"49\":1,\"50\":2,\"76\":1}}],[\"programming\",{\"1\":{\"43\":2}}],[\"procedural\",{\"1\":{\"43\":1}}],[\"privatemethod\",{\"1\":{\"90\":2,\"92\":5}}],[\"private\",{\"1\":{\"37\":1,\"46\":2,\"47\":2,\"64\":1,\"65\":2,\"78\":1,\"90\":3,\"91\":2,\"94\":3,\"95\":3,\"109\":2}}],[\"primitive\",{\"1\":{\"30\":1}}],[\"printunknownlist\",{\"1\":{\"70\":1}}],[\"printlist\",{\"1\":{\"68\":3}}],[\"println\",{\"1\":{\"25\":6,\"29\":3,\"31\":2,\"34\":5,\"39\":7,\"40\":8,\"46\":1,\"47\":5,\"49\":7,\"50\":7,\"59\":3,\"64\":2,\"65\":1,\"66\":3,\"68\":1,\"69\":2,\"70\":1,\"80\":3,\"81\":1,\"89\":4,\"90\":5,\"91\":7,\"92\":5,\"94\":3,\"96\":5,\"97\":3,\"100\":4,\"109\":2}}],[\"printf\",{\"1\":{\"66\":1}}],[\"printarray\",{\"1\":{\"66\":5}}],[\"printstacktrace\",{\"1\":{\"49\":1,\"50\":1,\"89\":2,\"90\":2,\"91\":1,\"92\":1}}],[\"printbasketball\",{\"1\":{\"46\":3}}],[\"print\",{\"1\":{\"25\":2}}],[\"p3\",{\"1\":{\"40\":2}}],[\"p2\",{\"1\":{\"40\":3}}],[\"p1\",{\"1\":{\"40\":4,\"65\":3}}],[\"volatilevisibilitydemo\",{\"1\":{\"109\":1}}],[\"volatile\",{\"0\":{\"107\":1},\"1\":{\"107\":5,\"108\":4,\"109\":7,\"110\":5,\"111\":3,\"112\":8}}],[\"void\",{\"1\":{\"25\":3,\"46\":2,\"47\":9,\"49\":2,\"50\":2,\"57\":1,\"59\":2,\"64\":2,\"65\":1,\"66\":3,\"68\":2,\"69\":2,\"70\":1,\"80\":5,\"81\":3,\"87\":3,\"90\":2,\"109\":2}}],[\"v\",{\"1\":{\"63\":1,\"65\":7}}],[\"valueof\",{\"1\":{\"29\":3,\"99\":1}}],[\"value\",{\"1\":{\"25\":6,\"35\":1,\"58\":3,\"63\":1,\"65\":5,\"94\":6,\"95\":3}}],[\"varargs\",{\"1\":{\"23\":1}}],[\"=\",{\"1\":{\"25\":6,\"28\":10,\"29\":15,\"30\":3,\"31\":8,\"33\":14,\"34\":2,\"39\":38,\"40\":30,\"43\":3,\"46\":1,\"47\":1,\"49\":11,\"50\":13,\"58\":2,\"61\":1,\"62\":1,\"64\":6,\"65\":3,\"66\":4,\"68\":2,\"69\":3,\"80\":4,\"81\":2,\"89\":5,\"90\":25,\"91\":115,\"92\":114,\"94\":2,\"96\":11,\"97\":10,\"100\":22,\"109\":6,\"110\":2}}],[\"}\",{\"1\":{\"25\":9,\"29\":1,\"40\":5,\"45\":1,\"46\":4,\"47\":11,\"49\":10,\"50\":11,\"57\":1,\"58\":2,\"59\":7,\"60\":3,\"61\":2,\"64\":5,\"65\":6,\"66\":9,\"68\":3,\"69\":1,\"70\":2,\"80\":12,\"81\":8,\"87\":3,\"89\":4,\"90\":15,\"91\":4,\"92\":3,\"94\":1,\"95\":1,\"100\":1,\"109\":5}}],[\"]\",{\"1\":{\"25\":2,\"29\":1,\"49\":1,\"50\":1,\"64\":1,\"65\":1,\"66\":8,\"68\":1,\"69\":3,\"80\":3,\"91\":2,\"92\":1,\"94\":1,\"95\":8,\"109\":1}}],[\"[\",{\"1\":{\"25\":2,\"29\":1,\"49\":1,\"50\":1,\"64\":1,\"65\":1,\"66\":8,\"68\":1,\"69\":3,\"80\":3,\"91\":2,\"92\":1,\"94\":1,\"95\":8,\"109\":1}}],[\"11\",{\"1\":{\"95\":1}}],[\"11.0\",{\"1\":{\"58\":1}}],[\"11111100\",{\"1\":{\"34\":1}}],[\"1111\",{\"1\":{\"34\":1}}],[\"1735600054\",{\"1\":{\"50\":2,\"94\":1}}],[\"175\",{\"1\":{\"49\":4,\"50\":4}}],[\"185\",{\"1\":{\"92\":1}}],[\"180\",{\"1\":{\"49\":2,\"50\":2,\"90\":3}}],[\"18\",{\"1\":{\"49\":4,\"50\":4,\"90\":5}}],[\"1.1\",{\"1\":{\"66\":2,\"68\":2}}],[\"1.\",{\"1\":{\"40\":1,\"51\":2}}],[\"1.0\",{\"1\":{\"39\":2}}],[\"1.2\",{\"1\":{\"31\":1}}],[\"1.6\",{\"1\":{\"31\":1}}],[\"1.7976931348623157\",{\"1\":{\"28\":1}}],[\"1.4\",{\"1\":{\"28\":1}}],[\"15\",{\"1\":{\"28\":3}}],[\"168\",{\"1\":{\"90\":2}}],[\"16\",{\"1\":{\"28\":4,\"34\":1,\"95\":4}}],[\"100\",{\"1\":{\"28\":1,\"29\":4,\"39\":5,\"40\":2}}],[\"10000\",{\"1\":{\"28\":1}}],[\"1000\",{\"1\":{\"28\":1,\"29\":2,\"34\":2,\"109\":1}}],[\"10\",{\"1\":{\"28\":1,\"30\":1,\"39\":2,\"68\":1,\"69\":3,\"81\":1}}],[\"123\",{\"1\":{\"29\":1,\"64\":2}}],[\"127\",{\"1\":{\"28\":1,\"29\":7}}],[\"128\",{\"1\":{\"28\":1,\"29\":10}}],[\"1\",{\"0\":{\"26\":1,\"101\":1},\"1\":{\"25\":1,\"28\":7,\"31\":2,\"33\":10,\"34\":9,\"37\":1,\"40\":2,\"66\":3,\"68\":2,\"94\":1,\"95\":14,\"112\":1}}],[\";\",{\"1\":{\"25\":14,\"28\":7,\"29\":11,\"30\":3,\"31\":6,\"33\":6,\"34\":7,\"35\":2,\"39\":19,\"40\":30,\"43\":1,\"46\":8,\"47\":11,\"49\":29,\"50\":32,\"58\":2,\"59\":3,\"61\":2,\"64\":11,\"65\":10,\"66\":13,\"68\":6,\"69\":10,\"70\":2,\"80\":11,\"81\":3,\"89\":11,\"90\":25,\"91\":17,\"92\":14,\"94\":7,\"95\":3,\"96\":10,\"97\":7,\"100\":19,\"109\":8,\"110\":2}}],[\"{\",{\"1\":{\"25\":9,\"29\":1,\"40\":5,\"45\":1,\"46\":4,\"47\":11,\"49\":10,\"50\":11,\"57\":1,\"58\":2,\"59\":7,\"60\":3,\"61\":2,\"64\":5,\"65\":6,\"66\":9,\"68\":3,\"69\":2,\"70\":2,\"80\":12,\"81\":8,\"87\":3,\"89\":4,\"90\":15,\"91\":4,\"92\":3,\"94\":1,\"95\":1,\"100\":1,\"109\":5}}],[\"mesi\",{\"1\":{\"109\":1}}],[\"memory\",{\"1\":{\"108\":2,\"110\":1}}],[\"methods\",{\"1\":{\"92\":2}}],[\"method\",{\"1\":{\"24\":1,\"25\":8,\"57\":1,\"58\":1,\"59\":2,\"80\":1,\"81\":1,\"92\":8}}],[\"meta\",{\"1\":{\"24\":1}}],[\"modifiers\",{\"1\":{\"73\":2}}],[\"math\",{\"1\":{\"31\":1}}],[\"map\",{\"1\":{\"29\":1}}],[\"main\",{\"1\":{\"25\":1,\"49\":1,\"50\":1,\"64\":1,\"65\":1,\"66\":1,\"68\":1,\"69\":1,\"80\":6,\"108\":1,\"109\":1}}],[\"mysql\",{\"0\":{\"114\":1}}],[\"myservice\",{\"1\":{\"25\":5}}],[\"myclass\",{\"1\":{\"80\":11,\"81\":3,\"89\":4}}],[\"mycustomannotation\",{\"1\":{\"25\":7}}],[\"myage\",{\"1\":{\"65\":2}}],[\"myobject\",{\"1\":{\"41\":2}}],[\"mypoint\",{\"1\":{\"40\":10}}],[\"下图\",{\"1\":{\"107\":1}}],[\"下降\",{\"1\":{\"91\":1}}],[\"下的类\",{\"1\":{\"77\":1}}],[\"下界\",{\"0\":{\"69\":1},\"1\":{\"69\":2,\"71\":1}}],[\"下\",{\"1\":{\"31\":1,\"34\":1,\"35\":1,\"60\":2,\"83\":1,\"84\":1,\"88\":1,\"98\":3,\"107\":1,\"108\":1,\"109\":1,\"110\":2,\"112\":1}}],[\"下面\",{\"1\":{\"25\":1,\"29\":1,\"35\":2,\"50\":1,\"94\":1,\"95\":1}}],[\"下来\",{\"1\":{\"3\":1}}],[\":\",{\"1\":{\"25\":13,\"28\":2,\"34\":3,\"49\":35,\"50\":35,\"55\":1,\"59\":3,\"65\":2,\"66\":5,\"68\":1,\"70\":1,\"89\":5,\"90\":5,\"91\":4,\"92\":3,\"94\":4}}],[\"图\",{\"1\":{\"25\":1,\"34\":1,\"50\":1,\"53\":1,\"108\":1}}],[\"功能\",{\"1\":{\"25\":1,\"43\":2,\"88\":1}}],[\"功夫不负有心人\",{\"1\":{\"3\":1}}],[\"拿到\",{\"1\":{\"25\":3}}],[\"cpu\",{\"1\":{\"60\":1,\"98\":1,\"107\":2,\"108\":1,\"109\":3,\"112\":4}}],[\"child\",{\"1\":{\"81\":1}}],[\"changefinalvar\",{\"1\":{\"81\":1}}],[\"charat\",{\"1\":{\"99\":1}}],[\"character\",{\"1\":{\"29\":2,\"94\":1}}],[\"charsequence\",{\"1\":{\"94\":1,\"95\":1,\"99\":3}}],[\"charlie\",{\"1\":{\"92\":1}}],[\"char\",{\"1\":{\"28\":5,\"29\":1,\"34\":1,\"94\":1,\"95\":5,\"99\":2,\"100\":1}}],[\"checked\",{\"1\":{\"55\":2,\"57\":1}}],[\"calculate\",{\"1\":{\"87\":1}}],[\"cannot\",{\"1\":{\"81\":1}}],[\"catch\",{\"1\":{\"49\":1,\"50\":1,\"55\":2,\"56\":3,\"57\":1,\"58\":1,\"59\":5,\"60\":13,\"89\":2,\"90\":2,\"91\":1,\"92\":1}}],[\"cache\",{\"1\":{\"29\":1,\"94\":1}}],[\"clasinteger\",{\"1\":{\"92\":1}}],[\"classloader\",{\"1\":{\"89\":1}}],[\"classname\",{\"1\":{\"89\":1}}],[\"classnotfoundexception\",{\"1\":{\"55\":1,\"89\":2,\"90\":1}}],[\"classcastexception\",{\"1\":{\"55\":1}}],[\"class\",{\"1\":{\"24\":3,\"25\":8,\"40\":1,\"45\":2,\"47\":3,\"49\":3,\"50\":3,\"64\":1,\"65\":1,\"66\":1,\"80\":6,\"81\":6,\"89\":14,\"90\":10,\"91\":2,\"92\":5,\"94\":1,\"95\":1,\"109\":2}}],[\"clonedstudent\",{\"1\":{\"49\":8,\"50\":12}}],[\"clonenotsupportedexception\",{\"1\":{\"49\":2,\"50\":3}}],[\"clone\",{\"1\":{\"49\":3,\"50\":10,\"51\":1}}],[\"cloneable\",{\"1\":{\"49\":1,\"50\":3}}],[\"c#\",{\"1\":{\"43\":1}}],[\"c++\",{\"1\":{\"43\":1,\"86\":1}}],[\"c\",{\"1\":{\"28\":1,\"30\":1,\"31\":2,\"33\":3,\"39\":2,\"43\":1,\"86\":1,\"100\":2}}],[\"collection\",{\"0\":{\"119\":1}}],[\"collision\",{\"1\":{\"41\":1}}],[\"compareto\",{\"1\":{\"99\":1}}],[\"comparable\",{\"1\":{\"94\":1,\"95\":1}}],[\"compact\",{\"1\":{\"95\":2}}],[\"com\",{\"1\":{\"90\":2,\"91\":1,\"92\":1}}],[\"concurrent\",{\"0\":{\"120\":1}}],[\"concat\",{\"1\":{\"94\":1}}],[\"constant\",{\"1\":{\"100\":1}}],[\"constructorwithargs\",{\"1\":{\"90\":2}}],[\"constructor\",{\"1\":{\"90\":6}}],[\"consumer\",{\"1\":{\"71\":2}}],[\"contains\",{\"1\":{\"99\":1}}],[\"control\",{\"1\":{\"73\":1}}],[\"contract\",{\"1\":{\"41\":1}}],[\"content\",{\"1\":{\"64\":9}}],[\"continue\",{\"0\":{\"35\":1},\"1\":{\"35\":1}}],[\"copy\",{\"1\":{\"51\":2}}],[\"coder\",{\"1\":{\"95\":5}}],[\"code\",{\"1\":{\"41\":1,\"94\":1}}],[\"core\",{\"1\":{\"25\":2}}],[\"count\",{\"1\":{\"25\":5,\"112\":8}}],[\"custom\",{\"1\":{\"25\":1}}],[\"创建对象\",{\"1\":{\"37\":1,\"88\":1,\"96\":1,\"97\":1}}],[\"创建\",{\"0\":{\"90\":1},\"1\":{\"25\":1,\"29\":1,\"30\":1,\"36\":3,\"39\":1,\"46\":1,\"49\":1,\"50\":2,\"80\":1,\"90\":2,\"91\":1,\"94\":2,\"95\":1,\"96\":9,\"97\":1,\"98\":1,\"100\":1}}],[\"同\",{\"1\":{\"87\":1}}],[\"同一时间\",{\"1\":{\"83\":1,\"111\":1}}],[\"同一\",{\"1\":{\"77\":1}}],[\"同一个\",{\"1\":{\"24\":1,\"37\":2,\"39\":3,\"40\":1,\"49\":3,\"59\":1,\"76\":1,\"94\":1,\"96\":1,\"100\":1,\"112\":1}}],[\"同步\",{\"1\":{\"61\":1,\"83\":1,\"98\":3,\"109\":1,\"111\":1}}],[\"同理\",{\"1\":{\"41\":1}}],[\"同时\",{\"1\":{\"40\":2,\"41\":3,\"46\":1,\"60\":1,\"111\":1,\"112\":2}}],[\"同名\",{\"1\":{\"37\":1}}],[\"同样\",{\"1\":{\"37\":1}}],[\"同学\",{\"1\":{\"3\":3}}],[\"继承\",{\"1\":{\"24\":1,\"37\":1,\"43\":5,\"45\":4,\"46\":1,\"47\":6,\"55\":4,\"57\":1,\"81\":3,\"82\":1,\"91\":4,\"92\":4,\"94\":1}}],[\"继续执行\",{\"1\":{\"35\":1}}],[\"继续\",{\"1\":{\"3\":1,\"35\":1}}],[\"则\",{\"1\":{\"24\":1,\"25\":1,\"37\":1,\"49\":1,\"56\":1,\"57\":1,\"60\":1,\"61\":1,\"80\":1,\"96\":2,\"97\":1}}],[\"database\",{\"0\":{\"115\":1}}],[\"display\",{\"1\":{\"49\":5,\"50\":5}}],[\"drone\",{\"1\":{\"47\":4}}],[\"drivername\",{\"1\":{\"47\":2}}],[\"driver\",{\"1\":{\"47\":2}}],[\"djava\",{\"1\":{\"29\":1}}],[\"d\",{\"1\":{\"28\":2,\"33\":3,\"100\":2}}],[\"dosomethingelse\",{\"1\":{\"87\":1}}],[\"dosomething\",{\"1\":{\"87\":1}}],[\"dog\",{\"1\":{\"43\":2}}],[\"doubles\",{\"1\":{\"68\":2}}],[\"doublearray\",{\"1\":{\"66\":2}}],[\"double\",{\"1\":{\"28\":3,\"29\":5,\"31\":1,\"39\":1,\"47\":3,\"58\":1,\"66\":1,\"68\":2,\"100\":1}}],[\"documented\",{\"1\":{\"24\":1,\"25\":1}}],[\"declaredfield\",{\"1\":{\"91\":2}}],[\"declaredfields\",{\"1\":{\"91\":2}}],[\"declaration\",{\"1\":{\"46\":1}}],[\"deep\",{\"1\":{\"51\":1}}],[\"deepcopydemo\",{\"1\":{\"50\":1}}],[\"destination\",{\"1\":{\"47\":5}}],[\"delivering\",{\"1\":{\"47\":1}}],[\"deliver\",{\"1\":{\"47\":3}}],[\"default\",{\"1\":{\"25\":3,\"46\":7,\"47\":1,\"77\":1,\"94\":1}}],[\"deprecation\",{\"1\":{\"23\":1}}],[\"deprecated\",{\"1\":{\"23\":2}}],[\"获取\",{\"0\":{\"89\":1,\"91\":1,\"92\":1},\"1\":{\"24\":2,\"25\":1,\"84\":1,\"89\":4,\"90\":3,\"91\":5,\"92\":4,\"97\":1}}],[\"无效\",{\"1\":{\"109\":1}}],[\"无参\",{\"1\":{\"90\":4}}],[\"无界\",{\"0\":{\"70\":1}}],[\"无论\",{\"1\":{\"60\":1}}],[\"无论是\",{\"1\":{\"3\":1}}],[\"无人机\",{\"1\":{\"47\":3}}],[\"无需\",{\"1\":{\"37\":1,\"64\":2,\"95\":1}}],[\"无\",{\"1\":{\"34\":1,\"45\":1,\"100\":1}}],[\"无限\",{\"1\":{\"31\":1}}],[\"无法访问\",{\"1\":{\"43\":1}}],[\"无法\",{\"1\":{\"24\":1,\"28\":1,\"37\":1,\"41\":3,\"55\":1,\"60\":1,\"69\":1,\"81\":3,\"87\":2,\"94\":1,\"100\":3,\"109\":3,\"112\":1}}],[\"文件\",{\"1\":{\"24\":2,\"55\":2,\"56\":1,\"85\":1}}],[\"文档\",{\"1\":{\"1\":1,\"7\":1,\"24\":1,\"46\":1}}],[\"保持\",{\"1\":{\"94\":1}}],[\"保护\",{\"1\":{\"76\":1,\"91\":1}}],[\"保存\",{\"1\":{\"31\":1,\"85\":1,\"94\":1}}],[\"保留\",{\"1\":{\"24\":3,\"34\":2}}],[\"保证\",{\"1\":{\"3\":1,\"61\":4,\"69\":2,\"84\":1,\"107\":1,\"109\":1,\"110\":3,\"111\":3,\"112\":8}}],[\"值求\",{\"1\":{\"100\":1}}],[\"值为\",{\"1\":{\"95\":2}}],[\"值作\",{\"1\":{\"41\":1}}],[\"值\",{\"1\":{\"24\":1,\"29\":1,\"33\":5,\"35\":1,\"39\":7,\"40\":3,\"41\":2,\"49\":1,\"60\":1,\"84\":1,\"91\":2,\"94\":1,\"100\":4,\"108\":3,\"109\":3,\"112\":1}}],[\"何时\",{\"1\":{\"24\":1,\"71\":1}}],[\"run\",{\"1\":{\"109\":1}}],[\"runtimeexception\",{\"1\":{\"55\":3,\"57\":1}}],[\"runtime\",{\"1\":{\"24\":1,\"25\":1,\"55\":1}}],[\"redis\",{\"0\":{\"116\":1}}],[\"reordering\",{\"1\":{\"110\":1}}],[\"readerthread\",{\"1\":{\"109\":8,\"110\":1}}],[\"ready\",{\"1\":{\"109\":12,\"110\":1}}],[\"regex\",{\"1\":{\"99\":1}}],[\"replacement\",{\"1\":{\"99\":1}}],[\"replace\",{\"1\":{\"94\":1,\"99\":2}}],[\"repeatable\",{\"1\":{\"24\":1}}],[\"result\",{\"1\":{\"92\":4}}],[\"reentrantlock\",{\"1\":{\"61\":2}}],[\"return\",{\"0\":{\"35\":1},\"1\":{\"29\":2,\"35\":6,\"40\":5,\"46\":1,\"49\":1,\"50\":2,\"56\":2,\"58\":1,\"60\":9,\"64\":1,\"65\":2,\"66\":2,\"90\":2,\"100\":1}}],[\"retentionpolicy\",{\"1\":{\"24\":4,\"25\":1}}],[\"retention\",{\"1\":{\"24\":1,\"25\":1}}],[\"reflection\",{\"1\":{\"88\":1}}],[\"reflect\",{\"1\":{\"25\":2,\"88\":1}}],[\"rawtypes\",{\"1\":{\"23\":1}}],[\"found\",{\"1\":{\"113\":1}}],[\"folding\",{\"1\":{\"100\":1}}],[\"forname\",{\"1\":{\"89\":2,\"90\":2,\"91\":1,\"92\":1}}],[\"for\",{\"1\":{\"25\":1,\"66\":1,\"68\":1,\"70\":1,\"91\":2,\"92\":1,\"94\":2}}],[\"flying\",{\"1\":{\"47\":1}}],[\"fly\",{\"1\":{\"47\":2}}],[\"flyable\",{\"1\":{\"47\":4}}],[\"float\",{\"1\":{\"28\":4,\"29\":4,\"39\":3,\"100\":1}}],[\"f2\",{\"1\":{\"39\":2}}],[\"f1\",{\"1\":{\"39\":2}}],[\"first\",{\"1\":{\"66\":4}}],[\"filenotfoundexception\",{\"1\":{\"57\":1}}],[\"finalmethod\",{\"1\":{\"81\":2}}],[\"finalvar\",{\"1\":{\"81\":2}}],[\"finall\",{\"1\":{\"60\":1}}],[\"finally\",{\"1\":{\"56\":4,\"60\":16,\"61\":6}}],[\"final\",{\"1\":{\"37\":1,\"46\":4,\"47\":1,\"81\":13,\"94\":4,\"95\":3,\"100\":7}}],[\"fields\",{\"1\":{\"91\":2}}],[\"field\",{\"1\":{\"24\":1,\"25\":2,\"46\":1,\"91\":8}}],[\"false\",{\"1\":{\"28\":2,\"29\":2,\"39\":5,\"40\":5,\"96\":2,\"97\":2,\"100\":2,\"109\":2}}],[\"f\",{\"1\":{\"28\":5,\"39\":2}}],[\"functionalinterface\",{\"1\":{\"23\":2}}],[\"t\",{\"1\":{\"63\":1,\"64\":7,\"66\":12,\"68\":2,\"69\":2,\"72\":2}}],[\"tochararray\",{\"1\":{\"99\":1}}],[\"tolowercase\",{\"1\":{\"99\":1}}],[\"touppercase\",{\"1\":{\"99\":1}}],[\"tostring\",{\"1\":{\"90\":1,\"92\":1,\"100\":1}}],[\"to\",{\"1\":{\"47\":2,\"94\":1}}],[\"trim\",{\"1\":{\"99\":1}}],[\"transient\",{\"1\":{\"85\":1}}],[\"transportvehicle\",{\"1\":{\"47\":4}}],[\"try\",{\"1\":{\"49\":1,\"50\":1,\"55\":1,\"56\":6,\"57\":1,\"59\":3,\"60\":13,\"61\":6,\"89\":2,\"90\":2,\"91\":1,\"92\":1}}],[\"truck\",{\"1\":{\"47\":4}}],[\"true\",{\"1\":{\"28\":2,\"29\":3,\"31\":1,\"39\":3,\"40\":5,\"91\":2,\"92\":1,\"96\":3,\"97\":1,\"100\":2,\"109\":2,\"110\":1}}],[\"thread\",{\"1\":{\"109\":2}}],[\"throw\",{\"1\":{\"56\":3,\"58\":4}}],[\"throwable\",{\"1\":{\"53\":2,\"58\":2}}],[\"throws\",{\"1\":{\"25\":1,\"49\":1,\"50\":2,\"55\":1,\"56\":1,\"57\":4,\"109\":1}}],[\"the\",{\"1\":{\"46\":1,\"94\":3}}],[\"this\",{\"1\":{\"40\":4,\"47\":1,\"49\":5,\"50\":5,\"64\":2,\"65\":2,\"80\":1,\"81\":1,\"90\":3}}],[\"taking\",{\"1\":{\"47\":1}}],[\"tag\",{\"1\":{\"25\":2}}],[\"tags\",{\"1\":{\"25\":5}}],[\"target\",{\"1\":{\"24\":1,\"25\":1,\"99\":1}}],[\"type\",{\"1\":{\"24\":1,\"62\":1,\"63\":1}}],[\"枚举\",{\"1\":{\"24\":3}}],[\"lastindexof\",{\"1\":{\"99\":1}}],[\"latin1\",{\"1\":{\"95\":2}}],[\"latin\",{\"1\":{\"95\":7}}],[\"lang\",{\"1\":{\"24\":1,\"25\":2,\"29\":2,\"40\":1,\"41\":1,\"53\":1,\"88\":1,\"89\":3}}],[\"length\",{\"1\":{\"66\":1,\"87\":1,\"99\":1}}],[\"lists\",{\"1\":{\"62\":1}}],[\"list\",{\"1\":{\"29\":2,\"62\":1,\"68\":7,\"69\":8,\"70\":4,\"72\":2}}],[\"l\",{\"1\":{\"28\":4}}],[\"lower\",{\"1\":{\"69\":1}}],[\"lock\",{\"1\":{\"61\":4,\"109\":3}}],[\"loadclass\",{\"1\":{\"89\":1}}],[\"loadcargo\",{\"1\":{\"47\":3}}],[\"loaded\",{\"1\":{\"47\":2}}],[\"loadable\",{\"1\":{\"47\":5}}],[\"long\",{\"1\":{\"28\":4,\"29\":3,\"34\":5,\"100\":1}}],[\"lombok\",{\"1\":{\"22\":1}}],[\".\",{\"1\":{\"24\":10,\"25\":35,\"29\":18,\"31\":11,\"34\":10,\"37\":4,\"39\":14,\"40\":31,\"41\":2,\"46\":4,\"47\":14,\"49\":33,\"50\":38,\"51\":1,\"53\":2,\"59\":9,\"60\":1,\"61\":1,\"64\":9,\"65\":6,\"66\":9,\"68\":5,\"69\":8,\"70\":3,\"80\":12,\"81\":3,\"87\":21,\"88\":2,\"89\":26,\"90\":34,\"91\":29,\"92\":27,\"94\":20,\"95\":4,\"96\":12,\"97\":8,\"100\":8,\"109\":6}}],[\"定义\",{\"1\":{\"24\":2,\"25\":1,\"36\":1,\"40\":1,\"41\":1,\"43\":2,\"45\":1,\"46\":6,\"47\":5,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"80\":1}}],[\"定位\",{\"1\":{\"3\":1,\"41\":1}}],[\"用户\",{\"1\":{\"55\":1}}],[\"用法\",{\"1\":{\"35\":1}}],[\"用到\",{\"1\":{\"35\":1}}],[\"用\",{\"1\":{\"29\":1,\"31\":3,\"41\":1,\"43\":2,\"46\":1,\"47\":2,\"56\":1,\"57\":2,\"59\":1,\"80\":1,\"86\":1,\"95\":1}}],[\"用途\",{\"1\":{\"29\":1}}],[\"用来\",{\"1\":{\"24\":1,\"40\":1,\"45\":1,\"46\":1,\"56\":1,\"108\":1}}],[\"用于\",{\"1\":{\"22\":1,\"23\":2,\"30\":4,\"33\":1,\"34\":1,\"35\":3,\"47\":2,\"56\":5,\"57\":1,\"58\":1,\"60\":2,\"67\":1,\"68\":2,\"69\":2,\"70\":1,\"73\":2,\"78\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":2,\"84\":1,\"85\":1,\"86\":1,\"87\":1,\"99\":1,\"107\":1,\"111\":1,\"112\":1}}],[\"-\",{\"1\":{\"24\":1,\"28\":11,\"29\":8,\"31\":5,\"33\":11,\"34\":2,\"43\":2,\"47\":2,\"49\":2,\"50\":4,\"55\":1,\"57\":1,\"59\":1,\"61\":2,\"73\":1,\"95\":14,\"112\":2}}],[\"长度\",{\"1\":{\"99\":1}}],[\"长\",{\"0\":{\"87\":1},\"1\":{\"23\":2,\"31\":1,\"87\":9}}],[\"7\",{\"1\":{\"23\":1,\"28\":1,\"33\":1}}],[\"抽象类\",{\"0\":{\"44\":1,\"45\":1},\"1\":{\"45\":4,\"47\":9,\"82\":2}}],[\"抽象\",{\"1\":{\"23\":2,\"45\":4,\"46\":3,\"47\":6,\"82\":4}}],[\"即时\",{\"1\":{\"100\":1}}],[\"即使\",{\"1\":{\"39\":1,\"41\":1,\"55\":1,\"95\":1,\"109\":1}}],[\"即\",{\"1\":{\"23\":1,\"24\":1,\"37\":2,\"40\":1,\"43\":1,\"47\":1,\"57\":1,\"68\":1,\"69\":1,\"95\":2}}],[\"即将\",{\"1\":{\"3\":1}}],[\"函数\",{\"1\":{\"23\":1,\"35\":2,\"43\":4}}],[\")\",{\"1\":{\"23\":2,\"24\":5,\"25\":29,\"29\":13,\"31\":7,\"33\":2,\"34\":6,\"39\":15,\"40\":55,\"41\":14,\"43\":1,\"46\":10,\"47\":14,\"49\":26,\"50\":35,\"51\":1,\"55\":11,\"56\":2,\"57\":1,\"58\":3,\"59\":11,\"60\":2,\"61\":2,\"62\":3,\"63\":4,\"64\":11,\"65\":10,\"66\":15,\"68\":12,\"69\":15,\"70\":4,\"80\":14,\"81\":4,\"87\":3,\"88\":1,\"89\":17,\"90\":27,\"91\":30,\"92\":26,\"94\":9,\"95\":5,\"96\":16,\"97\":8,\"99\":22,\"100\":11,\"108\":1,\"109\":8}}],[\"8859\",{\"1\":{\"95\":2}}],[\"8\",{\"1\":{\"23\":1,\"24\":1,\"28\":5,\"34\":2,\"46\":3,\"47\":2,\"94\":1,\"95\":2}}],[\"(\",{\"1\":{\"23\":2,\"24\":5,\"25\":28,\"29\":13,\"31\":7,\"33\":2,\"34\":6,\"39\":15,\"40\":55,\"41\":14,\"43\":1,\"46\":10,\"47\":14,\"49\":26,\"50\":35,\"51\":1,\"55\":11,\"56\":2,\"57\":1,\"58\":3,\"59\":11,\"60\":2,\"61\":2,\"62\":3,\"63\":4,\"64\":11,\"65\":10,\"66\":15,\"68\":12,\"69\":15,\"70\":4,\"80\":14,\"81\":4,\"87\":3,\"88\":1,\"89\":17,\"90\":27,\"91\":30,\"92\":26,\"94\":9,\"95\":5,\"96\":16,\"97\":8,\"99\":22,\"100\":11,\"109\":8}}],[\"干净\",{\"1\":{\"23\":1}}],[\"使得\",{\"1\":{\"46\":1,\"57\":1}}],[\"使\",{\"1\":{\"23\":1,\"64\":1,\"109\":1}}],[\"使用\",{\"0\":{\"112\":1},\"1\":{\"22\":1,\"23\":3,\"24\":1,\"28\":2,\"29\":4,\"30\":2,\"31\":1,\"33\":4,\"34\":2,\"35\":1,\"36\":1,\"37\":4,\"40\":1,\"41\":1,\"43\":1,\"46\":1,\"47\":1,\"50\":1,\"55\":2,\"56\":1,\"57\":1,\"58\":2,\"60\":1,\"61\":2,\"62\":3,\"63\":2,\"65\":1,\"66\":3,\"71\":3,\"81\":3,\"87\":1,\"89\":2,\"90\":1,\"94\":1,\"95\":2,\"96\":2,\"100\":1,\"107\":1,\"109\":2,\"111\":1,\"112\":2}}],[\"忽略\",{\"1\":{\"23\":1,\"60\":1,\"99\":1}}],[\"且\",{\"1\":{\"23\":1,\"29\":1,\"47\":1,\"107\":1}}],[\"安全性\",{\"1\":{\"62\":1,\"98\":1}}],[\"安全\",{\"1\":{\"23\":2,\"46\":1,\"68\":1,\"69\":2,\"83\":1,\"91\":1,\"98\":4,\"112\":2}}],[\"\\\"\",{\"1\":{\"23\":6,\"25\":26,\"28\":2,\"29\":2,\"31\":6,\"39\":4,\"40\":6,\"46\":4,\"47\":14,\"49\":28,\"50\":28,\"58\":2,\"59\":6,\"64\":4,\"65\":4,\"66\":12,\"70\":2,\"80\":4,\"81\":2,\"89\":14,\"90\":24,\"91\":18,\"92\":18,\"94\":8,\"95\":2,\"96\":26,\"97\":6,\"100\":26,\"109\":4}}],[\"指明\",{\"1\":{\"62\":1}}],[\"指针\",{\"1\":{\"55\":1}}],[\"指向\",{\"1\":{\"39\":4,\"43\":1,\"49\":4,\"94\":1,\"96\":6,\"97\":1,\"100\":1}}],[\"指\",{\"1\":{\"35\":2}}],[\"指令\",{\"1\":{\"34\":2,\"109\":2,\"110\":2}}],[\"指定\",{\"1\":{\"23\":1,\"24\":2,\"62\":1,\"64\":1,\"68\":1,\"69\":1,\"73\":1,\"77\":1,\"99\":2}}],[\"指示\",{\"1\":{\"23\":1,\"58\":1,\"107\":1}}],[\"作为\",{\"1\":{\"23\":1,\"28\":1,\"43\":1,\"46\":1,\"100\":1,\"112\":1}}],[\"作用\",{\"0\":{\"22\":1},\"1\":{\"22\":1,\"29\":1,\"39\":1,\"41\":1,\"45\":1,\"99\":1,\"111\":1}}],[\"抑制\",{\"1\":{\"23\":2}}],[\"该类\",{\"1\":{\"36\":1,\"90\":1}}],[\"该\",{\"1\":{\"23\":1,\"24\":3,\"29\":1,\"35\":1,\"37\":1,\"41\":2,\"46\":1,\"56\":1,\"57\":3,\"58\":1,\"62\":1,\"68\":1,\"69\":1,\"80\":1,\"83\":1,\"84\":1,\"86\":1,\"96\":1,\"97\":1,\"109\":2,\"112\":1}}],[\"告知\",{\"1\":{\"23\":1}}],[\"告别\",{\"1\":{\"3\":1}}],[\"健壮性\",{\"1\":{\"23\":1,\"55\":1}}],[\"避免\",{\"1\":{\"23\":1,\"29\":1,\"87\":1,\"96\":1}}],[\"开头\",{\"1\":{\"99\":1}}],[\"开辟\",{\"1\":{\"96\":1}}],[\"开销\",{\"1\":{\"50\":1,\"98\":1,\"109\":1,\"111\":1}}],[\"开发\",{\"1\":{\"25\":1}}],[\"开发者\",{\"1\":{\"23\":2,\"55\":1,\"95\":1}}],[\"开始\",{\"1\":{\"3\":3,\"46\":3}}],[\"帮助\",{\"1\":{\"23\":1}}],[\"报错\",{\"1\":{\"23\":2,\"62\":1,\"68\":1}}],[\"匹配\",{\"1\":{\"23\":1,\"40\":1,\"60\":1,\"64\":1,\"87\":1}}],[\"名称\",{\"1\":{\"88\":1}}],[\"名\",{\"1\":{\"23\":1,\"25\":3,\"37\":6,\"89\":2,\"92\":1}}],[\"类上\",{\"1\":{\"66\":1}}],[\"类能\",{\"1\":{\"47\":1}}],[\"类来\",{\"1\":{\"46\":1,\"88\":1,\"112\":1}}],[\"类名\",{\"1\":{\"37\":3,\"45\":1,\"80\":1}}],[\"类中\",{\"1\":{\"29\":1,\"36\":1,\"37\":2,\"40\":4,\"41\":2,\"43\":1,\"66\":1,\"88\":1}}],[\"类图\",{\"1\":{\"25\":1}}],[\"类会\",{\"1\":{\"24\":1}}],[\"类型转换\",{\"1\":{\"40\":1,\"55\":1,\"62\":1,\"64\":2,\"99\":1}}],[\"类型\",{\"0\":{\"29\":1,\"67\":1},\"1\":{\"23\":2,\"25\":1,\"28\":5,\"29\":11,\"30\":5,\"34\":5,\"37\":3,\"39\":4,\"40\":1,\"43\":3,\"47\":3,\"49\":9,\"50\":5,\"51\":5,\"57\":1,\"59\":2,\"62\":7,\"63\":1,\"64\":5,\"65\":1,\"66\":7,\"67\":1,\"68\":5,\"69\":4,\"70\":4,\"72\":2,\"85\":2,\"87\":2,\"88\":1,\"92\":1,\"95\":2,\"110\":1}}],[\"类\",{\"0\":{\"64\":1},\"1\":{\"23\":2,\"24\":2,\"25\":2,\"29\":4,\"30\":1,\"36\":1,\"37\":8,\"40\":4,\"43\":4,\"45\":2,\"46\":3,\"47\":4,\"50\":2,\"53\":2,\"55\":1,\"62\":1,\"64\":2,\"66\":3,\"68\":3,\"69\":4,\"73\":1,\"75\":1,\"76\":2,\"77\":1,\"78\":4,\"80\":7,\"81\":5,\"82\":1,\"88\":2,\"89\":6,\"90\":2,\"91\":8,\"92\":6,\"94\":5,\"95\":4,\"96\":1,\"97\":1,\"98\":2,\"99\":1,\"107\":1}}],[\"父\",{\"1\":{\"23\":1,\"69\":1}}],[\"父类\",{\"1\":{\"22\":1,\"23\":1,\"37\":8,\"43\":12,\"45\":1,\"57\":1,\"68\":1,\"69\":1}}],[\"覆盖\",{\"1\":{\"23\":1,\"37\":1,\"112\":1}}],[\"特性\",{\"1\":{\"51\":1,\"62\":1,\"73\":1,\"87\":1,\"95\":1,\"110\":1,\"111\":1}}],[\"特征\",{\"1\":{\"43\":1}}],[\"特定条件\",{\"1\":{\"58\":1}}],[\"特定\",{\"1\":{\"23\":2,\"29\":1,\"35\":1,\"58\":1,\"80\":1,\"110\":1}}],[\"特殊\",{\"1\":{\"21\":1,\"47\":1,\"60\":1,\"73\":1,\"96\":1}}],[\"可接\",{\"1\":{\"60\":1}}],[\"可维护性\",{\"1\":{\"46\":1}}],[\"可\",{\"1\":{\"25\":1,\"29\":2,\"45\":2,\"90\":1,\"95\":1}}],[\"可见\",{\"0\":{\"108\":1},\"1\":{\"25\":1,\"73\":1,\"84\":1,\"107\":1,\"108\":1,\"109\":2,\"110\":3,\"111\":2,\"112\":2}}],[\"可用\",{\"1\":{\"24\":1,\"61\":1}}],[\"可变性\",{\"0\":{\"94\":1},\"1\":{\"94\":1,\"98\":1}}],[\"可变\",{\"0\":{\"87\":1},\"1\":{\"23\":2,\"51\":1,\"87\":10,\"98\":1}}],[\"可能\",{\"1\":{\"23\":1,\"29\":1,\"35\":1,\"41\":3,\"47\":2,\"55\":2,\"56\":2,\"57\":2,\"60\":1,\"95\":1,\"109\":1,\"110\":2,\"112\":1}}],[\"可读性\",{\"1\":{\"22\":1,\"46\":1,\"62\":1}}],[\"可以\",{\"1\":{\"21\":1,\"22\":2,\"23\":2,\"24\":4,\"25\":2,\"29\":2,\"30\":2,\"33\":1,\"34\":1,\"37\":5,\"41\":1,\"43\":6,\"46\":5,\"47\":13,\"49\":1,\"51\":1,\"55\":4,\"57\":2,\"58\":3,\"59\":2,\"61\":2,\"62\":2,\"64\":1,\"65\":1,\"66\":1,\"67\":1,\"68\":4,\"69\":4,\"70\":1,\"75\":1,\"76\":1,\"77\":1,\"80\":1,\"83\":1,\"87\":2,\"88\":1,\"89\":4,\"90\":3,\"91\":2,\"92\":2,\"94\":1,\"95\":1,\"97\":1,\"100\":4,\"107\":1,\"111\":2}}],[\"复合\",{\"1\":{\"112\":3}}],[\"复制\",{\"1\":{\"49\":1,\"50\":3}}],[\"复杂\",{\"1\":{\"43\":1,\"51\":1,\"111\":1}}],[\"复杂性\",{\"1\":{\"22\":1,\"51\":1}}],[\"复用\",{\"1\":{\"43\":2}}],[\"复习\",{\"1\":{\"3\":1}}],[\"依然\",{\"1\":{\"97\":1,\"108\":1}}],[\"依赖\",{\"1\":{\"22\":1}}],[\"依旧\",{\"1\":{\"3\":1}}],[\"atomicinteger\",{\"1\":{\"112\":1}}],[\"append\",{\"1\":{\"100\":1}}],[\"alice\",{\"1\":{\"90\":2}}],[\"access\",{\"1\":{\"73\":2}}],[\"aslist\",{\"1\":{\"68\":2}}],[\"assigndriver\",{\"1\":{\"47\":1}}],[\"abc\",{\"1\":{\"64\":1,\"97\":3}}],[\"abstractlist\",{\"1\":{\"62\":1}}],[\"abstract\",{\"1\":{\"45\":2,\"46\":2,\"47\":3,\"82\":2}}],[\"age\",{\"1\":{\"49\":7,\"50\":6,\"90\":10,\"91\":1}}],[\"aequals\",{\"1\":{\"41\":1}}],[\"arithmeticexception\",{\"1\":{\"55\":1,\"58\":1,\"59\":3}}],[\"arrays\",{\"1\":{\"68\":2}}],[\"array\",{\"1\":{\"66\":4}}],[\"arrayindexoutofboundsexception\",{\"1\":{\"55\":1}}],[\"arraylist\",{\"1\":{\"40\":1,\"62\":4,\"69\":2}}],[\"args\",{\"1\":{\"25\":1,\"49\":1,\"50\":1,\"64\":1,\"65\":1,\"66\":1,\"68\":1,\"69\":1,\"80\":3,\"109\":1}}],[\"addnumbers\",{\"1\":{\"69\":3}}],[\"add\",{\"1\":{\"31\":1,\"68\":1,\"69\":3,\"70\":1}}],[\"a\",{\"1\":{\"28\":3,\"29\":5,\"30\":2,\"31\":2,\"33\":3,\"34\":4,\"39\":3,\"41\":3,\"45\":3,\"47\":2,\"80\":1}}],[\"aop\",{\"1\":{\"25\":1}}],[\"anotherstring\",{\"1\":{\"99\":2}}],[\"anotheroperation\",{\"1\":{\"25\":2}}],[\"anobject\",{\"1\":{\"99\":1}}],[\"and\",{\"1\":{\"46\":1}}],[\"an\",{\"1\":{\"46\":1}}],[\"animal\",{\"1\":{\"43\":3}}],[\"annotationelement\",{\"1\":{\"25\":5}}],[\"annotations\",{\"1\":{\"24\":1,\"25\":1}}],[\"annotation\",{\"1\":{\"21\":1,\"24\":1,\"25\":4}}],[\"autowired\",{\"1\":{\"22\":1,\"24\":1}}],[\"调用者\",{\"1\":{\"57\":3,\"60\":1}}],[\"调用\",{\"0\":{\"92\":1},\"1\":{\"30\":1,\"36\":1,\"37\":7,\"41\":4,\"43\":3,\"46\":1,\"50\":2,\"51\":1,\"55\":1,\"58\":1,\"80\":2,\"87\":1,\"88\":1,\"90\":3,\"92\":2,\"100\":2}}],[\"调整\",{\"1\":{\"22\":1}}],[\"调皮\",{\"1\":{\"3\":1}}],[\"据此\",{\"1\":{\"22\":1}}],[\"反\",{\"1\":{\"50\":1,\"85\":1}}],[\"反编译\",{\"1\":{\"46\":1}}],[\"反而\",{\"1\":{\"29\":1}}],[\"反射\",{\"0\":{\"88\":1},\"1\":{\"22\":1,\"24\":2,\"25\":4,\"29\":1,\"88\":4,\"89\":1,\"91\":1,\"92\":1}}],[\"反问\",{\"1\":{\"3\":1}}],[\"jni\",{\"1\":{\"86\":1}}],[\"jdk\",{\"0\":{\"95\":1},\"1\":{\"41\":1,\"62\":1,\"95\":7,\"107\":1}}],[\"jvm\",{\"1\":{\"23\":1,\"29\":1,\"37\":1,\"54\":2,\"60\":1,\"95\":3,\"96\":4,\"100\":1,\"107\":1,\"109\":1,\"112\":1}}],[\"junit\",{\"1\":{\"22\":1,\"88\":1}}],[\"javac\",{\"1\":{\"100\":2}}],[\"javadoc\",{\"1\":{\"24\":1,\"25\":1}}],[\"java\",{\"0\":{\"8\":1,\"101\":1,\"104\":1,\"118\":1},\"1\":{\"8\":1,\"21\":2,\"22\":1,\"23\":3,\"24\":3,\"25\":3,\"28\":3,\"29\":3,\"31\":1,\"34\":1,\"36\":1,\"39\":1,\"40\":2,\"41\":2,\"43\":1,\"46\":5,\"47\":4,\"53\":2,\"56\":1,\"57\":1,\"58\":1,\"62\":1,\"66\":3,\"72\":1,\"73\":1,\"86\":3,\"87\":1,\"88\":4,\"89\":3,\"90\":1,\"94\":3,\"95\":5,\"96\":1,\"98\":1,\"100\":1,\"107\":2,\"109\":1}}],[\"sleep\",{\"1\":{\"109\":1}}],[\"snooping\",{\"1\":{\"109\":1}}],[\"split\",{\"1\":{\"99\":1}}],[\"spring\",{\"1\":{\"22\":2,\"24\":1,\"88\":1}}],[\"synchronized\",{\"1\":{\"98\":1,\"111\":2,\"112\":5}}],[\"system\",{\"1\":{\"25\":8,\"29\":3,\"31\":2,\"34\":5,\"39\":7,\"40\":8,\"46\":1,\"47\":5,\"49\":7,\"50\":7,\"59\":3,\"60\":1,\"64\":2,\"65\":1,\"66\":4,\"68\":1,\"69\":2,\"70\":1,\"80\":3,\"81\":1,\"89\":4,\"90\":5,\"91\":7,\"92\":5,\"94\":5,\"96\":5,\"97\":3,\"100\":4,\"109\":2}}],[\"s4\",{\"1\":{\"97\":1}}],[\"saysomethingmethod\",{\"1\":{\"92\":2}}],[\"saysomething\",{\"1\":{\"90\":1,\"92\":2}}],[\"safevarargs\",{\"1\":{\"23\":1}}],[\"something\",{\"1\":{\"57\":1,\"70\":1}}],[\"source\",{\"1\":{\"24\":1}}],[\"sqlexception\",{\"1\":{\"55\":1}}],[\"suffix\",{\"1\":{\"87\":1,\"99\":1}}],[\"substring\",{\"1\":{\"94\":1,\"99\":2}}],[\"subclass\",{\"1\":{\"81\":1}}],[\"subjectdeep\",{\"1\":{\"50\":12}}],[\"subjectname\",{\"1\":{\"49\":2,\"50\":2}}],[\"subject\",{\"1\":{\"49\":17,\"50\":11}}],[\"super\",{\"1\":{\"49\":1,\"50\":3,\"51\":1,\"69\":1,\"71\":4}}],[\"suppresswarnings\",{\"1\":{\"23\":1}}],[\"s3\",{\"1\":{\"39\":4,\"40\":2,\"97\":4,\"100\":2}}],[\"s2\",{\"1\":{\"39\":4,\"40\":2,\"97\":4,\"100\":4}}],[\"s1\",{\"1\":{\"39\":8,\"40\":3,\"97\":5,\"100\":4}}],[\"shallow\",{\"1\":{\"51\":1}}],[\"shallowcopydemo\",{\"1\":{\"49\":1}}],[\"shawn\",{\"1\":{\"46\":1,\"90\":2,\"91\":1,\"92\":1}}],[\"shift\",{\"1\":{\"34\":1}}],[\"short\",{\"1\":{\"28\":3,\"29\":3,\"34\":2,\"100\":1}}],[\"s\",{\"1\":{\"28\":1,\"64\":2,\"66\":1,\"89\":2,\"94\":11,\"99\":1}}],[\"set\",{\"1\":{\"91\":1}}],[\"setaccessible\",{\"1\":{\"91\":2,\"92\":1}}],[\"setcontent\",{\"1\":{\"64\":2}}],[\"setter\",{\"1\":{\"22\":1,\"78\":1}}],[\"serializable\",{\"1\":{\"50\":1,\"94\":1,\"95\":1}}],[\"serviceclass\",{\"1\":{\"25\":2}}],[\"str\",{\"1\":{\"99\":2,\"100\":5}}],[\"str5\",{\"1\":{\"96\":4}}],[\"str4\",{\"1\":{\"96\":4}}],[\"str3\",{\"1\":{\"96\":6,\"100\":2}}],[\"str2\",{\"1\":{\"96\":3,\"100\":6}}],[\"str1\",{\"1\":{\"96\":3,\"100\":5}}],[\"stringbuilder\",{\"1\":{\"98\":4,\"100\":1}}],[\"stringbuffer\",{\"1\":{\"98\":4}}],[\"stringbox\",{\"1\":{\"64\":2}}],[\"strings\",{\"1\":{\"95\":2}}],[\"stringclassfromobject\",{\"1\":{\"89\":2}}],[\"stringclass\",{\"1\":{\"89\":2}}],[\"stringarray\",{\"1\":{\"66\":3}}],[\"string\",{\"0\":{\"93\":1},\"1\":{\"25\":4,\"28\":1,\"39\":7,\"40\":7,\"46\":6,\"47\":6,\"49\":7,\"50\":6,\"51\":1,\"62\":3,\"64\":3,\"65\":2,\"66\":4,\"68\":1,\"69\":1,\"72\":1,\"80\":3,\"87\":3,\"89\":7,\"90\":6,\"91\":2,\"92\":4,\"94\":12,\"95\":10,\"96\":11,\"97\":7,\"98\":4,\"99\":9,\"100\":16,\"109\":1}}],[\"storage\",{\"1\":{\"94\":1}}],[\"start\",{\"1\":{\"109\":1}}],[\"startswith\",{\"1\":{\"99\":1}}],[\"stable\",{\"1\":{\"95\":1}}],[\"status\",{\"1\":{\"112\":1}}],[\"statements\",{\"1\":{\"57\":1}}],[\"staticmethod\",{\"1\":{\"80\":2}}],[\"staticvar\",{\"1\":{\"80\":3}}],[\"static\",{\"1\":{\"25\":1,\"29\":1,\"36\":1,\"37\":2,\"46\":9,\"47\":2,\"49\":1,\"50\":1,\"57\":1,\"58\":1,\"59\":2,\"64\":1,\"65\":1,\"66\":4,\"68\":2,\"69\":2,\"70\":1,\"80\":10,\"100\":1,\"109\":4}}],[\"stackoverflowerror\",{\"1\":{\"54\":1}}],[\"studentdeep\",{\"1\":{\"50\":8}}],[\"studentname\",{\"1\":{\"49\":7,\"50\":6}}],[\"student\",{\"1\":{\"49\":6}}],[\"如何\",{\"1\":{\"31\":1,\"47\":2,\"87\":1}}],[\"如果\",{\"1\":{\"23\":2,\"24\":1,\"30\":1,\"37\":1,\"40\":1,\"41\":10,\"43\":2,\"45\":1,\"46\":2,\"55\":2,\"56\":1,\"57\":2,\"60\":2,\"62\":1,\"69\":2,\"71\":2,\"77\":1,\"80\":1,\"87\":2,\"89\":4,\"90\":1,\"91\":1,\"95\":2,\"96\":5,\"97\":1,\"100\":1,\"107\":1,\"108\":1,\"109\":2,\"112\":2}}],[\"如\",{\"1\":{\"22\":1,\"23\":1,\"24\":3,\"29\":3,\"30\":2,\"34\":1,\"41\":1,\"51\":1,\"55\":1,\"56\":1,\"58\":2,\"63\":1,\"85\":1,\"86\":1,\"87\":1,\"88\":2,\"94\":1,\"98\":1}}],[\"如下\",{\"1\":{\"22\":1,\"25\":3,\"28\":1,\"29\":1,\"37\":1,\"43\":1,\"46\":2,\"64\":1,\"65\":1,\"66\":1,\"68\":1,\"69\":1,\"90\":2,\"91\":5,\"92\":3,\"94\":1,\"100\":1,\"108\":1,\"109\":2}}],[\"许多\",{\"1\":{\"22\":1,\"40\":1,\"46\":1,\"88\":1}}],[\"/\",{\"0\":{\"98\":1},\"1\":{\"22\":1,\"25\":14,\"29\":10,\"30\":6,\"31\":9,\"33\":8,\"34\":16,\"37\":2,\"39\":30,\"40\":28,\"43\":3,\"45\":8,\"46\":8,\"49\":24,\"50\":16,\"55\":1,\"57\":2,\"58\":3,\"59\":4,\"60\":6,\"61\":6,\"64\":14,\"66\":4,\"68\":12,\"69\":10,\"70\":6,\"71\":2,\"78\":1,\"80\":6,\"81\":18,\"86\":1,\"87\":14,\"90\":24,\"91\":18,\"92\":12,\"94\":8,\"96\":22,\"97\":12,\"99\":10,\"100\":18,\"109\":10}}],[\"生产\",{\"1\":{\"71\":1}}],[\"生出\",{\"1\":{\"53\":1}}],[\"生存\",{\"1\":{\"36\":1}}],[\"生命周期\",{\"1\":{\"24\":1}}],[\"生成\",{\"1\":{\"22\":2,\"100\":1,\"109\":1}}],[\"生活\",{\"0\":{\"3\":1},\"1\":{\"3\":7}}],[\"地往\",{\"1\":{\"69\":1}}],[\"地址\",{\"1\":{\"29\":1,\"39\":1,\"40\":2,\"41\":1,\"49\":1,\"50\":1,\"94\":5,\"112\":1}}],[\"地方\",{\"1\":{\"29\":1,\"58\":1}}],[\"地\",{\"1\":{\"22\":1,\"23\":1,\"41\":1,\"43\":1,\"50\":1,\"51\":1,\"58\":1,\"60\":1,\"68\":1,\"69\":1,\"88\":1,\"98\":1}}],[\"oldchar\",{\"1\":{\"99\":1}}],[\"overridden\",{\"1\":{\"81\":1}}],[\"override\",{\"1\":{\"22\":1,\"23\":1,\"24\":1,\"40\":3,\"47\":5,\"49\":1,\"50\":2,\"65\":2,\"90\":1,\"109\":1}}],[\"o\",{\"1\":{\"70\":2}}],[\"ordering\",{\"1\":{\"107\":1}}],[\"orderedpair\",{\"1\":{\"65\":3}}],[\"originalstudent\",{\"1\":{\"49\":5,\"50\":5}}],[\"oriented\",{\"1\":{\"43\":2}}],[\"off\",{\"1\":{\"47\":1}}],[\"offer\",{\"1\":{\"3\":2}}],[\"of\",{\"1\":{\"46\":1}}],[\"oop\",{\"1\":{\"43\":3}}],[\"other\",{\"1\":{\"40\":3}}],[\"o2\",{\"1\":{\"40\":2}}],[\"o1\",{\"1\":{\"40\":2}}],[\"obj2\",{\"1\":{\"80\":2}}],[\"obj1\",{\"1\":{\"80\":2}}],[\"obj\",{\"1\":{\"40\":7,\"41\":2,\"80\":1}}],[\"objects\",{\"1\":{\"40\":1,\"69\":3}}],[\"object\",{\"1\":{\"40\":10,\"41\":4,\"43\":1,\"49\":1,\"50\":2,\"62\":1,\"69\":3,\"70\":3,\"72\":2,\"90\":1,\"99\":1}}],[\"operators\",{\"1\":{\"34\":1}}],[\"outofmemoryerror\",{\"1\":{\"54\":1,\"58\":1}}],[\"out\",{\"1\":{\"25\":8,\"29\":3,\"31\":2,\"34\":5,\"39\":7,\"40\":8,\"46\":1,\"47\":5,\"49\":7,\"50\":7,\"59\":3,\"64\":2,\"65\":1,\"66\":4,\"68\":1,\"69\":2,\"70\":1,\"80\":3,\"81\":1,\"89\":4,\"90\":5,\"91\":7,\"92\":5,\"94\":3,\"96\":5,\"97\":3,\"100\":4,\"109\":2}}],[\"@\",{\"1\":{\"22\":2,\"23\":7,\"24\":7,\"25\":6,\"40\":2,\"47\":5,\"49\":1,\"50\":2,\"65\":2,\"90\":1,\"95\":1,\"109\":1}}],[\"警告\",{\"1\":{\"22\":1,\"23\":5}}],[\"错误\",{\"1\":{\"22\":1,\"23\":1,\"41\":1,\"55\":3,\"57\":1,\"58\":2,\"62\":1,\"64\":1,\"68\":1,\"69\":1,\"70\":1,\"81\":3,\"87\":2,\"110\":1}}],[\"进锁\",{\"1\":{\"112\":1}}],[\"进一步\",{\"1\":{\"41\":1}}],[\"进行\",{\"1\":{\"22\":1,\"29\":1,\"30\":1,\"31\":1,\"33\":1,\"34\":3,\"37\":1,\"40\":1,\"43\":1,\"50\":3,\"55\":1,\"62\":1,\"67\":1,\"78\":1,\"84\":1,\"86\":1,\"91\":1,\"98\":1,\"100\":4,\"107\":1,\"108\":1,\"109\":1,\"110\":1}}],[\"进步\",{\"1\":{\"3\":3}}],[\"：\",{\"1\":{\"22\":5,\"23\":6,\"24\":9,\"28\":8,\"29\":7,\"30\":2,\"31\":5,\"33\":1,\"34\":9,\"35\":6,\"36\":1,\"37\":1,\"39\":1,\"40\":6,\"41\":4,\"43\":6,\"46\":6,\"47\":9,\"49\":3,\"50\":8,\"53\":1,\"55\":3,\"56\":6,\"57\":1,\"58\":4,\"59\":2,\"60\":10,\"64\":1,\"65\":1,\"66\":2,\"68\":1,\"69\":1,\"70\":1,\"71\":3,\"73\":3,\"80\":4,\"81\":6,\"82\":2,\"87\":7,\"89\":6,\"90\":5,\"91\":8,\"92\":5,\"94\":2,\"95\":6,\"99\":1,\"100\":4,\"107\":1,\"108\":5,\"109\":3,\"110\":1,\"111\":1,\"112\":8}}],[\"其值\",{\"1\":{\"100\":1}}],[\"其父\",{\"1\":{\"69\":1}}],[\"其后\",{\"1\":{\"60\":2}}],[\"其本质\",{\"1\":{\"39\":1}}],[\"其中\",{\"1\":{\"25\":1,\"49\":1}}],[\"其子\",{\"1\":{\"24\":1,\"68\":2,\"69\":1}}],[\"其他\",{\"1\":{\"24\":1,\"41\":2,\"47\":1,\"60\":1,\"62\":1,\"77\":1,\"87\":2,\"99\":1,\"108\":1,\"109\":3,\"110\":1,\"111\":1,\"112\":2}}],[\"其\",{\"1\":{\"22\":2,\"25\":1,\"34\":1,\"41\":1,\"45\":1,\"50\":2,\"51\":1,\"53\":1,\"64\":1,\"66\":1,\"67\":1,\"68\":1,\"69\":1,\"89\":1,\"91\":1,\"95\":1,\"96\":1,\"100\":5,\"109\":2}}],[\"其实\",{\"1\":{\"3\":2,\"46\":1}}],[\"操作系统\",{\"1\":{\"54\":1}}],[\"操作符\",{\"1\":{\"34\":1}}],[\"操作\",{\"0\":{\"91\":1},\"1\":{\"22\":1,\"25\":3,\"30\":2,\"33\":1,\"34\":5,\"41\":1,\"43\":3,\"47\":1,\"55\":1,\"61\":2,\"64\":1,\"65\":1,\"87\":1,\"88\":1,\"89\":1,\"98\":1,\"99\":1,\"108\":4,\"109\":1,\"110\":5,\"111\":2,\"112\":5}}],[\"相对\",{\"1\":{\"98\":1}}],[\"相反\",{\"1\":{\"69\":1}}],[\"相互\",{\"1\":{\"49\":1}}],[\"相符\",{\"1\":{\"41\":1}}],[\"相等\",{\"1\":{\"37\":1,\"39\":2,\"40\":5,\"41\":5,\"99\":1}}],[\"相同\",{\"1\":{\"34\":1,\"37\":3,\"39\":1,\"40\":2,\"41\":6,\"96\":4,\"97\":1}}],[\"相当于\",{\"1\":{\"34\":2,\"100\":1}}],[\"相比之下\",{\"1\":{\"34\":1}}],[\"相关\",{\"1\":{\"25\":1,\"37\":1,\"107\":2}}],[\"相较\",{\"1\":{\"22\":1}}],[\"相应\",{\"1\":{\"22\":1,\"34\":1,\"41\":1,\"61\":2}}],[\"相信\",{\"1\":{\"3\":1}}],[\"根据\",{\"1\":{\"22\":2,\"25\":1,\"37\":2,\"41\":2,\"99\":1}}],[\"框架\",{\"1\":{\"22\":2,\"30\":1,\"88\":1}}],[\"工厂\",{\"1\":{\"50\":1}}],[\"工具\",{\"1\":{\"22\":1,\"46\":1,\"88\":1}}],[\"工作\",{\"1\":{\"3\":3,\"88\":1,\"108\":4,\"109\":1}}],[\"被子\",{\"1\":{\"45\":1,\"47\":1,\"81\":1,\"94\":1}}],[\"被\",{\"1\":{\"22\":1,\"23\":4,\"24\":3,\"31\":1,\"36\":1,\"37\":3,\"40\":2,\"41\":3,\"43\":1,\"45\":2,\"46\":2,\"47\":2,\"50\":3,\"55\":1,\"56\":3,\"57\":1,\"60\":12,\"61\":3,\"66\":1,\"72\":3,\"75\":2,\"76\":2,\"77\":1,\"78\":2,\"81\":1,\"82\":1,\"84\":1,\"85\":3,\"87\":2,\"94\":2,\"95\":1,\"100\":1,\"108\":2,\"109\":3,\"112\":3}}],[\"业务\",{\"1\":{\"22\":1,\"43\":1,\"111\":1}}],[\"标识\",{\"1\":{\"47\":2}}],[\"标志\",{\"1\":{\"34\":1,\"111\":1,\"112\":3}}],[\"标准\",{\"1\":{\"23\":1}}],[\"标记\",{\"1\":{\"22\":1,\"23\":7,\"24\":4,\"109\":1,\"111\":1}}],[\"标题\",{\"0\":{\"5\":1,\"6\":1,\"10\":1,\"11\":1,\"13\":1,\"14\":1,\"16\":1,\"17\":1,\"19\":1,\"20\":1,\"102\":1,\"103\":1,\"105\":1,\"106\":1}}],[\"机器指令\",{\"1\":{\"112\":1}}],[\"机制\",{\"0\":{\"56\":1},\"1\":{\"21\":1,\"29\":5,\"31\":1,\"39\":2,\"111\":3}}],[\"机会\",{\"1\":{\"3\":1}}],[\"运输工具\",{\"1\":{\"47\":4}}],[\"运算符\",{\"0\":{\"32\":1,\"33\":1,\"34\":1,\"39\":1},\"1\":{\"33\":2,\"34\":5,\"39\":2,\"40\":1}}],[\"运算\",{\"0\":{\"31\":1},\"1\":{\"33\":1,\"34\":1,\"100\":2}}],[\"运行\",{\"1\":{\"21\":1,\"22\":3,\"24\":2,\"25\":1,\"35\":1,\"37\":1,\"49\":1,\"50\":1,\"55\":2,\"57\":1,\"58\":1,\"68\":1,\"72\":1,\"88\":2,\"100\":2,\"109\":1}}],[\"运动\",{\"1\":{\"3\":1}}],[\"或子\",{\"1\":{\"99\":1}}],[\"或硬件\",{\"1\":{\"54\":1}}],[\"或者\",{\"1\":{\"25\":1,\"35\":1,\"37\":1,\"46\":1,\"47\":2,\"55\":1,\"56\":3,\"57\":1}}],[\"或元\",{\"1\":{\"22\":1}}],[\"或\",{\"1\":{\"21\":1,\"22\":3,\"23\":5,\"24\":1,\"28\":1,\"33\":2,\"34\":2,\"37\":1,\"40\":1,\"43\":1,\"45\":1,\"46\":1,\"47\":2,\"50\":1,\"51\":1,\"54\":1,\"55\":2,\"57\":1,\"58\":2,\"60\":3,\"68\":3,\"69\":4,\"75\":1,\"76\":1,\"78\":1,\"80\":1,\"81\":2,\"83\":1,\"84\":1,\"85\":1,\"87\":1,\"88\":2,\"90\":2,\"94\":1,\"97\":1,\"99\":1,\"108\":1,\"111\":1,\"112\":3}}],[\"或许\",{\"1\":{\"3\":2}}],[\"样板\",{\"1\":{\"21\":1}}],[\"样子\",{\"1\":{\"3\":1}}],[\"简单\",{\"1\":{\"50\":1,\"51\":1,\"108\":1}}],[\"简化\",{\"1\":{\"21\":1,\"22\":1,\"87\":1}}],[\"简历\",{\"1\":{\"3\":1}}],[\"5\",{\"1\":{\"21\":1,\"25\":2,\"33\":2,\"62\":1,\"66\":2,\"87\":1,\"107\":1}}],[\"器是\",{\"1\":{\"90\":1}}],[\"器去\",{\"1\":{\"89\":1}}],[\"器\",{\"1\":{\"21\":1,\"23\":1,\"36\":1,\"50\":1,\"90\":8}}],[\"构造方法\",{\"1\":{\"37\":1,\"45\":1,\"46\":1,\"81\":1}}],[\"构造\",{\"1\":{\"21\":1,\"23\":1,\"31\":2,\"36\":1,\"50\":2,\"90\":9}}],[\"局部变量\",{\"1\":{\"21\":1,\"36\":4}}],[\"局限性\",{\"1\":{\"3\":1}}],[\"段\",{\"1\":{\"21\":1,\"23\":1,\"24\":1,\"40\":1,\"73\":1,\"75\":1,\"76\":1,\"78\":1,\"80\":1,\"84\":1,\"85\":1,\"88\":1,\"91\":2}}],[\"段时间\",{\"1\":{\"3\":1}}],[\"字典\",{\"1\":{\"99\":1}}],[\"字面\",{\"1\":{\"96\":2}}],[\"字节\",{\"1\":{\"28\":1,\"46\":1,\"50\":2,\"72\":1,\"85\":1,\"95\":8,\"99\":1,\"100\":2}}],[\"字符\",{\"1\":{\"28\":1,\"40\":1,\"94\":2,\"95\":17,\"98\":2,\"99\":4}}],[\"字符串\",{\"0\":{\"96\":1},\"1\":{\"23\":1,\"31\":1,\"40\":1,\"87\":1,\"94\":3,\"95\":12,\"96\":10,\"97\":3,\"98\":1,\"99\":11,\"100\":14}}],[\"字段\",{\"0\":{\"91\":1},\"1\":{\"24\":1,\"84\":1,\"85\":2,\"88\":1,\"90\":3,\"91\":12,\"95\":5}}],[\"字\",{\"1\":{\"21\":1,\"23\":1,\"24\":1,\"73\":1,\"75\":1,\"76\":1,\"78\":1,\"80\":1,\"84\":1,\"85\":1,\"88\":1,\"91\":2}}],[\"方式\",{\"1\":{\"37\":7,\"43\":2,\"50\":4,\"89\":2,\"100\":1}}],[\"方案\",{\"1\":{\"23\":1}}],[\"方法\",{\"0\":{\"37\":1,\"40\":1,\"41\":1,\"66\":1,\"92\":1,\"97\":1,\"99\":1},\"1\":{\"21\":1,\"22\":2,\"23\":9,\"24\":2,\"25\":8,\"29\":3,\"30\":4,\"35\":5,\"36\":4,\"37\":21,\"40\":8,\"41\":12,\"43\":16,\"45\":6,\"46\":26,\"47\":12,\"50\":4,\"55\":3,\"56\":3,\"57\":5,\"58\":3,\"60\":1,\"62\":1,\"66\":8,\"67\":1,\"73\":1,\"75\":1,\"76\":1,\"77\":1,\"78\":2,\"80\":2,\"81\":4,\"82\":6,\"83\":2,\"86\":2,\"87\":4,\"88\":3,\"90\":2,\"92\":12,\"94\":2,\"97\":1,\"98\":2,\"99\":2,\"100\":1,\"111\":1}}],[\"方向\",{\"1\":{\"3\":4}}],[\"应比\",{\"1\":{\"37\":1}}],[\"应对\",{\"1\":{\"31\":1}}],[\"应该\",{\"1\":{\"30\":1,\"54\":1}}],[\"应用程序\",{\"1\":{\"41\":1,\"54\":1,\"95\":2}}],[\"应用\",{\"1\":{\"21\":1,\"24\":3,\"25\":2,\"95\":1}}],[\"应试\",{\"1\":{\"3\":1}}],[\"逻辑\",{\"1\":{\"21\":1,\"22\":1,\"37\":1,\"40\":1,\"41\":1,\"43\":1,\"46\":1,\"58\":1,\"111\":1}}],[\"本地\",{\"1\":{\"60\":2,\"86\":2,\"108\":1}}],[\"本类\",{\"1\":{\"37\":1}}],[\"本质\",{\"0\":{\"22\":1},\"1\":{\"22\":1,\"111\":1,\"112\":1}}],[\"本身\",{\"1\":{\"21\":1,\"34\":1,\"46\":1,\"50\":1,\"51\":2,\"55\":1,\"80\":1,\"94\":1,\"112\":1}}],[\"本科\",{\"1\":{\"3\":1}}],[\"额外\",{\"1\":{\"21\":1,\"22\":1,\"98\":1}}],[\"提前\",{\"1\":{\"35\":1}}],[\"提高效率\",{\"1\":{\"108\":1}}],[\"提高\",{\"1\":{\"22\":1,\"23\":1,\"41\":1,\"46\":3,\"55\":1,\"62\":1,\"110\":1}}],[\"提供\",{\"1\":{\"21\":2,\"23\":1,\"24\":1,\"25\":1,\"29\":1,\"40\":1,\"41\":1,\"43\":1,\"45\":1,\"46\":3,\"47\":2,\"56\":1,\"71\":1,\"78\":1,\"94\":1,\"98\":1,\"99\":1,\"111\":2}}],[\"提升\",{\"1\":{\"3\":2,\"96\":1}}],[\"为了\",{\"1\":{\"62\":1,\"87\":1,\"95\":3,\"96\":3,\"108\":1,\"110\":1}}],[\"为例\",{\"1\":{\"41\":1,\"61\":1}}],[\"为空\",{\"1\":{\"40\":1,\"99\":1}}],[\"为止\",{\"1\":{\"31\":1}}],[\"为\",{\"1\":{\"21\":1,\"28\":1,\"29\":1,\"30\":2,\"31\":2,\"34\":1,\"36\":2,\"37\":1,\"40\":1,\"41\":1,\"43\":3,\"45\":1,\"58\":1,\"66\":1,\"68\":2,\"69\":2,\"72\":2,\"85\":4,\"95\":3,\"99\":3,\"107\":1,\"109\":1}}],[\"为什么\",{\"1\":{\"3\":2,\"31\":1,\"37\":1,\"46\":1}}],[\"它会\",{\"1\":{\"41\":1,\"110\":1}}],[\"它们\",{\"1\":{\"24\":1,\"33\":1,\"41\":3,\"50\":2,\"51\":1,\"54\":1,\"55\":1,\"57\":1,\"70\":1,\"72\":1,\"78\":1,\"85\":1,\"88\":1,\"92\":1,\"95\":1,\"111\":1}}],[\"它\",{\"1\":{\"21\":1,\"22\":1,\"33\":2,\"36\":1,\"40\":2,\"41\":4,\"43\":1,\"46\":3,\"47\":4,\"55\":2,\"56\":1,\"57\":1,\"62\":1,\"68\":1,\"69\":2,\"77\":1,\"82\":1,\"84\":1,\"87\":1,\"89\":1,\"90\":1,\"94\":2,\"95\":2,\"96\":4,\"98\":2,\"107\":2,\"110\":2,\"111\":1,\"112\":3}}],[\"元素\",{\"1\":{\"21\":1,\"23\":2,\"24\":2,\"25\":5,\"68\":3,\"70\":3,\"73\":1}}],[\"元\",{\"0\":{\"24\":1},\"1\":{\"21\":1,\"24\":3}}],[\"数量\",{\"1\":{\"87\":2}}],[\"数\",{\"1\":{\"31\":1}}],[\"数值\",{\"1\":{\"28\":2,\"29\":2,\"30\":1,\"34\":2,\"36\":1,\"87\":1}}],[\"数字\",{\"1\":{\"28\":1,\"31\":1}}],[\"数组\",{\"1\":{\"23\":1,\"24\":1,\"25\":1,\"41\":1,\"49\":1,\"55\":1,\"87\":3,\"94\":4,\"95\":4,\"99\":2}}],[\"数据完整性\",{\"1\":{\"111\":1}}],[\"数据库\",{\"1\":{\"55\":1,\"56\":1,\"61\":1}}],[\"数据\",{\"1\":{\"21\":1,\"22\":1,\"28\":2,\"37\":2,\"43\":7,\"50\":1,\"68\":1,\"69\":1,\"71\":2,\"99\":1,\"109\":2,\"112\":1}}],[\"数据类型\",{\"0\":{\"18\":1,\"27\":1,\"28\":1},\"1\":{\"28\":2,\"39\":4,\"49\":4,\"51\":1,\"100\":4}}],[\"数据结构\",{\"0\":{\"15\":1},\"1\":{\"41\":1}}],[\"数学\",{\"1\":{\"3\":1,\"49\":3,\"50\":4}}],[\"索引\",{\"0\":{\"12\":1},\"1\":{\"99\":1}}],[\"计数器\",{\"1\":{\"112\":1}}],[\"计算\",{\"1\":{\"30\":1,\"31\":2,\"34\":1,\"41\":1}}],[\"计算机\",{\"1\":{\"3\":1,\"31\":4}}],[\"计划\",{\"0\":{\"9\":1}}],[\"执行\",{\"0\":{\"9\":1},\"1\":{\"21\":1,\"22\":1,\"25\":2,\"34\":1,\"35\":1,\"37\":1,\"41\":2,\"43\":2,\"47\":1,\"49\":1,\"56\":4,\"57\":1,\"58\":1,\"60\":19,\"61\":5,\"80\":2,\"88\":1,\"92\":1,\"108\":1,\"110\":2,\"111\":1,\"112\":4}}],[\"执着\",{\"1\":{\"3\":1}}],[\"基类\",{\"1\":{\"47\":1,\"53\":1}}],[\"基于\",{\"1\":{\"22\":1,\"40\":2,\"41\":1,\"95\":1}}],[\"基础知识\",{\"0\":{\"26\":1,\"42\":1}}],[\"基础\",{\"1\":{\"8\":1,\"43\":1,\"88\":1}}],[\"基本\",{\"0\":{\"28\":1},\"1\":{\"3\":2,\"28\":3,\"29\":4,\"30\":3,\"39\":3,\"49\":3,\"51\":1,\"85\":1,\"100\":4}}],[\"30\",{\"1\":{\"65\":2,\"69\":3}}],[\"356573597\",{\"1\":{\"49\":4,\"50\":2,\"94\":1}}],[\"3.3\",{\"1\":{\"66\":2,\"68\":2}}],[\"3.\",{\"1\":{\"40\":1,\"51\":1}}],[\"3.1415926\",{\"1\":{\"28\":1}}],[\"3.14\",{\"1\":{\"28\":1}}],[\"3.4028235\",{\"1\":{\"28\":1}}],[\"324\",{\"1\":{\"28\":1}}],[\"32\",{\"1\":{\"28\":2,\"34\":1}}],[\"32767\",{\"1\":{\"28\":1}}],[\"32768\",{\"1\":{\"28\":1}}],[\"3\",{\"0\":{\"6\":1,\"11\":1,\"14\":1,\"17\":1,\"20\":1,\"103\":1,\"106\":1},\"1\":{\"25\":1,\"33\":1,\"40\":1,\"66\":2,\"68\":2}}],[\"内聚性\",{\"1\":{\"46\":1}}],[\"内部\",{\"1\":{\"36\":1,\"43\":1,\"50\":1,\"51\":2,\"76\":1,\"78\":3,\"87\":2,\"95\":3}}],[\"内存空间\",{\"1\":{\"49\":1,\"95\":3}}],[\"内存地址\",{\"1\":{\"39\":3,\"41\":1,\"49\":5,\"50\":5,\"109\":1}}],[\"内存\",{\"1\":{\"29\":1,\"30\":2,\"34\":2,\"36\":3,\"37\":1,\"41\":1,\"50\":2,\"54\":1,\"84\":2,\"95\":2,\"96\":3,\"98\":1,\"108\":11,\"109\":6,\"110\":2,\"112\":2}}],[\"内\",{\"1\":{\"29\":1,\"34\":1,\"39\":3,\"56\":1,\"95\":1}}],[\"内置\",{\"0\":{\"23\":1}}],[\"内容\",{\"1\":{\"5\":1,\"6\":1,\"10\":1,\"11\":2,\"13\":1,\"14\":1,\"16\":1,\"17\":2,\"19\":1,\"20\":2,\"40\":6,\"41\":1,\"49\":1,\"94\":2,\"96\":3,\"97\":1,\"99\":2,\"102\":1,\"103\":1,\"105\":1,\"106\":1}}],[\"内耗\",{\"1\":{\"3\":2}}],[\"255\",{\"1\":{\"95\":1}}],[\"28\",{\"1\":{\"92\":1}}],[\"2.2\",{\"1\":{\"66\":2,\"68\":2}}],[\"2.\",{\"1\":{\"40\":1,\"51\":2}}],[\"200\",{\"1\":{\"39\":5,\"40\":2}}],[\"20\",{\"1\":{\"39\":1,\"69\":3,\"81\":1}}],[\"21\",{\"1\":{\"49\":2,\"50\":2}}],[\"2147483644\",{\"1\":{\"34\":1}}],[\"2147483647\",{\"1\":{\"28\":1}}],[\"2147483648\",{\"1\":{\"28\":1}}],[\"211\",{\"1\":{\"3\":1}}],[\"2\",{\"0\":{\"5\":1,\"10\":1,\"13\":1,\"16\":1,\"19\":1,\"42\":1,\"102\":1,\"104\":1,\"105\":1},\"1\":{\"28\":8,\"31\":6,\"34\":2,\"37\":1,\"40\":2,\"66\":2,\"68\":2,\"80\":1,\"94\":1,\"95\":4}}],[\"天天开心\",{\"1\":{\"3\":1}}],[\"祝愿\",{\"1\":{\"3\":1}}],[\"勇气\",{\"1\":{\"3\":1}}],[\"带来\",{\"1\":{\"91\":1,\"95\":1,\"108\":1}}],[\"带有\",{\"1\":{\"46\":1}}],[\"带符号\",{\"1\":{\"34\":1}}],[\"带\",{\"1\":{\"3\":1,\"90\":1,\"109\":1}}],[\"坚定\",{\"1\":{\"3\":1}}],[\"让\",{\"1\":{\"3\":1,\"41\":1,\"57\":1,\"100\":1,\"112\":2}}],[\"挑战\",{\"1\":{\"3\":1}}],[\"充满\",{\"1\":{\"3\":1}}],[\"踏入\",{\"1\":{\"3\":1}}],[\"懵懂\",{\"1\":{\"3\":1}}],[\"片段\",{\"1\":{\"3\":1}}],[\"温柔\",{\"1\":{\"3\":1}}],[\"成为\",{\"1\":{\"46\":1}}],[\"成功\",{\"1\":{\"41\":1}}],[\"成员\",{\"1\":{\"25\":1,\"36\":5,\"37\":10,\"45\":1,\"47\":3,\"49\":7,\"50\":5,\"51\":5,\"80\":1,\"107\":1,\"111\":1}}],[\"成长\",{\"1\":{\"3\":1}}],[\"成\",{\"1\":{\"3\":1,\"87\":1,\"100\":1}}],[\"汗水\",{\"1\":{\"3\":1}}],[\"阳光\",{\"1\":{\"3\":1}}],[\"窗前\",{\"1\":{\"3\":1}}],[\"八种\",{\"1\":{\"29\":1}}],[\"八\",{\"1\":{\"3\":1}}],[\"八股\",{\"1\":{\"3\":1}}],[\"赶早\",{\"1\":{\"3\":1}}],[\"彻底\",{\"1\":{\"3\":1}}],[\"啦\",{\"1\":{\"3\":1}}],[\"烟消云散\",{\"1\":{\"3\":1}}],[\"行回\",{\"1\":{\"112\":1}}],[\"行\",{\"1\":{\"109\":4,\"112\":1}}],[\"行为\",{\"1\":{\"22\":1,\"23\":1,\"24\":1,\"39\":1,\"40\":2,\"43\":1,\"45\":1,\"47\":3,\"73\":1}}],[\"行动\",{\"1\":{\"3\":1}}],[\"行业\",{\"1\":{\"3\":2}}],[\"清除\",{\"1\":{\"23\":1}}],[\"清晰\",{\"1\":{\"3\":1,\"43\":1}}],[\"清楚\",{\"1\":{\"3\":1}}],[\"心中\",{\"1\":{\"3\":2}}],[\"社交\",{\"1\":{\"3\":1}}],[\"社会\",{\"1\":{\"3\":2}}],[\"着\",{\"1\":{\"3\":2,\"41\":1}}],[\"伴随\",{\"1\":{\"3\":1}}],[\"最新\",{\"1\":{\"84\":1,\"108\":1,\"109\":1}}],[\"最终\",{\"1\":{\"81\":1,\"100\":1,\"110\":1}}],[\"最低\",{\"1\":{\"69\":1}}],[\"最高级别\",{\"1\":{\"68\":1}}],[\"最后\",{\"1\":{\"60\":1,\"87\":2,\"99\":1}}],[\"最\",{\"1\":{\"3\":2,\"68\":1,\"69\":1,\"95\":1}}],[\"期是\",{\"1\":{\"100\":1}}],[\"期望\",{\"1\":{\"31\":1}}],[\"期\",{\"1\":{\"21\":1,\"22\":2,\"37\":1,\"100\":2}}],[\"期间\",{\"1\":{\"3\":1,\"41\":1,\"43\":1,\"112\":1}}],[\"期末\",{\"1\":{\"3\":2}}],[\"迷茫\",{\"1\":{\"3\":3}}],[\"之一\",{\"1\":{\"95\":1,\"100\":1}}],[\"之\",{\"1\":{\"60\":1}}],[\"之内\",{\"1\":{\"56\":1}}],[\"之间\",{\"1\":{\"37\":1,\"43\":1,\"100\":1}}],[\"之后\",{\"1\":{\"35\":1,\"37\":1,\"56\":1,\"60\":2,\"61\":1,\"100\":2,\"107\":1,\"110\":1}}],[\"之前\",{\"1\":{\"3\":1,\"46\":1,\"47\":1,\"60\":1,\"66\":1,\"95\":1,\"107\":1,\"110\":2}}],[\"之外\",{\"1\":{\"3\":2,\"95\":1}}],[\"偶尔\",{\"1\":{\"3\":1}}],[\"世界观\",{\"1\":{\"3\":1}}],[\"价值观\",{\"1\":{\"3\":1}}],[\"五湖四海\",{\"1\":{\"3\":1}}],[\"五一\",{\"1\":{\"3\":1}}],[\"来看\",{\"1\":{\"107\":1}}],[\"来\",{\"1\":{\"23\":2,\"24\":1,\"25\":1,\"34\":3,\"37\":2,\"41\":3,\"43\":1,\"46\":2,\"55\":2,\"56\":1,\"57\":1,\"60\":1,\"63\":1,\"72\":1,\"90\":1,\"94\":1,\"95\":1,\"98\":1,\"100\":1,\"109\":1,\"110\":1,\"112\":1}}],[\"来自\",{\"1\":{\"3\":1}}],[\"来说\",{\"1\":{\"3\":4,\"39\":3}}],[\"接收\",{\"1\":{\"68\":2,\"69\":2,\"71\":1}}],[\"接受\",{\"1\":{\"23\":1,\"24\":2,\"51\":1,\"87\":2}}],[\"接口定义\",{\"1\":{\"45\":1,\"47\":1}}],[\"接口\",{\"0\":{\"44\":1,\"46\":1,\"65\":1},\"1\":{\"23\":5,\"24\":1,\"25\":3,\"43\":3,\"46\":21,\"47\":9,\"50\":2,\"62\":1,\"65\":1,\"86\":1,\"88\":1}}],[\"接触\",{\"1\":{\"3\":2}}],[\"接近\",{\"1\":{\"3\":1}}],[\"而言\",{\"1\":{\"95\":1}}],[\"而且\",{\"1\":{\"31\":1}}],[\"而\",{\"1\":{\"3\":1,\"29\":2,\"36\":2,\"37\":3,\"46\":2,\"47\":1,\"49\":2,\"55\":2,\"60\":1,\"66\":1,\"70\":1,\"80\":1,\"94\":1,\"96\":1,\"108\":1,\"109\":1,\"112\":3}}],[\"而是\",{\"1\":{\"3\":2,\"37\":1}}],[\"；\",{\"1\":{\"3\":1,\"28\":1,\"29\":1,\"43\":3,\"47\":1,\"49\":1,\"60\":2,\"61\":2}}],[\"考虑\",{\"1\":{\"95\":1}}],[\"考上\",{\"1\":{\"3\":1}}],[\"考点\",{\"1\":{\"3\":1}}],[\"讨厌\",{\"1\":{\"3\":1}}],[\"贪玩\",{\"1\":{\"3\":1}}],[\"初始值\",{\"1\":{\"47\":1}}],[\"初始化\",{\"1\":{\"36\":1,\"80\":1,\"81\":1}}],[\"初步\",{\"1\":{\"3\":1}}],[\"初高中\",{\"1\":{\"3\":1}}],[\"初中\",{\"1\":{\"3\":1}}],[\"追随\",{\"1\":{\"3\":1}}],[\"答案\",{\"1\":{\"3\":5}}],[\"阶段\",{\"1\":{\"3\":1,\"100\":1}}],[\"每次\",{\"1\":{\"84\":1,\"107\":1,\"112\":1}}],[\"每\",{\"1\":{\"3\":1}}],[\"每个\",{\"1\":{\"3\":1,\"95\":6,\"108\":1}}],[\"每天\",{\"1\":{\"3\":4}}],[\"问题\",{\"1\":{\"3\":5,\"31\":2,\"46\":2,\"54\":2,\"55\":2,\"95\":1,\"98\":1,\"108\":3,\"111\":2}}],[\"三大\",{\"1\":{\"43\":1}}],[\"三种\",{\"1\":{\"34\":1,\"89\":1}}],[\"三个\",{\"1\":{\"3\":5,\"111\":1,\"112\":2}}],[\"三点一线\",{\"1\":{\"3\":1}}],[\"知道\",{\"1\":{\"3\":1,\"31\":1,\"57\":1,\"68\":2,\"69\":1,\"87\":1,\"88\":1,\"89\":3,\"90\":1,\"100\":1}}],[\"知识库\",{\"0\":{\"7\":1},\"1\":{\"7\":1}}],[\"知识\",{\"1\":{\"3\":3,\"37\":1}}],[\"更高\",{\"1\":{\"30\":1,\"98\":1}}],[\"更\",{\"1\":{\"23\":1,\"31\":1,\"34\":1,\"37\":1,\"112\":1}}],[\"更好\",{\"1\":{\"23\":1}}],[\"更加\",{\"1\":{\"3\":1,\"46\":1}}],[\"更为重要\",{\"1\":{\"3\":1}}],[\"更是\",{\"1\":{\"3\":1}}],[\"真的\",{\"1\":{\"41\":1}}],[\"真正\",{\"1\":{\"3\":2,\"43\":1,\"66\":2}}],[\"真真切切\",{\"1\":{\"3\":1}}],[\"人和事\",{\"1\":{\"3\":1}}],[\"人生观\",{\"1\":{\"3\":1}}],[\"人生\",{\"1\":{\"3\":1}}],[\"人\",{\"1\":{\"3\":2}}],[\"个数\",{\"1\":{\"37\":1}}],[\"个\",{\"1\":{\"3\":2,\"25\":1,\"31\":1,\"95\":6}}],[\"个人\",{\"1\":{\"0\":1}}],[\"弄\",{\"1\":{\"3\":1}}],[\"探索\",{\"1\":{\"3\":2}}],[\"认为\",{\"1\":{\"3\":3,\"41\":1}}],[\"认识\",{\"1\":{\"3\":3}}],[\"想要\",{\"1\":{\"3\":2,\"25\":1}}],[\"想\",{\"1\":{\"3\":1}}],[\"想着\",{\"1\":{\"3\":1}}],[\"校验\",{\"1\":{\"25\":1}}],[\"校招\",{\"0\":{\"4\":1},\"1\":{\"3\":1}}],[\"校园生活\",{\"1\":{\"3\":1}}],[\"校园\",{\"1\":{\"3\":2}}],[\"参\",{\"1\":{\"90\":2}}],[\"参来\",{\"1\":{\"37\":1}}],[\"参数\",{\"0\":{\"63\":1,\"87\":1},\"1\":{\"21\":1,\"23\":4,\"29\":1,\"37\":2,\"58\":1,\"62\":3,\"63\":1,\"64\":2,\"66\":4,\"72\":1,\"87\":20,\"90\":1,\"92\":2}}],[\"参加\",{\"1\":{\"3\":1}}],[\"参与\",{\"1\":{\"3\":1}}],[\"导致\",{\"1\":{\"3\":1,\"31\":1,\"33\":1,\"41\":1,\"46\":1,\"49\":1,\"57\":1,\"60\":1,\"110\":1}}],[\"太晚\",{\"1\":{\"3\":1}}],[\"点\",{\"1\":{\"3\":1}}],[\"确切\",{\"1\":{\"68\":2,\"100\":1}}],[\"确保\",{\"1\":{\"22\":1,\"50\":1,\"51\":1,\"83\":1,\"84\":1,\"94\":1,\"109\":1,\"111\":1,\"112\":2}}],[\"确定\",{\"1\":{\"3\":1,\"23\":1,\"43\":1,\"64\":1,\"67\":1,\"69\":1,\"87\":2,\"100\":4}}],[\"确实\",{\"1\":{\"3\":1,\"95\":1}}],[\"壁垒\",{\"1\":{\"3\":1}}],[\"早期\",{\"1\":{\"43\":1,\"109\":1}}],[\"早点\",{\"1\":{\"3\":1}}],[\"早\",{\"1\":{\"3\":1}}],[\"网络连接\",{\"1\":{\"56\":1}}],[\"网络\",{\"1\":{\"55\":2,\"85\":1}}],[\"网上\",{\"1\":{\"3\":1}}],[\"网课\",{\"1\":{\"3\":1}}],[\"虽然\",{\"1\":{\"3\":1}}],[\"算数\",{\"1\":{\"100\":1}}],[\"算法\",{\"1\":{\"43\":1}}],[\"算术\",{\"1\":{\"34\":1,\"55\":1}}],[\"算\",{\"1\":{\"3\":1}}],[\"收获\",{\"1\":{\"3\":1}}],[\"收到\",{\"1\":{\"3\":1}}],[\"各\",{\"1\":{\"3\":1}}],[\"困难\",{\"1\":{\"3\":1}}],[\"毕业\",{\"1\":{\"3\":1}}],[\"毕业设计\",{\"1\":{\"3\":2}}],[\"面向\",{\"1\":{\"43\":2}}],[\"面向对象编程\",{\"1\":{\"43\":1}}],[\"面向对象\",{\"0\":{\"43\":1},\"1\":{\"43\":1}}],[\"面临\",{\"1\":{\"3\":1}}],[\"面试\",{\"1\":{\"3\":2}}],[\"甚至\",{\"1\":{\"3\":2}}],[\"经验\",{\"1\":{\"3\":1}}],[\"经历\",{\"0\":{\"4\":1},\"1\":{\"3\":1}}],[\"积累\",{\"1\":{\"3\":2}}],[\"积极\",{\"1\":{\"3\":1}}],[\"出\",{\"1\":{\"41\":1}}],[\"出现异常\",{\"1\":{\"60\":3}}],[\"出现\",{\"1\":{\"31\":1,\"41\":1,\"46\":1,\"58\":1,\"99\":1}}],[\"出去\",{\"1\":{\"3\":1}}],[\"出来\",{\"1\":{\"3\":1,\"100\":1}}],[\"意想不到\",{\"1\":{\"110\":1}}],[\"意味着\",{\"1\":{\"41\":1,\"46\":1,\"49\":1,\"50\":1,\"58\":1,\"94\":2,\"95\":2}}],[\"意识\",{\"1\":{\"3\":1}}],[\"意义\",{\"1\":{\"3\":2,\"29\":1,\"46\":1}}],[\"培养\",{\"1\":{\"3\":1}}],[\"当做\",{\"1\":{\"100\":1}}],[\"当作\",{\"1\":{\"87\":1}}],[\"当前\",{\"1\":{\"35\":1,\"58\":1,\"109\":1}}],[\"当\",{\"1\":{\"3\":1,\"23\":1,\"29\":1,\"34\":1,\"35\":2,\"37\":1,\"41\":2,\"45\":1,\"46\":1,\"56\":1,\"58\":1,\"60\":6,\"70\":1,\"85\":1,\"95\":1,\"96\":2,\"108\":1,\"109\":2,\"110\":2}}],[\"当然\",{\"1\":{\"3\":1}}],[\"当初\",{\"1\":{\"3\":2}}],[\"当时\",{\"1\":{\"3\":3}}],[\"懊悔\",{\"1\":{\"3\":2}}],[\"厂上\",{\"1\":{\"3\":1}}],[\"目的\",{\"1\":{\"21\":1,\"62\":1,\"95\":2,\"96\":1}}],[\"目光\",{\"1\":{\"3\":1}}],[\"目录\",{\"1\":{\"1\":1,\"7\":1}}],[\"于类\",{\"1\":{\"21\":1,\"24\":1}}],[\"于\",{\"1\":{\"3\":1,\"22\":1,\"24\":2,\"25\":1,\"34\":2,\"49\":1,\"66\":1,\"90\":1,\"98\":1,\"111\":2,\"112\":1}}],[\"签名\",{\"1\":{\"55\":1,\"56\":1,\"67\":1,\"82\":1}}],[\"签\",{\"1\":{\"3\":1}}],[\"上级\",{\"1\":{\"68\":1}}],[\"上界\",{\"0\":{\"68\":1},\"1\":{\"68\":2,\"69\":1,\"72\":1}}],[\"上例\",{\"1\":{\"46\":3}}],[\"上限\",{\"1\":{\"29\":1}}],[\"上\",{\"1\":{\"3\":2,\"21\":1,\"22\":1,\"24\":2,\"25\":1,\"30\":1,\"34\":1,\"41\":1,\"46\":1,\"49\":1,\"71\":1,\"100\":2,\"109\":1,\"111\":1}}],[\"上面\",{\"1\":{\"3\":2,\"100\":1,\"110\":1,\"112\":1}}],[\" \",{\"0\":{\"5\":1,\"6\":1,\"10\":1,\"11\":1,\"13\":1,\"14\":1,\"16\":1,\"17\":1,\"19\":1,\"20\":1,\"35\":2,\"71\":1,\"89\":1,\"95\":2,\"101\":1,\"102\":1,\"103\":1,\"104\":1,\"105\":1,\"106\":1,\"111\":1},\"1\":{\"3\":4,\"21\":6,\"22\":15,\"23\":18,\"24\":30,\"25\":161,\"28\":70,\"29\":104,\"30\":35,\"31\":76,\"33\":102,\"34\":80,\"35\":7,\"36\":3,\"37\":15,\"39\":130,\"40\":218,\"41\":89,\"43\":20,\"45\":23,\"46\":117,\"47\":169,\"49\":241,\"50\":269,\"51\":12,\"53\":5,\"54\":6,\"55\":39,\"56\":25,\"57\":22,\"58\":33,\"59\":59,\"60\":107,\"61\":34,\"62\":25,\"63\":11,\"64\":79,\"65\":74,\"66\":126,\"67\":2,\"68\":75,\"69\":76,\"70\":25,\"71\":13,\"72\":10,\"73\":4,\"75\":2,\"76\":2,\"77\":2,\"78\":2,\"80\":105,\"81\":87,\"82\":2,\"85\":4,\"86\":7,\"87\":40,\"88\":12,\"89\":63,\"90\":200,\"91\":111,\"92\":96,\"94\":96,\"95\":144,\"96\":87,\"97\":45,\"98\":21,\"99\":34,\"100\":141,\"107\":20,\"108\":14,\"109\":141,\"110\":22,\"111\":5,\"112\":54,\"113\":2}}],[\"能飞\",{\"1\":{\"47\":1}}],[\"能够\",{\"1\":{\"22\":1,\"25\":1,\"37\":2,\"88\":1}}],[\"能\",{\"1\":{\"3\":1,\"46\":1,\"47\":2,\"55\":1,\"95\":1,\"112\":2}}],[\"能力\",{\"1\":{\"3\":2,\"47\":2,\"66\":1,\"88\":1}}],[\"已\",{\"1\":{\"23\":1,\"29\":1,\"43\":1,\"98\":1}}],[\"已有\",{\"1\":{\"3\":1,\"96\":1}}],[\"已经\",{\"1\":{\"3\":1,\"37\":1,\"41\":1,\"66\":1,\"89\":1,\"96\":1,\"97\":1,\"100\":1}}],[\"像\",{\"1\":{\"3\":1,\"95\":1}}],[\"状态值\",{\"1\":{\"112\":1}}],[\"状态\",{\"1\":{\"3\":1,\"43\":1,\"54\":1,\"58\":1,\"111\":1,\"112\":1}}],[\"陷入\",{\"1\":{\"3\":2,\"109\":1}}],[\"随\",{\"1\":{\"36\":3}}],[\"随着\",{\"1\":{\"3\":1}}],[\"随笔\",{\"0\":{\"1\":1,\"2\":1},\"1\":{\"1\":1}}],[\"做出\",{\"1\":{\"37\":2,\"59\":1}}],[\"做\",{\"1\":{\"3\":1,\"47\":3,\"100\":1,\"112\":1}}],[\"春招\",{\"1\":{\"3\":2}}],[\"秋招\",{\"1\":{\"3\":3}}],[\"+\",{\"1\":{\"3\":3,\"25\":4,\"29\":1,\"31\":1,\"33\":11,\"43\":2,\"47\":7,\"49\":8,\"50\":8,\"59\":3,\"65\":2,\"66\":2,\"80\":2,\"89\":4,\"90\":11,\"91\":1,\"92\":1,\"94\":3,\"100\":7,\"109\":1,\"111\":2,\"112\":14}}],[\"任意\",{\"1\":{\"41\":2}}],[\"任务\",{\"1\":{\"3\":1}}],[\"任何\",{\"1\":{\"3\":1,\"30\":1,\"47\":1,\"50\":1,\"51\":1,\"68\":2,\"69\":2,\"70\":1,\"75\":2,\"77\":1,\"80\":1,\"90\":1,\"94\":1,\"95\":1,\"111\":1}}],[\"家里\",{\"1\":{\"3\":1}}],[\"所用\",{\"1\":{\"41\":1}}],[\"所在\",{\"1\":{\"35\":1,\"60\":1,\"66\":1}}],[\"所有\",{\"1\":{\"34\":1,\"36\":1,\"43\":1,\"46\":1,\"47\":1,\"50\":4,\"51\":2,\"72\":1,\"80\":1,\"82\":1,\"87\":1,\"91\":8,\"92\":5,\"94\":1,\"95\":3,\"98\":1,\"100\":1,\"108\":1,\"110\":2}}],[\"所\",{\"1\":{\"28\":1,\"34\":1}}],[\"所示\",{\"1\":{\"25\":1,\"46\":2,\"108\":1}}],[\"所以\",{\"1\":{\"3\":3,\"31\":1,\"39\":1,\"41\":1,\"49\":1,\"60\":1,\"66\":1,\"112\":1}}],[\"所谓\",{\"1\":{\"3\":3}}],[\"剩\",{\"1\":{\"3\":1}}],[\"只有\",{\"1\":{\"25\":1,\"34\":1,\"36\":1,\"37\":2,\"39\":1,\"56\":1,\"82\":1,\"83\":1,\"100\":1,\"111\":1}}],[\"只要\",{\"1\":{\"25\":1,\"41\":1,\"47\":2}}],[\"只能\",{\"1\":{\"24\":1,\"29\":1,\"31\":1,\"47\":3,\"62\":1,\"66\":1,\"69\":1,\"70\":1,\"78\":1,\"80\":1,\"87\":1,\"90\":1,\"111\":1,\"112\":1}}],[\"只\",{\"1\":{\"3\":1,\"23\":1,\"24\":1,\"30\":1,\"37\":1,\"43\":1,\"51\":2,\"69\":1,\"70\":1,\"95\":5}}],[\"只是\",{\"1\":{\"3\":1,\"39\":1,\"43\":1,\"66\":1}}],[\"多线程\",{\"1\":{\"83\":1,\"84\":1,\"98\":2,\"107\":1,\"110\":1,\"111\":1}}],[\"多种类型\",{\"1\":{\"47\":1,\"59\":1}}],[\"多种\",{\"1\":{\"43\":1}}],[\"多态\",{\"1\":{\"43\":4}}],[\"多次\",{\"1\":{\"41\":1,\"112\":1}}],[\"多个\",{\"1\":{\"23\":1,\"34\":1,\"37\":1,\"47\":2,\"59\":1,\"60\":1,\"87\":2,\"111\":1,\"112\":2}}],[\"多去\",{\"1\":{\"3\":1}}],[\"多\",{\"1\":{\"3\":1,\"34\":1,\"47\":1,\"108\":1}}],[\"多虑\",{\"1\":{\"3\":1}}],[\"杭州\",{\"1\":{\"3\":1}}],[\"怀疑\",{\"1\":{\"3\":1}}],[\"产生\",{\"1\":{\"3\":1,\"41\":2}}],[\"曾\",{\"1\":{\"3\":1}}],[\"曾经\",{\"1\":{\"3\":2}}],[\"屡战屡败\",{\"1\":{\"3\":1}}],[\"前缀\",{\"1\":{\"33\":3,\"99\":1,\"109\":1}}],[\"前面\",{\"1\":{\"33\":1,\"60\":1}}],[\"前行\",{\"1\":{\"3\":1}}],[\"前\",{\"1\":{\"3\":2,\"34\":1}}],[\"荒废\",{\"1\":{\"3\":1}}],[\"焦虑\",{\"1\":{\"3\":3}}],[\"七月\",{\"1\":{\"3\":1}}],[\"投递\",{\"1\":{\"3\":1}}],[\"投\",{\"1\":{\"3\":1}}],[\"实例\",{\"0\":{\"90\":1},\"1\":{\"30\":1,\"36\":2,\"37\":9,\"43\":1,\"45\":1,\"46\":1,\"50\":1,\"64\":2,\"66\":2,\"80\":4,\"82\":1,\"89\":1,\"90\":2,\"91\":1,\"92\":1,\"100\":1}}],[\"实用\",{\"1\":{\"29\":1,\"46\":1}}],[\"实际上\",{\"1\":{\"34\":1,\"94\":1,\"100\":1}}],[\"实际\",{\"1\":{\"25\":1,\"95\":1}}],[\"实现\",{\"1\":{\"23\":1,\"25\":4,\"29\":1,\"37\":1,\"40\":2,\"41\":1,\"43\":2,\"45\":2,\"46\":7,\"47\":8,\"50\":7,\"51\":1,\"72\":1,\"78\":1,\"82\":2,\"83\":1,\"86\":1,\"88\":1,\"95\":3,\"100\":1,\"107\":2}}],[\"实习\",{\"1\":{\"3\":9}}],[\"实质性\",{\"1\":{\"3\":1}}],[\"找到\",{\"1\":{\"3\":1,\"41\":1,\"58\":1,\"60\":1}}],[\"找\",{\"1\":{\"3\":4,\"41\":1,\"55\":1}}],[\"约定\",{\"1\":{\"40\":1,\"41\":2}}],[\"约\",{\"1\":{\"3\":1,\"28\":2}}],[\"末尾\",{\"1\":{\"3\":1}}],[\"昨天\",{\"1\":{\"3\":1}}],[\"比较\",{\"1\":{\"29\":4,\"30\":1,\"36\":1,\"39\":4,\"40\":8,\"41\":4,\"43\":1,\"99\":3}}],[\"比如说\",{\"1\":{\"31\":1}}],[\"比如\",{\"1\":{\"29\":1,\"46\":2,\"47\":5,\"49\":1,\"54\":1,\"62\":1,\"95\":1,\"100\":1,\"109\":1,\"110\":1}}],[\"比\",{\"1\":{\"3\":2,\"98\":1}}],[\"身高\",{\"1\":{\"49\":5,\"50\":5}}],[\"身体健康\",{\"1\":{\"3\":2}}],[\"身边\",{\"1\":{\"3\":1}}],[\"休息\",{\"1\":{\"3\":1}}],[\"吃饭\",{\"1\":{\"3\":1}}],[\"吃喝玩乐\",{\"1\":{\"3\":1}}],[\"好处\",{\"1\":{\"95\":1}}],[\"好\",{\"1\":{\"3\":4,\"41\":1}}],[\"好好\",{\"1\":{\"3\":2}}],[\"好像\",{\"1\":{\"3\":2}}],[\"锻炼身体\",{\"1\":{\"3\":1}}],[\"篮球场\",{\"1\":{\"3\":1}}],[\"篮球\",{\"1\":{\"3\":1,\"46\":1}}],[\"热爱\",{\"1\":{\"3\":3}}],[\"重\",{\"1\":{\"110\":3}}],[\"重复\",{\"1\":{\"41\":1,\"46\":1,\"96\":1}}],[\"重复使用\",{\"1\":{\"24\":1}}],[\"重新\",{\"1\":{\"37\":1,\"41\":1,\"47\":1,\"57\":1,\"109\":1}}],[\"重载\",{\"1\":{\"37\":4}}],[\"重用\",{\"1\":{\"29\":1,\"43\":1}}],[\"重写\",{\"1\":{\"22\":1,\"23\":3,\"29\":1,\"37\":5,\"40\":7,\"41\":2,\"43\":3,\"45\":2,\"47\":1,\"81\":3}}],[\"重要\",{\"1\":{\"3\":1,\"25\":2,\"41\":1,\"95\":1,\"107\":1}}],[\"重拾\",{\"1\":{\"3\":1}}],[\"重心\",{\"1\":{\"3\":1}}],[\"吵闹\",{\"1\":{\"3\":1}}],[\"搬离\",{\"1\":{\"3\":1}}],[\"技能\",{\"1\":{\"3\":1}}],[\"技术\",{\"1\":{\"3\":1,\"43\":1}}],[\"享受\",{\"1\":{\"3\":1}}],[\"很大\",{\"1\":{\"31\":1}}],[\"很多\",{\"1\":{\"3\":2}}],[\"很\",{\"1\":{\"3\":2}}],[\"敲\",{\"1\":{\"3\":1}}],[\"刷新\",{\"1\":{\"3\":1,\"109\":1,\"110\":1}}],[\"刷\",{\"1\":{\"3\":1}}],[\"看似\",{\"1\":{\"94\":1}}],[\"看\",{\"1\":{\"3\":1}}],[\"看到\",{\"1\":{\"3\":1,\"49\":1,\"112\":1}}],[\"泡\",{\"1\":{\"3\":1}}],[\"就要\",{\"1\":{\"37\":1}}],[\"就业\",{\"1\":{\"3\":1}}],[\"就算\",{\"1\":{\"3\":1}}],[\"就\",{\"1\":{\"3\":3,\"25\":1,\"31\":3,\"35\":1,\"37\":3,\"41\":6,\"47\":2,\"56\":2,\"60\":1,\"61\":1,\"62\":2,\"66\":1,\"95\":3,\"100\":4,\"107\":1,\"108\":1}}],[\"就是\",{\"1\":{\"3\":4,\"31\":3,\"37\":3,\"47\":1,\"77\":1,\"95\":2,\"100\":1,\"108\":2}}],[\"没\",{\"1\":{\"31\":1}}],[\"没课\",{\"1\":{\"3\":1}}],[\"没有\",{\"1\":{\"3\":7,\"23\":1,\"29\":1,\"30\":1,\"31\":1,\"35\":1,\"36\":1,\"39\":1,\"41\":3,\"43\":1,\"46\":2,\"47\":1,\"50\":2,\"55\":1,\"57\":1,\"60\":3,\"61\":1,\"66\":2,\"82\":1,\"94\":1,\"96\":1,\"98\":1,\"108\":1,\"109\":2}}],[\"白天\",{\"1\":{\"3\":1}}],[\"感知\",{\"1\":{\"60\":1,\"109\":3}}],[\"感谢\",{\"1\":{\"3\":1}}],[\"感受\",{\"1\":{\"3\":1,\"109\":1}}],[\"感兴趣\",{\"1\":{\"3\":1}}],[\"感觉\",{\"1\":{\"3\":1}}],[\"发现\",{\"1\":{\"41\":1,\"46\":1,\"90\":1}}],[\"发出\",{\"1\":{\"22\":1,\"23\":1,\"43\":1,\"109\":1}}],[\"发展\",{\"1\":{\"3\":1}}],[\"发生变化\",{\"1\":{\"41\":1,\"94\":1}}],[\"发生\",{\"1\":{\"3\":1,\"31\":2,\"35\":1,\"37\":2,\"55\":2,\"56\":2,\"60\":2,\"112\":1}}],[\"职业\",{\"1\":{\"3\":1}}],[\"有个\",{\"1\":{\"112\":1}}],[\"有序性\",{\"0\":{\"110\":1},\"1\":{\"107\":1,\"110\":1,\"111\":2}}],[\"有无\",{\"1\":{\"90\":1}}],[\"有效\",{\"1\":{\"50\":1}}],[\"有效数字\",{\"1\":{\"28\":2}}],[\"有别于\",{\"1\":{\"37\":1}}],[\"有何\",{\"1\":{\"37\":1}}],[\"有关\",{\"1\":{\"3\":1}}],[\"有限\",{\"1\":{\"3\":1,\"31\":1}}],[\"有\",{\"1\":{\"3\":10,\"23\":1,\"30\":3,\"31\":1,\"35\":2,\"36\":1,\"41\":2,\"45\":2,\"46\":6,\"47\":6,\"50\":1,\"60\":2,\"69\":2,\"87\":3,\"89\":2,\"90\":3,\"95\":1,\"100\":1,\"111\":1}}],[\"有时候\",{\"1\":{\"3\":1,\"35\":1}}],[\"后缀\",{\"1\":{\"33\":3,\"99\":1}}],[\"后面\",{\"1\":{\"28\":2,\"33\":1,\"37\":1,\"58\":1,\"87\":3,\"95\":1}}],[\"后会\",{\"1\":{\"24\":1}}],[\"后\",{\"1\":{\"3\":1,\"34\":1,\"36\":2,\"49\":4,\"50\":4,\"57\":1,\"60\":2,\"61\":2,\"62\":1,\"66\":1,\"72\":1,\"90\":1,\"108\":3,\"109\":1,\"110\":1,\"112\":2}}],[\"持续\",{\"1\":{\"3\":1}}],[\"以后\",{\"1\":{\"109\":1}}],[\"以前\",{\"1\":{\"95\":1}}],[\"以下\",{\"1\":{\"56\":1,\"60\":1,\"90\":1,\"100\":1,\"112\":1}}],[\"以下几点\",{\"1\":{\"43\":2,\"46\":1}}],[\"以上\",{\"1\":{\"41\":1,\"89\":1,\"94\":1}}],[\"以\",{\"1\":{\"40\":2,\"41\":2,\"43\":2,\"46\":1,\"58\":1,\"61\":1,\"95\":2,\"99\":1}}],[\"以此\",{\"1\":{\"23\":2}}],[\"以及\",{\"1\":{\"3\":3,\"28\":1,\"49\":1,\"68\":1,\"69\":1,\"76\":1,\"88\":1,\"94\":1,\"100\":1}}],[\"以来\",{\"1\":{\"3\":1}}],[\"电脑\",{\"1\":{\"3\":1}}],[\"与其\",{\"1\":{\"107\":1}}],[\"与\",{\"0\":{\"30\":1,\"44\":1,\"111\":1},\"1\":{\"3\":5,\"30\":2,\"36\":2,\"40\":1,\"41\":2,\"43\":1,\"46\":1,\"50\":1,\"60\":2,\"69\":1,\"70\":1,\"86\":1,\"107\":2}}],[\"还有\",{\"1\":{\"87\":2}}],[\"还要\",{\"1\":{\"50\":1}}],[\"还会\",{\"1\":{\"39\":1,\"50\":1,\"96\":1}}],[\"还是\",{\"1\":{\"3\":1,\"39\":1,\"45\":1,\"47\":1,\"60\":1}}],[\"还\",{\"1\":{\"3\":2,\"37\":1,\"46\":1,\"47\":1,\"66\":1,\"107\":1,\"108\":1,\"110\":1,\"111\":1}}],[\"总线\",{\"1\":{\"109\":3}}],[\"总会\",{\"1\":{\"96\":1}}],[\"总结\",{\"1\":{\"3\":1}}],[\"总是\",{\"1\":{\"3\":1,\"56\":1,\"84\":1}}],[\"得到\",{\"1\":{\"3\":2,\"31\":1,\"33\":2,\"41\":1,\"100\":3}}],[\"过时\",{\"1\":{\"23\":1}}],[\"过程\",{\"1\":{\"3\":3,\"31\":2,\"35\":1,\"37\":1,\"41\":1,\"43\":3,\"57\":1,\"100\":1,\"112\":1}}],[\"过\",{\"1\":{\"3\":2,\"60\":1}}],[\"但会\",{\"1\":{\"91\":1}}],[\"但是\",{\"1\":{\"35\":1,\"37\":1,\"41\":1,\"43\":1,\"112\":1}}],[\"但\",{\"1\":{\"3\":4,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"31\":1,\"33\":1,\"37\":1,\"41\":1,\"43\":3,\"45\":1,\"47\":1,\"50\":1,\"55\":2,\"57\":1,\"60\":1,\"67\":1,\"68\":1,\"69\":1,\"87\":2,\"91\":1,\"98\":1,\"108\":1,\"110\":1,\"111\":1,\"112\":2}}],[\"？\",{\"1\":{\"3\":1,\"31\":1,\"37\":2,\"46\":1}}],[\"不适\",{\"1\":{\"112\":1}}],[\"不变\",{\"1\":{\"94\":1}}],[\"不定\",{\"1\":{\"87\":2}}],[\"不受\",{\"1\":{\"55\":1}}],[\"不可分割\",{\"1\":{\"112\":1}}],[\"不可\",{\"1\":{\"49\":3,\"51\":1,\"54\":1,\"81\":4,\"94\":1,\"112\":1}}],[\"不用\",{\"1\":{\"47\":1}}],[\"不仅\",{\"1\":{\"47\":1,\"50\":1}}],[\"不必\",{\"1\":{\"46\":1}}],[\"不必要\",{\"1\":{\"30\":1}}],[\"不到\",{\"1\":{\"41\":1,\"55\":1}}],[\"不管\",{\"1\":{\"39\":1}}],[\"不过\",{\"1\":{\"37\":1}}],[\"不要\",{\"1\":{\"31\":1,\"60\":1}}],[\"不断\",{\"1\":{\"31\":1,\"112\":1}}],[\"不爽\",{\"1\":{\"31\":1}}],[\"不大\",{\"1\":{\"29\":1}}],[\"不能\",{\"1\":{\"24\":1,\"29\":1,\"30\":1,\"37\":2,\"43\":2,\"45\":1,\"46\":1,\"47\":1,\"57\":1,\"58\":1,\"68\":2,\"69\":1,\"70\":1,\"76\":1,\"78\":1,\"80\":1,\"81\":2,\"82\":1,\"87\":1,\"94\":2,\"112\":3}}],[\"不\",{\"0\":{\"94\":1},\"1\":{\"3\":1,\"22\":1,\"23\":2,\"29\":2,\"30\":1,\"31\":1,\"34\":2,\"35\":1,\"37\":6,\"39\":1,\"40\":2,\"41\":3,\"43\":2,\"45\":1,\"46\":2,\"47\":2,\"50\":1,\"51\":3,\"54\":1,\"55\":3,\"57\":1,\"58\":1,\"61\":1,\"64\":1,\"67\":1,\"68\":2,\"69\":1,\"70\":2,\"77\":1,\"80\":1,\"88\":1,\"90\":1,\"91\":2,\"92\":1,\"94\":1,\"96\":3,\"98\":2,\"107\":1,\"111\":2,\"112\":1}}],[\"不同\",{\"1\":{\"3\":2,\"33\":2,\"37\":9,\"39\":3,\"40\":1,\"41\":7,\"46\":1,\"49\":1,\"50\":1,\"59\":2,\"76\":1,\"95\":1,\"96\":2}}],[\"不错\",{\"1\":{\"3\":1}}],[\"不会\",{\"1\":{\"3\":1,\"21\":1,\"34\":1,\"41\":1,\"50\":1,\"55\":1,\"56\":1,\"60\":5,\"85\":1,\"96\":1,\"109\":1,\"110\":1,\"111\":1,\"112\":1}}],[\"不多\",{\"1\":{\"3\":1}}],[\"不再\",{\"1\":{\"3\":1,\"23\":1,\"61\":1}}],[\"不小\",{\"1\":{\"3\":1}}],[\"不挂\",{\"1\":{\"3\":1}}],[\"不是\",{\"1\":{\"3\":3,\"29\":2,\"80\":1,\"100\":1,\"108\":1,\"111\":1}}],[\"月\",{\"1\":{\"3\":1}}],[\"自\",{\"1\":{\"47\":2,\"55\":3}}],[\"自父\",{\"1\":{\"37\":1}}],[\"自减\",{\"0\":{\"33\":1},\"1\":{\"33\":1}}],[\"自增\",{\"0\":{\"33\":1},\"1\":{\"33\":1,\"111\":1}}],[\"自定义\",{\"0\":{\"25\":1},\"1\":{\"24\":6,\"25\":4,\"40\":1}}],[\"自身\",{\"1\":{\"23\":1,\"50\":1,\"54\":1,\"68\":1,\"69\":1,\"91\":1,\"92\":1}}],[\"自动\",{\"1\":{\"22\":2,\"30\":4,\"39\":4,\"46\":2,\"62\":1,\"87\":1}}],[\"自学\",{\"1\":{\"3\":2}}],[\"自我认识\",{\"1\":{\"3\":1}}],[\"自我\",{\"1\":{\"3\":2}}],[\"自由\",{\"1\":{\"3\":2}}],[\"自己\",{\"1\":{\"3\":21,\"24\":1,\"25\":1,\"40\":1,\"43\":2,\"46\":1,\"66\":1,\"108\":2,\"109\":1}}],[\"自习室\",{\"1\":{\"3\":3}}],[\"什么样\",{\"1\":{\"3\":1}}],[\"什么\",{\"1\":{\"3\":3,\"47\":2,\"68\":2}}],[\"究竟\",{\"1\":{\"3\":1}}],[\"思维\",{\"1\":{\"3\":2}}],[\"思考\",{\"1\":{\"3\":1}}],[\"思想\",{\"1\":{\"3\":1}}],[\"高层次\",{\"1\":{\"112\":1}}],[\"高级\",{\"1\":{\"88\":1}}],[\"高位\",{\"1\":{\"34\":5}}],[\"高效\",{\"1\":{\"34\":2}}],[\"高性能\",{\"1\":{\"30\":1}}],[\"高考\",{\"1\":{\"3\":1}}],[\"高\",{\"1\":{\"3\":1}}],[\"高中时代\",{\"1\":{\"3\":1}}],[\"高中\",{\"1\":{\"3\":3}}],[\"分配\",{\"1\":{\"95\":1}}],[\"分配内存\",{\"1\":{\"37\":1}}],[\"分析\",{\"1\":{\"88\":1}}],[\"分为\",{\"1\":{\"55\":1,\"73\":1,\"112\":1}}],[\"分类\",{\"0\":{\"53\":1}}],[\"分散\",{\"1\":{\"29\":1}}],[\"分上\",{\"1\":{\"3\":1}}],[\"分得\",{\"1\":{\"3\":1}}],[\"分别\",{\"1\":{\"3\":1,\"28\":1}}],[\"课程\",{\"1\":{\"3\":2}}],[\"谈好\",{\"1\":{\"3\":1}}],[\"谈到\",{\"1\":{\"3\":1}}],[\"把\",{\"1\":{\"3\":2,\"41\":2,\"43\":1,\"96\":1,\"100\":1,\"112\":1}}],[\"）\",{\"1\":{\"3\":2,\"21\":1,\"22\":2,\"23\":5,\"24\":3,\"25\":1,\"28\":5,\"29\":11,\"30\":10,\"31\":1,\"33\":6,\"34\":13,\"36\":1,\"37\":3,\"40\":2,\"41\":7,\"43\":10,\"45\":4,\"46\":1,\"47\":10,\"49\":3,\"51\":3,\"54\":2,\"55\":2,\"57\":2,\"58\":2,\"68\":2,\"69\":3,\"70\":1,\"71\":4,\"72\":1,\"73\":2,\"76\":1,\"78\":2,\"80\":2,\"85\":2,\"86\":2,\"87\":1,\"88\":2,\"90\":2,\"91\":2,\"92\":3,\"94\":1,\"95\":6,\"96\":2,\"98\":2,\"100\":2,\"107\":1,\"108\":1,\"109\":5,\"110\":2,\"111\":1,\"112\":3}}],[\"（\",{\"1\":{\"3\":2,\"21\":1,\"22\":2,\"23\":5,\"24\":3,\"25\":2,\"28\":5,\"29\":11,\"30\":10,\"31\":1,\"33\":6,\"34\":13,\"36\":1,\"37\":3,\"40\":2,\"41\":7,\"43\":10,\"45\":4,\"46\":1,\"47\":10,\"49\":3,\"51\":3,\"54\":2,\"55\":1,\"57\":2,\"58\":2,\"68\":2,\"69\":3,\"70\":1,\"71\":4,\"72\":1,\"73\":2,\"76\":1,\"78\":2,\"80\":2,\"85\":2,\"86\":2,\"87\":1,\"88\":2,\"90\":2,\"91\":2,\"92\":3,\"94\":1,\"95\":6,\"96\":2,\"98\":2,\"100\":2,\"107\":1,\"108\":2,\"109\":5,\"110\":2,\"111\":1,\"112\":3}}],[\"恋爱\",{\"1\":{\"3\":6}}],[\"恋恋不舍\",{\"1\":{\"3\":1}}],[\"甜甜的\",{\"1\":{\"3\":1}}],[\"游戏\",{\"1\":{\"3\":1}}],[\"怎么\",{\"1\":{\"3\":4}}],[\"放入\",{\"1\":{\"41\":1,\"96\":1}}],[\"放到\",{\"1\":{\"3\":1}}],[\"放在\",{\"1\":{\"3\":1,\"33\":1,\"56\":1,\"66\":1,\"87\":1}}],[\"放置\",{\"1\":{\"0\":1}}],[\"并发\",{\"1\":{\"107\":1,\"112\":1}}],[\"并且\",{\"1\":{\"23\":1,\"24\":1,\"50\":1,\"60\":1,\"62\":2,\"84\":1,\"90\":1,\"94\":2,\"95\":1,\"100\":1,\"110\":1}}],[\"并\",{\"1\":{\"3\":3,\"21\":2,\"22\":2,\"25\":1,\"45\":1,\"50\":1,\"55\":1,\"59\":1,\"60\":2,\"62\":1,\"86\":1,\"91\":1,\"92\":1,\"94\":1,\"96\":1,\"100\":1,\"109\":2,\"110\":1,\"112\":1}}],[\"时会\",{\"1\":{\"57\":1,\"72\":1,\"109\":1}}],[\"时钟\",{\"1\":{\"34\":2}}],[\"时\",{\"1\":{\"21\":1,\"22\":3,\"23\":3,\"24\":2,\"25\":2,\"29\":1,\"31\":2,\"35\":1,\"37\":3,\"41\":1,\"45\":2,\"46\":1,\"50\":1,\"55\":2,\"56\":1,\"57\":1,\"58\":2,\"60\":4,\"61\":1,\"62\":2,\"70\":3,\"72\":1,\"80\":2,\"81\":1,\"85\":2,\"87\":1,\"88\":2,\"89\":1,\"95\":1,\"96\":2,\"100\":2,\"108\":1,\"109\":3,\"110\":2}}],[\"时代\",{\"1\":{\"3\":2}}],[\"时候\",{\"1\":{\"3\":6,\"37\":2}}],[\"时间\",{\"1\":{\"3\":3}}],[\"那么\",{\"1\":{\"40\":1,\"41\":5,\"55\":1,\"57\":2,\"60\":1,\"77\":1,\"95\":2}}],[\"那些\",{\"1\":{\"3\":1,\"111\":1}}],[\"那\",{\"1\":{\"3\":1}}],[\"那个\",{\"1\":{\"3\":1,\"97\":1}}],[\"食堂\",{\"1\":{\"3\":1}}],[\"宿舍\",{\"1\":{\"3\":2}}],[\"教室\",{\"1\":{\"3\":1}}],[\"差不多\",{\"1\":{\"3\":1}}],[\"疫情\",{\"1\":{\"3\":1}}],[\"受检\",{\"1\":{\"55\":3,\"57\":1}}],[\"受到\",{\"1\":{\"39\":1}}],[\"受\",{\"1\":{\"3\":1,\"49\":1,\"55\":1,\"57\":1,\"76\":1}}],[\"形式\",{\"1\":{\"3\":1,\"95\":1}}],[\"式\",{\"1\":{\"3\":1,\"23\":1}}],[\"走马观花\",{\"1\":{\"3\":1}}],[\"居多\",{\"1\":{\"3\":1}}],[\"玩\",{\"1\":{\"3\":1}}],[\"脱离\",{\"1\":{\"3\":1}}],[\"中间\",{\"1\":{\"98\":1}}],[\"中文\",{\"1\":{\"95\":1}}],[\"中泛\",{\"1\":{\"66\":1}}],[\"中用\",{\"1\":{\"60\":1}}],[\"中断\",{\"1\":{\"55\":1}}],[\"中是\",{\"1\":{\"50\":1,\"95\":1}}],[\"中心\",{\"1\":{\"43\":2}}],[\"中会\",{\"1\":{\"41\":1}}],[\"中有\",{\"1\":{\"28\":1,\"34\":1}}],[\"中小\",{\"1\":{\"3\":1}}],[\"中旬\",{\"1\":{\"3\":1}}],[\"中\",{\"1\":{\"3\":7,\"21\":2,\"22\":2,\"23\":2,\"24\":5,\"25\":4,\"29\":2,\"31\":1,\"35\":2,\"36\":4,\"37\":1,\"41\":7,\"43\":4,\"45\":3,\"46\":15,\"47\":8,\"49\":1,\"50\":2,\"54\":1,\"55\":2,\"56\":4,\"57\":2,\"58\":1,\"59\":1,\"60\":14,\"61\":1,\"62\":1,\"67\":1,\"68\":3,\"69\":2,\"70\":1,\"76\":1,\"80\":1,\"84\":1,\"87\":3,\"94\":1,\"95\":10,\"96\":3,\"97\":3,\"100\":4,\"107\":3,\"108\":6,\"109\":3,\"110\":2}}],[\"束缚\",{\"1\":{\"3\":1}}],[\"刚\",{\"1\":{\"3\":1}}],[\"二进制位\",{\"1\":{\"34\":1}}],[\"二进制\",{\"1\":{\"31\":5,\"34\":2}}],[\"二\",{\"1\":{\"3\":3}}],[\"大写\",{\"1\":{\"99\":1}}],[\"大写字母\",{\"1\":{\"63\":1}}],[\"大部分\",{\"1\":{\"95\":1}}],[\"大量\",{\"1\":{\"46\":1,\"98\":1,\"99\":1}}],[\"大型项目\",{\"1\":{\"46\":1}}],[\"大型\",{\"1\":{\"43\":1}}],[\"大大提高\",{\"1\":{\"41\":1}}],[\"大大减少\",{\"1\":{\"41\":1}}],[\"大于\",{\"1\":{\"37\":1}}],[\"大小写\",{\"1\":{\"99\":1}}],[\"大小\",{\"1\":{\"28\":1}}],[\"大厂\",{\"1\":{\"3\":1}}],[\"大四\",{\"1\":{\"3\":2}}],[\"大三\",{\"1\":{\"3\":2}}],[\"大多数\",{\"1\":{\"3\":1}}],[\"大\",{\"1\":{\"3\":3,\"34\":1,\"43\":1,\"109\":1}}],[\"大学\",{\"0\":{\"3\":1},\"1\":{\"2\":1,\"3\":11}}],[\"慢慢\",{\"1\":{\"3\":1}}],[\"慢\",{\"1\":{\"3\":1}}],[\"也就是说\",{\"1\":{\"37\":1,\"46\":1,\"66\":1}}],[\"也许\",{\"1\":{\"3\":3}}],[\"也\",{\"1\":{\"3\":19,\"30\":1,\"31\":1,\"37\":1,\"39\":1,\"40\":2,\"41\":5,\"43\":1,\"46\":1,\"47\":2,\"49\":3,\"50\":2,\"55\":1,\"57\":1,\"59\":1,\"60\":1,\"65\":1,\"66\":1,\"82\":1,\"95\":2,\"96\":1,\"100\":2,\"109\":1}}],[\"快\",{\"1\":{\"3\":2}}],[\",\",{\"1\":{\"3\":13,\"11\":1,\"17\":1,\"20\":1,\"21\":1,\"22\":5,\"23\":5,\"24\":10,\"25\":23,\"28\":63,\"29\":66,\"30\":30,\"31\":9,\"33\":14,\"34\":16,\"35\":5,\"36\":16,\"37\":18,\"39\":5,\"40\":16,\"41\":11,\"43\":41,\"45\":2,\"46\":22,\"47\":19,\"49\":26,\"50\":31,\"51\":17,\"53\":1,\"54\":1,\"55\":9,\"56\":5,\"57\":7,\"58\":5,\"59\":3,\"60\":15,\"61\":2,\"62\":4,\"63\":3,\"64\":3,\"65\":9,\"66\":16,\"68\":9,\"69\":8,\"70\":4,\"71\":4,\"72\":3,\"73\":2,\"78\":1,\"80\":6,\"81\":6,\"82\":2,\"87\":9,\"88\":3,\"89\":10,\"90\":24,\"91\":7,\"92\":12,\"94\":10,\"95\":16,\"96\":7,\"97\":1,\"98\":9,\"99\":37,\"100\":15,\"107\":3,\"108\":6,\"109\":8,\"110\":5,\"111\":18,\"112\":20}}],[\"会先\",{\"1\":{\"34\":1,\"41\":1,\"60\":1}}],[\"会\",{\"1\":{\"3\":9,\"23\":4,\"24\":1,\"29\":3,\"30\":1,\"31\":1,\"33\":1,\"34\":1,\"35\":1,\"37\":1,\"39\":3,\"41\":6,\"46\":2,\"49\":4,\"50\":3,\"51\":1,\"55\":2,\"56\":2,\"57\":2,\"58\":2,\"60\":5,\"62\":1,\"72\":3,\"87\":1,\"90\":1,\"91\":1,\"94\":1,\"95\":5,\"96\":2,\"97\":1,\"98\":1,\"100\":6,\"108\":3,\"109\":7,\"110\":3,\"111\":1,\"112\":4}}],[\"才能\",{\"1\":{\"36\":1,\"43\":1,\"62\":1,\"66\":2,\"100\":2,\"110\":1,\"112\":1}}],[\"才\",{\"1\":{\"3\":3,\"37\":1,\"56\":1,\"64\":1,\"100\":1,\"112\":1}}],[\"说明\",{\"1\":{\"29\":1,\"33\":1,\"95\":1,\"107\":2}}],[\"说些\",{\"1\":{\"3\":1}}],[\"说慢\",{\"1\":{\"3\":1}}],[\"说\",{\"1\":{\"3\":2,\"95\":1}}],[\"等到\",{\"1\":{\"110\":1,\"112\":1}}],[\"等价\",{\"1\":{\"95\":1}}],[\"等同于\",{\"1\":{\"70\":1}}],[\"等于\",{\"1\":{\"37\":2,\"95\":1}}],[\"等等\",{\"1\":{\"3\":2,\"47\":1,\"61\":1}}],[\"等\",{\"1\":{\"3\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":1,\"30\":2,\"34\":2,\"40\":1,\"54\":1,\"55\":2,\"56\":1,\"58\":1,\"63\":1,\"87\":1,\"88\":1,\"94\":1,\"95\":1,\"112\":1}}],[\"要么\",{\"1\":{\"57\":2}}],[\"要求\",{\"1\":{\"35\":1,\"41\":1,\"50\":1}}],[\"要\",{\"1\":{\"3\":2,\"23\":1,\"28\":2,\"37\":1,\"41\":1,\"45\":1,\"46\":4,\"57\":1,\"112\":1}}],[\"一致性\",{\"1\":{\"109\":3,\"112\":1}}],[\"一块\",{\"1\":{\"96\":1}}],[\"一半\",{\"1\":{\"95\":1}}],[\"一旦\",{\"1\":{\"94\":1}}],[\"一系列\",{\"1\":{\"87\":2}}],[\"一项\",{\"1\":{\"62\":1}}],[\"一条\",{\"1\":{\"60\":1}}],[\"一部分\",{\"1\":{\"47\":1}}],[\"一组\",{\"1\":{\"45\":1,\"47\":1}}],[\"一样\",{\"1\":{\"37\":1,\"41\":2,\"95\":1}}],[\"一元\",{\"1\":{\"33\":1}}],[\"一类\",{\"1\":{\"33\":1}}],[\"一般\",{\"1\":{\"30\":2,\"35\":1,\"37\":2,\"66\":1}}],[\"一种\",{\"1\":{\"21\":1,\"22\":1,\"29\":1,\"34\":1,\"45\":1,\"47\":4,\"50\":1,\"54\":1,\"57\":1,\"67\":1}}],[\"一切\",{\"1\":{\"3\":1,\"89\":1}}],[\"一步\",{\"1\":{\"3\":1}}],[\"一起\",{\"1\":{\"3\":1}}],[\"一蹴而就\",{\"1\":{\"3\":1}}],[\"一次\",{\"1\":{\"3\":1,\"35\":2,\"99\":1}}],[\"一生\",{\"1\":{\"3\":1}}],[\"一些\",{\"1\":{\"3\":2,\"23\":1,\"43\":1,\"46\":3}}],[\"一个\",{\"1\":{\"3\":6,\"23\":7,\"24\":6,\"25\":5,\"29\":1,\"31\":2,\"34\":2,\"35\":1,\"36\":1,\"37\":1,\"39\":1,\"40\":1,\"41\":11,\"43\":1,\"45\":3,\"46\":6,\"47\":9,\"49\":3,\"50\":1,\"53\":1,\"57\":1,\"58\":4,\"59\":1,\"60\":4,\"64\":1,\"66\":2,\"68\":2,\"69\":3,\"83\":1,\"85\":1,\"87\":4,\"89\":1,\"91\":1,\"94\":1,\"95\":4,\"96\":5,\"100\":3,\"107\":1,\"108\":3,\"110\":2,\"111\":2,\"112\":5}}],[\"一份\",{\"1\":{\"3\":1}}],[\"一年\",{\"1\":{\"3\":2}}],[\"一定\",{\"1\":{\"3\":2,\"28\":2,\"50\":1,\"61\":1,\"107\":1}}],[\"一\",{\"1\":{\"3\":1}}],[\"一下\",{\"1\":{\"3\":1}}],[\"一点点\",{\"1\":{\"3\":1}}],[\"一点\",{\"1\":{\"3\":3}}],[\"一大\",{\"1\":{\"3\":3}}],[\"一直\",{\"1\":{\"3\":2,\"109\":1}}],[\"一转眼\",{\"1\":{\"3\":1}}],[\"从主\",{\"1\":{\"84\":1,\"108\":2}}],[\"从中\",{\"1\":{\"69\":1}}],[\"从而\",{\"1\":{\"34\":1,\"46\":1,\"57\":1,\"84\":1,\"109\":1}}],[\"从上到下\",{\"1\":{\"31\":1}}],[\"从未\",{\"1\":{\"3\":1}}],[\"从\",{\"1\":{\"3\":5,\"46\":3,\"50\":1,\"68\":2,\"95\":2,\"108\":2,\"109\":1}}],[\"珍惜\",{\"1\":{\"3\":1}}],[\"却\",{\"1\":{\"3\":1,\"31\":1}}],[\"见怪不怪\",{\"1\":{\"3\":1}}],[\"习以为常\",{\"1\":{\"3\":1}}],[\"这会\",{\"1\":{\"98\":1}}],[\"这项\",{\"1\":{\"95\":1}}],[\"这行\",{\"1\":{\"62\":1}}],[\"这类\",{\"1\":{\"55\":2}}],[\"这段\",{\"1\":{\"46\":1}}],[\"这时\",{\"1\":{\"41\":1}}],[\"这是\",{\"1\":{\"25\":2,\"57\":1,\"100\":1}}],[\"这里\",{\"1\":{\"5\":1,\"6\":1,\"10\":1,\"11\":2,\"13\":1,\"14\":1,\"16\":1,\"17\":2,\"19\":1,\"20\":2,\"102\":1,\"103\":1,\"105\":1,\"106\":1,\"109\":1}}],[\"这些\",{\"1\":{\"3\":2,\"22\":1,\"23\":1,\"24\":1,\"34\":2,\"41\":1,\"46\":1,\"47\":1,\"49\":1,\"55\":2,\"85\":1,\"87\":1,\"95\":1}}],[\"这么\",{\"1\":{\"3\":1}}],[\"这\",{\"1\":{\"3\":12,\"28\":1,\"29\":1,\"31\":2,\"35\":2,\"41\":4,\"46\":6,\"49\":1,\"50\":1,\"58\":2,\"60\":1,\"87\":2,\"94\":2,\"95\":2,\"107\":1,\"108\":2}}],[\"这样\",{\"1\":{\"3\":5,\"41\":1,\"46\":1,\"95\":1,\"112\":1}}],[\"这种\",{\"1\":{\"3\":1,\"37\":2,\"41\":1,\"50\":2,\"89\":1,\"94\":1,\"95\":1,\"110\":1,\"112\":2}}],[\"这个\",{\"1\":{\"3\":2,\"24\":1,\"31\":2,\"37\":3,\"46\":2,\"47\":1,\"49\":1,\"60\":2,\"87\":1,\"95\":3,\"96\":1,\"98\":1,\"107\":1,\"108\":2,\"109\":1,\"110\":1,\"112\":4}}],[\"对泛\",{\"1\":{\"62\":1}}],[\"对外\",{\"1\":{\"43\":1,\"78\":1}}],[\"对比\",{\"0\":{\"51\":1},\"1\":{\"43\":1}}],[\"对象\",{\"0\":{\"89\":1,\"90\":1},\"1\":{\"29\":6,\"30\":5,\"36\":3,\"37\":6,\"39\":6,\"40\":5,\"41\":24,\"43\":10,\"47\":2,\"49\":22,\"50\":20,\"51\":19,\"58\":1,\"61\":1,\"62\":4,\"68\":2,\"69\":1,\"80\":1,\"85\":2,\"89\":3,\"90\":4,\"92\":1,\"94\":4,\"95\":4,\"96\":8,\"97\":3,\"98\":1,\"100\":5}}],[\"对象化\",{\"1\":{\"29\":1}}],[\"对应\",{\"1\":{\"29\":1,\"49\":1,\"51\":1,\"60\":1,\"87\":1,\"100\":1,\"109\":1}}],[\"对于\",{\"1\":{\"3\":4,\"39\":5,\"68\":1,\"69\":1,\"95\":2,\"100\":1}}],[\"对此\",{\"1\":{\"3\":1}}],[\"对\",{\"1\":{\"3\":6,\"29\":1,\"33\":1,\"34\":3,\"37\":1,\"41\":2,\"43\":1,\"50\":2,\"59\":1,\"67\":1,\"84\":1,\"91\":1,\"98\":1,\"100\":3,\"108\":3,\"109\":3,\"110\":3,\"111\":1,\"112\":2}}],[\"仿佛\",{\"1\":{\"3\":1}}],[\"们\",{\"1\":{\"3\":1}}],[\"学生\",{\"1\":{\"3\":2,\"49\":13,\"50\":13}}],[\"学历\",{\"1\":{\"3\":1}}],[\"学校\",{\"1\":{\"3\":2}}],[\"学期\",{\"1\":{\"3\":1}}],[\"学习成绩\",{\"1\":{\"3\":1}}],[\"学习\",{\"1\":{\"3\":16}}],[\"学妹\",{\"1\":{\"3\":1}}],[\"学弟\",{\"1\":{\"3\":1}}],[\"备考\",{\"1\":{\"3\":1}}],[\"、\",{\"0\":{\"35\":1},\"1\":{\"3\":31,\"21\":6,\"22\":3,\"23\":4,\"24\":4,\"28\":5,\"29\":1,\"30\":4,\"34\":7,\"36\":2,\"37\":5,\"40\":2,\"41\":2,\"43\":9,\"45\":1,\"46\":1,\"47\":5,\"49\":2,\"54\":2,\"55\":3,\"56\":1,\"57\":1,\"58\":1,\"62\":1,\"73\":1,\"75\":1,\"77\":1,\"81\":1,\"87\":2,\"88\":7,\"91\":2,\"94\":2,\"95\":1,\"100\":11,\"111\":5,\"112\":4}}],[\"努力\",{\"1\":{\"3\":1}}],[\"都\",{\"1\":{\"3\":13,\"25\":1,\"34\":1,\"36\":1,\"39\":1,\"40\":1,\"41\":2,\"46\":1,\"47\":2,\"50\":1,\"60\":1,\"68\":2,\"69\":2,\"72\":1,\"84\":1,\"89\":1,\"94\":1,\"95\":3,\"98\":1,\"100\":2,\"107\":1,\"108\":1,\"110\":2,\"111\":1,\"112\":2}}],[\"里教\",{\"1\":{\"3\":1}}],[\"里\",{\"1\":{\"3\":4,\"28\":2,\"49\":1,\"56\":1,\"60\":6}}],[\"熟悉\",{\"1\":{\"3\":1}}],[\"坐在\",{\"1\":{\"3\":1}}],[\"正则表达式\",{\"1\":{\"99\":1}}],[\"正如\",{\"1\":{\"46\":1}}],[\"正常\",{\"1\":{\"35\":1,\"58\":1,\"88\":1}}],[\"正数\",{\"1\":{\"34\":3}}],[\"正确\",{\"0\":{\"112\":1},\"1\":{\"22\":1,\"23\":1,\"41\":1,\"87\":1}}],[\"正\",{\"1\":{\"3\":1}}],[\"此\",{\"1\":{\"60\":3}}],[\"此时\",{\"1\":{\"37\":1,\"45\":1,\"95\":2}}],[\"此刻\",{\"1\":{\"3\":1}}],[\"此处\",{\"1\":{\"0\":1,\"1\":1,\"7\":1}}],[\"了解\",{\"1\":{\"3\":1,\"107\":1}}],[\"了\",{\"1\":{\"3\":25,\"22\":3,\"23\":3,\"24\":2,\"25\":5,\"31\":2,\"35\":1,\"37\":1,\"40\":2,\"41\":4,\"43\":1,\"46\":3,\"47\":5,\"49\":4,\"50\":1,\"54\":1,\"55\":1,\"56\":2,\"57\":1,\"58\":1,\"60\":4,\"62\":1,\"65\":1,\"66\":1,\"84\":1,\"88\":1,\"89\":1,\"90\":1,\"94\":2,\"95\":7,\"96\":1,\"98\":1,\"99\":1,\"108\":2,\"109\":4,\"110\":1,\"112\":1}}],[\"杀青\",{\"1\":{\"3\":1}}],[\"，\",{\"1\":{\"3\":109,\"21\":5,\"22\":11,\"23\":18,\"24\":14,\"25\":1,\"28\":8,\"29\":11,\"30\":2,\"31\":12,\"33\":10,\"34\":24,\"35\":11,\"36\":11,\"37\":29,\"39\":18,\"40\":7,\"41\":35,\"43\":25,\"45\":8,\"46\":31,\"47\":28,\"49\":10,\"50\":14,\"51\":7,\"53\":1,\"54\":4,\"55\":13,\"56\":8,\"57\":12,\"58\":8,\"59\":2,\"60\":31,\"61\":8,\"62\":10,\"63\":2,\"64\":2,\"65\":1,\"66\":7,\"67\":2,\"68\":7,\"69\":10,\"71\":2,\"72\":1,\"75\":2,\"76\":3,\"77\":3,\"78\":4,\"80\":7,\"81\":2,\"82\":4,\"83\":4,\"84\":5,\"85\":7,\"86\":2,\"87\":9,\"88\":4,\"89\":5,\"90\":5,\"91\":5,\"92\":4,\"94\":10,\"95\":27,\"96\":17,\"97\":1,\"98\":12,\"100\":15,\"107\":9,\"108\":8,\"109\":23,\"110\":14,\"111\":6,\"112\":20}}],[\"夏天\",{\"1\":{\"3\":3}}],[\"到底\",{\"1\":{\"3\":2,\"43\":1}}],[\"到\",{\"1\":{\"3\":5,\"22\":1,\"29\":1,\"41\":2,\"50\":1,\"59\":3,\"60\":8,\"85\":1,\"95\":1,\"97\":1,\"100\":1,\"107\":1,\"108\":1,\"109\":7,\"110\":1,\"112\":1}}],[\"又\",{\"1\":{\"3\":2,\"53\":1,\"55\":1,\"60\":1}}],[\"四年\",{\"1\":{\"2\":1,\"3\":3}}],[\"我会\",{\"1\":{\"3\":1}}],[\"我们\",{\"1\":{\"3\":9,\"23\":1,\"25\":4,\"29\":1,\"30\":1,\"31\":2,\"40\":1,\"41\":7,\"46\":3,\"47\":3,\"55\":3,\"62\":1,\"64\":1,\"68\":1,\"69\":1,\"87\":3,\"88\":2,\"90\":1,\"91\":1,\"92\":1,\"95\":1,\"96\":2,\"107\":2,\"112\":2}}],[\"我\",{\"1\":{\"2\":1,\"3\":45,\"47\":2}}],[\"是非\",{\"1\":{\"57\":1}}],[\"是否\",{\"1\":{\"30\":2,\"37\":1,\"40\":5,\"41\":1,\"60\":1,\"96\":1,\"99\":4}}],[\"是否是\",{\"1\":{\"30\":1}}],[\"是值\",{\"1\":{\"29\":1}}],[\"是因为\",{\"1\":{\"29\":1,\"60\":1,\"87\":1}}],[\"是\",{\"1\":{\"1\":1,\"3\":17,\"5\":1,\"6\":1,\"7\":1,\"10\":1,\"11\":2,\"13\":1,\"14\":1,\"16\":1,\"17\":2,\"19\":1,\"20\":2,\"21\":2,\"22\":1,\"23\":5,\"24\":1,\"25\":1,\"29\":6,\"30\":1,\"31\":3,\"33\":1,\"34\":1,\"36\":1,\"37\":3,\"39\":9,\"40\":4,\"41\":8,\"43\":8,\"45\":2,\"46\":4,\"47\":11,\"49\":2,\"50\":4,\"53\":2,\"54\":1,\"55\":1,\"57\":2,\"58\":3,\"60\":1,\"62\":3,\"64\":1,\"66\":2,\"68\":3,\"69\":4,\"70\":1,\"71\":2,\"72\":1,\"80\":1,\"82\":1,\"86\":1,\"87\":3,\"88\":2,\"90\":1,\"91\":1,\"94\":3,\"95\":7,\"96\":2,\"97\":1,\"98\":1,\"100\":2,\"102\":1,\"103\":1,\"105\":1,\"106\":1,\"107\":2,\"108\":2,\"109\":2,\"110\":1,\"111\":1,\"112\":4}}],[\"。\",{\"1\":{\"0\":1,\"3\":32,\"5\":1,\"6\":1,\"10\":1,\"11\":2,\"13\":1,\"14\":1,\"16\":1,\"17\":2,\"19\":1,\"20\":2,\"21\":3,\"22\":7,\"23\":6,\"24\":10,\"25\":6,\"28\":4,\"29\":5,\"30\":2,\"31\":5,\"33\":2,\"34\":7,\"35\":4,\"37\":13,\"39\":4,\"40\":6,\"41\":23,\"43\":7,\"45\":3,\"46\":13,\"47\":18,\"49\":2,\"50\":8,\"51\":13,\"53\":2,\"54\":2,\"55\":10,\"56\":9,\"57\":6,\"58\":5,\"60\":14,\"61\":4,\"62\":5,\"63\":1,\"64\":1,\"65\":1,\"66\":4,\"67\":1,\"68\":5,\"69\":5,\"70\":5,\"71\":2,\"72\":5,\"73\":2,\"75\":1,\"76\":1,\"77\":1,\"78\":1,\"80\":5,\"81\":4,\"82\":5,\"83\":1,\"84\":2,\"85\":2,\"86\":2,\"87\":8,\"88\":3,\"90\":2,\"91\":4,\"92\":3,\"94\":2,\"95\":18,\"96\":7,\"97\":2,\"98\":6,\"100\":5,\"102\":1,\"103\":1,\"105\":1,\"106\":1,\"107\":3,\"108\":6,\"109\":5,\"110\":6,\"111\":12,\"112\":15}}],[\"在\",{\"1\":{\"0\":1,\"3\":14,\"21\":3,\"22\":2,\"23\":2,\"24\":8,\"25\":4,\"28\":2,\"29\":1,\"30\":1,\"31\":3,\"34\":3,\"35\":2,\"36\":2,\"37\":8,\"39\":3,\"40\":1,\"41\":8,\"43\":5,\"46\":4,\"47\":5,\"49\":1,\"50\":4,\"55\":3,\"56\":2,\"57\":3,\"58\":4,\"59\":1,\"60\":7,\"61\":2,\"62\":3,\"64\":1,\"66\":3,\"67\":1,\"72\":3,\"75\":1,\"76\":1,\"78\":1,\"80\":3,\"81\":1,\"83\":1,\"87\":5,\"88\":3,\"95\":8,\"96\":11,\"97\":2,\"98\":3,\"100\":9,\"107\":4,\"108\":3,\"109\":2,\"110\":7,\"112\":2}}],[\"档案\",{\"1\":{\"0\":1}}],[\"和\",{\"0\":{\"22\":1,\"35\":1,\"38\":1,\"48\":1,\"91\":1,\"92\":1},\"1\":{\"0\":1,\"3\":3,\"22\":1,\"24\":2,\"29\":1,\"30\":1,\"31\":1,\"33\":1,\"34\":3,\"37\":6,\"39\":6,\"40\":1,\"41\":3,\"43\":10,\"46\":6,\"47\":5,\"49\":4,\"50\":2,\"51\":3,\"53\":1,\"55\":1,\"56\":1,\"60\":2,\"62\":2,\"71\":1,\"73\":2,\"77\":1,\"80\":2,\"82\":1,\"83\":1,\"88\":2,\"91\":1,\"94\":1,\"95\":1,\"96\":1,\"98\":3,\"100\":2,\"108\":1,\"109\":4,\"110\":1,\"111\":3,\"112\":1}}],[\"的值\",{\"1\":{\"95\":1}}],[\"的类\",{\"1\":{\"75\":1}}],[\"的有\",{\"1\":{\"55\":2}}],[\"的话\",{\"1\":{\"3\":1,\"30\":1,\"41\":1,\"69\":2,\"100\":1}}],[\"的\",{\"0\":{\"31\":1,\"47\":1,\"95\":1,\"111\":1,\"112\":1},\"1\":{\"0\":1,\"1\":1,\"2\":1,\"3\":107,\"7\":1,\"21\":4,\"22\":5,\"23\":13,\"24\":5,\"25\":13,\"28\":4,\"29\":16,\"30\":6,\"31\":10,\"33\":9,\"34\":11,\"35\":6,\"36\":6,\"37\":27,\"39\":17,\"40\":17,\"41\":44,\"43\":33,\"45\":6,\"46\":28,\"47\":19,\"49\":12,\"50\":22,\"51\":7,\"53\":2,\"54\":3,\"55\":5,\"56\":7,\"57\":7,\"58\":8,\"59\":2,\"60\":26,\"61\":3,\"62\":6,\"64\":3,\"65\":1,\"66\":13,\"67\":1,\"68\":8,\"69\":8,\"70\":1,\"71\":1,\"72\":3,\"73\":3,\"75\":2,\"76\":3,\"77\":1,\"78\":4,\"80\":5,\"81\":7,\"82\":2,\"83\":1,\"84\":2,\"85\":3,\"86\":2,\"87\":10,\"88\":7,\"89\":5,\"90\":7,\"91\":15,\"92\":10,\"94\":17,\"95\":31,\"96\":12,\"97\":6,\"98\":10,\"99\":4,\"100\":22,\"107\":7,\"108\":15,\"109\":17,\"110\":10,\"111\":6,\"112\":18}}],[\"你\",{\"1\":{\"0\":1,\"3\":1,\"37\":1,\"41\":1,\"51\":1}}],[\"将会\",{\"1\":{\"60\":1}}],[\"将要\",{\"1\":{\"56\":1}}],[\"将来\",{\"1\":{\"23\":1}}],[\"将\",{\"1\":{\"0\":1,\"3\":1,\"22\":1,\"25\":1,\"28\":2,\"29\":1,\"33\":2,\"34\":1,\"41\":2,\"46\":2,\"50\":1,\"55\":1,\"57\":1,\"60\":5,\"85\":2,\"87\":2,\"97\":1,\"99\":1,\"100\":1,\"107\":1,\"108\":1,\"109\":2,\"110\":1}}],[\"页\",{\"0\":{\"0\":1}}],[\"介绍\",{\"0\":{\"0\":1},\"1\":{\"0\":1,\"100\":1}}]],\"version\":2}}")).map(([e,t])=>[e,_t(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:n,options:o,id:s}})=>{const r=xt[n];e==="suggest"?self.postMessage([e,s,ve(t,r,o)]):e==="search"?self.postMessage([e,s,Ie(t,r,o,"max")]):self.postMessage({suggestions:[e,s,ve(t,r,o)],results:[e,s,Ie(t,r,o,__SLIMSEARCH_SORT_STRATEGY__)]})};
//# sourceMappingURL=index.js.map
