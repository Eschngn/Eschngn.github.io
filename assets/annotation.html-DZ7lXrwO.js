import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e as a,o as n}from"./app-DFCvIoar.js";const c={};function i(d,e){return n(),t("div",null,e[0]||(e[0]=[a('<p>在 Java 中，注解（<code>Annotation</code>） 是一种特殊的元数据，它为代码提供额外的信息，但本身并不会直接影响代码的执行逻辑。注解可以应用于类、方法、字段、参数、局部变量、构造器等程序元素上。</p><p>注解在 Java 5 中引入，主要目的是简化配置、减少样板代码，并提供在编译期或运行时处理代码的机制。</p><h2 id="本质和作用" tabindex="-1"><a class="header-anchor" href="#本质和作用"><span>本质和作用</span></a></h2><p>注解本质上是 Java 代码中的一种标记或元数据，它不包含业务逻辑，但能够被工具、框架或编译器读取和解析，并根据这些信息执行相应的操作。</p><p>其主要作用如下：</p><ol><li><p>编译期检查： 编译器可以根据注解进行错误检查或发出警告。例如，<code>@Override</code> 注解可以确保子类方法正确地重写了父类方法。</p></li><li><p>代码生成： 在编译期或运行时，基于注解信息生成额外的代码（例如，Lombok 使用注解自动生成 <code>getter/setter</code>）。</p></li><li><p>运行时处理： 许多框架（如 Spring、Hibernate、JUnit）在运行时通过反射读取注解信息，并据此调整其行为。例如，Spring 的 <code>@Autowired</code> 注解用于自动装配依赖。</p></li><li><p>简化配置： 相较于 XML 等配置文件，注解将配置信息直接嵌入到代码中，减少了配置的复杂性，提高了可读性。</p></li></ol><h2 id="内置注解" tabindex="-1"><a class="header-anchor" href="#内置注解"><span>内置注解</span></a></h2><p>Java 语言自身提供了一些标准注解，用于编译器或 JVM 的特定行为：</p><ol><li><code>@Override</code>：标记一个方法是重写（覆盖）父类或实现接口中的方法，如果被标记的方法没有正确地重写父类方法（例如，方法名拼写错误、参数不匹配），编译器会报错，以此来帮助开发者避免常见的重写错误，提高代码的健壮性。</li><li><code>@Deprecated</code>：标记一个类、方法或字段是已过时的，当代码中使用了被 <code>@Deprecated</code> 标记的元素时，编译器会发出警告，以此来告知开发者该元素将来可能会被移除或有更好的替代方案，建议不再使用。</li><li><code>@SuppressWarnings</code>：指示编译器抑制（不显示）特定的警告信息，可以接受一个字符串数组作为参数，指定要抑制的警告类型（如 <code>&quot;unchecked&quot;</code>、<code>&quot;rawtypes&quot;</code>、<code>&quot;deprecation&quot;</code> 等）。 在我们确定某些警告是安全且可以忽略时，用于清除编译器的警告，使编译输出更干净。</li><li><code>@FunctionalInterface</code> (Java 8 引入)： 标记一个接口是函数式接口，即只包含一个抽象方法的接口，如果一个接口被 <code>@FunctionalInterface</code> 标记但包含多个抽象方法，编译器会报错。</li><li><code>@SafeVarargs</code> (Java 7 引入)：标记一个方法或构造器使用了可变长参数 （<code>Varargs</code>），并且这些可变长参数在处理时是类型安全的。</li></ol><h2 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解"><span>元注解</span></a></h2><p>元注解 <code>(Meta-Annotations)</code> 是用来注解其他注解的注解。它们定义了自定义注解的行为和属性。</p><ol><li><code>@Target</code> ：指定自定义注解可以应用于哪些程序元素上，接受一个 <code>ElementType</code> 枚举数组，如 <code>ElementType.TYPE</code> (类、接口、枚举)、<code>ElementType.METHOD</code> (方法)、<code>ElementType.FIELD</code> (字段) 等。</li><li><code>@Retention</code> ： 指定自定义注解的生命周期，即注解信息在何时可用，接受一个 <code>RetentionPolicy</code> 枚举值： <ul><li><code>RetentionPolicy.SOURCE</code>：注解只保留在源代码中，编译后会被丢弃（如 <code>@Override</code>）。</li><li><code>RetentionPolicy.CLASS</code>：注解保留在 <code>.class</code> 文件中，但在运行时无法通过反射获取（默认值）。</li><li><code>RetentionPolicy.RUNTIME</code>：注解保留在 <code>.class</code> 文件中，并且在运行时可以通过反射获取和处理（如 Spring 的 <code>@Autowired</code>）。</li></ul></li><li><code>@Documented</code>：标记一个自定义注解，表示该注解会被包含在 Javadoc 文档中。</li><li><code>@Inherited</code>：标记一个自定义注解，表示如果一个类被该注解标记，则其子类会继承这个注解，只能应用于类，不能应用于方法或字段。</li><li><code>@Repeatable</code> (Java 8 引入)：标记一个自定义注解，表示该注解可以在同一个程序元素上重复使用。</li></ol><h2 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h2><p>我们可以根据自己的需求创建自定义注解 <code>（Custom Annotations）</code>。</p>',14)]))}const l=o(c,[["render",i]]),s=JSON.parse(`{"path":"/knowledge-base/java/basis/annotation.html","title":"注解","lang":"zh-CN","frontmatter":{"title":"注解","category":["Java"],"tag":["Java基础"],"description":"在 Java 中，注解（Annotation） 是一种特殊的元数据，它为代码提供额外的信息，但本身并不会直接影响代码的执行逻辑。注解可以应用于类、方法、字段、参数、局部变量、构造器等程序元素上。 注解在 Java 5 中引入，主要目的是简化配置、减少样板代码，并提供在编译期或运行时处理代码的机制。 本质和作用 注解本质上是 Java 代码中的一种标记或...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注解\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-06T13:09:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Shawn\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/knowledge-base/java/basis/annotation.html"}],["meta",{"property":"og:site_name","content":"Shawn's Blog"}],["meta",{"property":"og:title","content":"注解"}],["meta",{"property":"og:description","content":"在 Java 中，注解（Annotation） 是一种特殊的元数据，它为代码提供额外的信息，但本身并不会直接影响代码的执行逻辑。注解可以应用于类、方法、字段、参数、局部变量、构造器等程序元素上。 注解在 Java 5 中引入，主要目的是简化配置、减少样板代码，并提供在编译期或运行时处理代码的机制。 本质和作用 注解本质上是 Java 代码中的一种标记或..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-06T13:09:46.000Z"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:modified_time","content":"2025-08-06T13:09:46.000Z"}]]},"git":{"createdTime":1754485786000,"updatedTime":1754485786000,"contributors":[{"name":"Summer Snow","username":"","email":"ScoMorii@163.com","commits":1}]},"readingTime":{"minutes":3.58,"words":1074},"filePathRelative":"knowledge-base/java/basis/annotation.md","excerpt":"<p>在 Java 中，注解（<code>Annotation</code>） 是一种特殊的元数据，它为代码提供额外的信息，但本身并不会直接影响代码的执行逻辑。注解可以应用于类、方法、字段、参数、局部变量、构造器等程序元素上。</p>\\n<p>注解在 Java 5 中引入，主要目的是简化配置、减少样板代码，并提供在编译期或运行时处理代码的机制。</p>\\n<h2>本质和作用</h2>\\n<p>注解本质上是 Java 代码中的一种标记或元数据，它不包含业务逻辑，但能够被工具、框架或编译器读取和解析，并根据这些信息执行相应的操作。</p>\\n<p>其主要作用如下：</p>\\n<ol>\\n<li>\\n<p>编译期检查： 编译器可以根据注解进行错误检查或发出警告。例如，<code>@Override</code> 注解可以确保子类方法正确地重写了父类方法。</p>\\n</li>\\n<li>\\n<p>代码生成： 在编译期或运行时，基于注解信息生成额外的代码（例如，Lombok 使用注解自动生成 <code>getter/setter</code>）。</p>\\n</li>\\n<li>\\n<p>运行时处理： 许多框架（如 Spring、Hibernate、JUnit）在运行时通过反射读取注解信息，并据此调整其行为。例如，Spring 的 <code>@Autowired</code> 注解用于自动装配依赖。</p>\\n</li>\\n<li>\\n<p>简化配置： 相较于 XML 等配置文件，注解将配置信息直接嵌入到代码中，减少了配置的复杂性，提高了可读性。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{l as comp,s as data};
