import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,e as a,o as n}from"./app-ijEh2Y-y.js";const i={};function l(c,e){return n(),o("div",null,e[0]||(e[0]=[a('<p>在 Java 中，<code>volatile</code> 关键字是一个非常重要的非访问控制修饰符，它用于修饰类的成员变量。在多线程环境中，<code>volatile</code> 可以保证变量的可见性，如果我们将变量声明为 <strong><code>volatile</code></strong> ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。</p><p>在 JDK 5 之后 <code>volatile</code> 关键字还具备一定的有序性（Ordering）。</p><p>在了解 <code>volatile</code> 实现原理之前，我们先来看下与其实现原理相关的 CPU 术语与说明，下图摘自 《Java 并发编程的艺术》：</p><figure><img src="https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/cpu-terminology-and-description.png" alt="相关 CPU 术语与说明" tabindex="0" loading="lazy"><figcaption>相关 CPU 术语与说明</figcaption></figure><h2 id="标题-2" tabindex="-1"><a class="header-anchor" href="#标题-2"><span>标题 2</span></a></h2><p>这里是内容。</p><h3 id="标题-3" tabindex="-1"><a class="header-anchor" href="#标题-3"><span>标题 3</span></a></h3><p>这里是内容。</p>',8)]))}const d=t(i,[["render",l]]),s=JSON.parse(`{"path":"/knowledge-base/java/concurrent/volatile.html","title":"volatile","lang":"zh-CN","frontmatter":{"title":"volatile","category":["Java"],"tag":["Java 并发编程"],"description":"在 Java 中，volatile 关键字是一个非常重要的非访问控制修饰符，它用于修饰类的成员变量。在多线程环境中，volatile 可以保证变量的可见性，如果我们将变量声明为 volatile ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。 在 JDK 5 之后 volatile 关键字还具备一定的有序性（Orderin...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"volatile\\",\\"image\\":[\\"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/cpu-terminology-and-description.png\\"],\\"dateModified\\":\\"2025-08-08T08:35:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Shawn\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/knowledge-base/java/concurrent/volatile.html"}],["meta",{"property":"og:site_name","content":"Shawn's Blog"}],["meta",{"property":"og:title","content":"volatile"}],["meta",{"property":"og:description","content":"在 Java 中，volatile 关键字是一个非常重要的非访问控制修饰符，它用于修饰类的成员变量。在多线程环境中，volatile 可以保证变量的可见性，如果我们将变量声明为 volatile ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。 在 JDK 5 之后 volatile 关键字还具备一定的有序性（Orderin..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/cpu-terminology-and-description.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-08T08:35:29.000Z"}],["meta",{"property":"article:tag","content":"Java 并发编程"}],["meta",{"property":"article:modified_time","content":"2025-08-08T08:35:29.000Z"}]]},"git":{"createdTime":1754642129000,"updatedTime":1754642129000,"contributors":[{"name":"Shawn","username":"Shawn","email":"ScoMorii@163.com","commits":1,"url":"https://github.com/Shawn"}]},"readingTime":{"minutes":0.66,"words":197},"filePathRelative":"knowledge-base/java/concurrent/volatile.md","excerpt":"<p>在 Java 中，<code>volatile</code> 关键字是一个非常重要的非访问控制修饰符，它用于修饰类的成员变量。在多线程环境中，<code>volatile</code> 可以保证变量的可见性，如果我们将变量声明为 <strong><code>volatile</code></strong> ，这就指示 JVM，这个变量是共享且不稳定的，每次使用它都到主存中进行读取。</p>\\n<p>在 JDK 5 之后 <code>volatile</code> 关键字还具备一定的有序性（Ordering）。</p>\\n<p>在了解 <code>volatile</code> 实现原理之前，我们先来看下与其实现原理相关的 CPU 术语与说明，下图摘自 《Java 并发编程的艺术》：</p>","autoDesc":true}`);export{d as comp,s as data};
