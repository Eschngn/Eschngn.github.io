import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as n}from"./app-CQrJgpvZ.js";const l={};function t(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h2><p>Java 的异常体系是一个完善的类层次结构，其基类是 <code>java.lang.Throwable</code>。<code>Throwable</code> 又派生出两个主要子类：<code>Error</code> 和 <code>Exception</code>。</p><figure><img src="https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/throwable.png" alt="异常类结构层次图" tabindex="0" loading="lazy"><figcaption>异常类结构层次图</figcaption></figure><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error"><span><code>Error</code></span></a></h3><p><code>Error</code> 代表了程序中严重的问题，通常是由 JVM 自身、操作系统或硬件问题引起的，比如内存溢出（<code>OutOfMemoryError</code>）、栈溢出（<code>StackOverflowError</code>）等。</p><p>通常，应用程序不应该尝试捕获或处理 <code>Error</code>，因为它们表示 JVM 处于一种不可恢复的状态。</p><h3 id="exception" tabindex="-1"><a class="header-anchor" href="#exception"><span><code>Exception</code></span></a></h3><p>程序本身可以合法处理的异常，这些异常通常是由程序逻辑、外部资源（文件、网络）或用户输入等问题引起的，可以通过 <code>catch</code> 来进行捕获。<code>Exception</code> 又可以分为 <code>Checked Exception</code> (受检查异常，必须处理) 和 <code>Unchecked Exception</code> (不受检查异常，可以不处理)。</p><ul><li><p>受检异常 (<code>Checked Exception</code>)：继承自 <code>Exception</code> 类，但不继承 <code>RuntimeException</code>。编译器会强制开发者预见并处理这些可能发生的外部问题，提高代码的健壮性。<br> 如果我们在方法中调用了可能抛出受检异常的方法，那么必须使用 <code>try-catch</code> 块来捕获它，或者在方法签名中使用 <code>throws</code> 关键字声明它。否则，程序将无法通过编译。<br> 常见的有：</p><ul><li><code>IOException</code> (文件找不到、网络中断等)</li><li><code>SQLException</code> (数据库操作错误)</li><li><code>ClassNotFoundException</code></li></ul></li><li><p>非受检异常 (<code>Unchecked Exception</code>) / 运行时异常 (<code>Runtime Exception</code>):继承自 RuntimeException，而 RuntimeException 继承自 Exception）。<br> 编译器不会强制我们处理这类异常。即使我们不捕获或声明它们，程序也能编译通过。但如果在运行时发生这类异常而没有被捕获，程序会终止。<br> 常见的有：</p><ul><li><code>NullPointerException</code> (空指针引用)</li><li><code>ArrayIndexOutOfBoundsException</code> (数组越界)</li><li><code>ClassCastException</code> (类型转换错误)</li><li><code>ArithmeticException</code> (算术错误，如除以零)</li></ul></li></ul><h2 id="处理机制" tabindex="-1"><a class="header-anchor" href="#处理机制"><span>处理机制</span></a></h2><p>Java 提供了以下关键字来处理异常：</p><ul><li><p><code>try</code>：用于监听。将要被监听的代码(可能抛出异常的代码)放在 <code>try</code> 语句块之内，当 <code>try</code> 语句块内发生异常时，异常就被抛出。</p></li><li><p><code>catch</code>：用于捕获异常。<code>catch</code> 用来捕获 <code>try</code> 语句块中发生的异常。</p></li><li><p><code>finally</code>：<code>finally</code> 语句块总是会被执行。它主要用于回收在try块里打开的物力资源(如数据库连接、网络连接和磁盘文件)。只有 <code>finally</code> 块，执行完成之后，才会回来执行 <code>try</code> 或者 <code>catch</code> 块中的 <code>return</code> 或者 <code>throw</code> 语句，如果 <code>finally</code> 中使用了 <code>return</code> 或者 <code>throw</code> 等终止方法的语句，则就不会跳回执行，直接停止。</p></li><li><p><code>throw</code>：用于抛出异常。</p></li><li><p><code>throws</code>：用在方法签名中，用于声明该方法可能抛出的异常。</p></li></ul><h3 id="throws" tabindex="-1"><a class="header-anchor" href="#throws"><span><code>throws</code></span></a></h3><p>在 Java 中，<code>throws</code> 关键字用于声明一个方法可能抛出的异常类型。这是一种让调用者知道该方法在执行过程中可能会遇到的异常，从而使得调用者可以采取相应的处理措施。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() throws IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> FileNotFoundException{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //something statements</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️注意：</p><ul><li>若是父类的方法没有声明异常，则子类继承后，也不能声明异常。</li><li>如果是非受检异常（<code>unchecked exception</code>），即 <code>Error、RuntimeException</code> 或它们的子类，那么可以不使用 <code>throws</code> 关键字来声明要抛出的异常，编译仍能顺利通过，但在运行时会被系统抛出。</li><li>如果是受检查异常（<code>checked exception</code>），要么用 <code>try-catch</code> 语句捕获，要么用 <code>throws</code> 子句将它抛出，否则会导致编译时错误。</li><li>某个方法抛出了异常，那么该方法的调用者必须处理或者重新抛出该异常。</li></ul><h3 id="throw" tabindex="-1"><a class="header-anchor" href="#throw"><span><code>throw</code></span></a></h3><p>在 Java 中，<code>throw</code> 关键字用于显式地抛出一个异常。这意味着程序员可以在代码的特定位置主动触发异常，以指示出现了某种错误或不正常的状态。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> double</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> value) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        throw</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ArithmeticException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;参数不能为0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //抛出一个运行时异常</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 11.0</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> /</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⚠️注意：</p><ul><li>必须是 <code>Throwable</code> 的子类：<code>throw</code> 后面跟的是一个 <code>Throwable</code> 对象，这可以是一个异常（如 <code>IllegalArgumentException、NullPointerException</code> 等）或错误（如 <code>OutOfMemoryError</code>）。</li><li>使用位置：<code>throw</code> 通常在方法体内使用，在代码的逻辑流中，当满足特定条件时，可以抛出异常。</li><li>控制流影响：抛出异常会立即终止当前方法的执行，控制流会转到调用该方法的地方，直到找到合适的 <code>catch</code> 块处理异常。</li></ul><h3 id="try-catch" tabindex="-1"><a class="header-anchor" href="#try-catch"><span><code>try-catch</code></span></a></h3><p>在一个 <code>try - catch</code> 语句块中可以捕获多个异常类型，并对不同类型的异常做出不同的处理：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 抛出异常</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NullPointerException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;捕获到 NullPointerException: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ArithmeticException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;捕获到 ArithmeticException: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同一个 <code>catch</code> 也可以捕获多种类型异常，用 <code>|</code> 隔开：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 抛出异常</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NullPointerException</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> | </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ArithmeticException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;捕获到异常: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="try-catch-finally" tabindex="-1"><a class="header-anchor" href="#try-catch-finally"><span><code>try - catch - finally</code></span></a></h3><ul><li><p><code>try</code> 块：用于捕获异常。其后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块。</p></li><li><p><code>catch</code> 块：用于处理 <code>try</code> 捕获到的异常。</p></li><li><p><code>finally</code> 块：无论是否捕获或处理异常，<code>finally</code> 块里的语句都会被执行。当在 <code>try</code> 块或 <code>catch</code> 块中遇到 <code>return</code> 语句时，<code>finally</code> 语句块将在方法返回之前被执行。</p></li></ul><p>常规语法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {                        </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //执行程序代码，可能会出现异常                 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {   </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //捕获异常并处理   </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //必执行的代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行顺序：</p><ul><li>当 <code>try</code> 没有捕获到异常时：<code>try</code> 语句块中的语句逐一被执行，程序将跳过 <code>catch</code> 语句块，执行 <code>finally</code> 语句块和其后的语句；</li><li>当 <code>try</code> 捕获到异常，<code>catch</code> 语句块里没有处理此异常的情况：此异常将会抛给 <code>JVM</code>，语句块里的语句还是会被执行，但 <code>finally</code> 语句块后的语句不会被执行；</li><li>当 <code>try</code> 捕获到异常，<code>catch</code> 语句块里有处理此异常的情况：在 <code>try</code> 语句块中是按照顺序来执行的，当执行到某一条语句出现异常时，程序将跳到 <code>catch</code> 语句块，并与 <code>catch</code> 语句块逐一匹配，找到与之对应的处理程序，其他的 <code>catch</code> 语句块将不会被执行，而 <code>try</code> 语句块中，出现异常之后的语句也不会被执行，<code>catch</code> 语句块执行完后，执行 <code>finally</code> 语句块里的语句，最后执行 <code>finally</code> 语句块后的语句。</li></ul><p>⚠️注意：</p><ul><li><p>若 <code>catch</code> 语句块和 <code>finall</code> 语句块里同时存在 <code>return</code> 语句时，代码 <code>try</code> 语句块中的 <code>return</code> 语句会被忽略。这是因为 <code>try</code> 语句中的 <code>return</code> 返回值会先被暂存在一个本地变量中，当执行到 <code>finally</code> 语句中的 <code>return</code> 之后，这个本地变量的值就变为了 <code>finally</code> 语句中的 <code>return</code> 返回值。<br> 另外， 如果 <code>try</code> 块中抛出了一个异常，并且 <code>finally</code> 块中又有一个 <code>return</code> 语句，那么这个 <code>return</code> 语句会阻止异常的传播，导致异常被静默地吞噬掉，外部调用者将无法感知到异常的发生。<br> 所以不要在 <code>finally</code> 语句块中使用 <code>return</code> ！</p></li><li><p>在某些情况下，<code>finally</code> 中的代码不会被执行。在以下 4 种特殊情况下，<code>finally</code> 块的代码不会被执行：</p><ul><li>程序所在的线程死亡。</li><li>关闭 CPU。</li><li>在前面的代码中用了 <code>System.exit()</code> 退出程序。</li><li><code>finally</code> 语句块中发生了异常。</li></ul></li></ul><h3 id="try-finally" tabindex="-1"><a class="header-anchor" href="#try-finally"><span><code>try - finally</code></span></a></h3><p><code>try</code> 块中引起异常，异常代码之后的语句不再执行，直接执行 <code>finally</code> 语句。<code>try</code> 块没有引发异常，则执行完 <code>try</code> 块就执行 <code>finally</code> 语句。</p><p><code>try-finally</code> 可用在不需要捕获异常的代码，可以保证资源在使用后被关闭。例如 <code>IO</code> 流中执行完相应操作后，关闭相应资源；使用 <code>Lock</code> 对象保证线程同步，通过 <code>finally</code> 可以保证锁会被释放；数据库连接代码时，关闭连接操作等等。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//以 Lock 加锁为例，演示 try - finally</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ReentrantLock</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ReentrantLock</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //需要加锁的代码</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //保证锁一定被释放</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39)]))}const o=s(l,[["render",t]]),p=JSON.parse(`{"path":"/knowledge-base/java/basis/exception.html","title":"异常","lang":"zh-CN","frontmatter":{"title":"异常","star":10,"sticky":10,"category":["Java"],"tag":["Java基础"],"description":"分类 Java 的异常体系是一个完善的类层次结构，其基类是 java.lang.Throwable。Throwable 又派生出两个主要子类：Error 和 Exception。 异常类结构层次图异常类结构层次图 Error Error 代表了程序中严重的问题，通常是由 JVM 自身、操作系统或硬件问题引起的，比如内存溢出（OutOfMemoryErr...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异常\\",\\"image\\":[\\"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/throwable.png\\"],\\"dateModified\\":\\"2025-07-30T14:36:05.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Shawn\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/knowledge-base/java/basis/exception.html"}],["meta",{"property":"og:site_name","content":"Shawn's Blog"}],["meta",{"property":"og:title","content":"异常"}],["meta",{"property":"og:description","content":"分类 Java 的异常体系是一个完善的类层次结构，其基类是 java.lang.Throwable。Throwable 又派生出两个主要子类：Error 和 Exception。 异常类结构层次图异常类结构层次图 Error Error 代表了程序中严重的问题，通常是由 JVM 自身、操作系统或硬件问题引起的，比如内存溢出（OutOfMemoryErr..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/throwable.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-30T14:36:05.000Z"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:modified_time","content":"2025-07-30T14:36:05.000Z"}]]},"git":{"createdTime":1753886165000,"updatedTime":1753886165000,"contributors":[{"name":"Summer Snow","username":"","email":"ScoMorii@163.com","commits":1}]},"readingTime":{"minutes":6.88,"words":2063},"filePathRelative":"knowledge-base/java/basis/exception.md","excerpt":"<h2>分类</h2>\\n<p>Java 的异常体系是一个完善的类层次结构，其基类是 <code>java.lang.Throwable</code>。<code>Throwable</code> 又派生出两个主要子类：<code>Error</code> 和 <code>Exception</code>。</p>\\n<figure><img src=\\"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/throwable.png\\" alt=\\"异常类结构层次图\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>异常类结构层次图</figcaption></figure>","autoDesc":true}`);export{o as comp,p as data};
