import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as n,o as a}from"./app-Crd-cilz.js";const t={};function d(c,i){return a(),e("div",null,i[0]||(i[0]=[n(`<p><code>synchronized</code> 是 Java 中用于实现同步的关键字，它是解决多线程并发访问共享资源时，保证数据一致性的重要手段。<code>synchronized</code> 提供了一种排他性锁的机制，确保同一时间只有一个线程可以访问被同步的代码块或方法。</p><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><p><code>synchronized</code> 关键字的作用主要体现在三个方面：</p><ol><li><p>原子性 （<code>Atomicity</code>）：确保一段代码作为一个整体执行，中间不会被其他线程中断。例如，<code>i++</code> 这样的操作看似简单，实际上是读 - 改 - 写三个步骤，不是原子性的。<code>synchronized</code> 可以将这个复合操作锁定，使其成为一个不可分割的原子操作。</p></li><li><p>可见性 （<code>Visibility</code>）：确保当一个线程修改了共享变量后，这个修改能够立即被其他线程看到。<code>synchronized</code> 在释放锁时，会将线程工作内存中的变量刷新到主内存中，在获取锁时，又会从主内存中读取最新的变量值。</p></li><li><p>有序性 （<code>Ordering</code>）：阻止指令重排序。<code>synchronized</code> 提供的内存语义可以防止编译器和处理器对同步代码块内的指令进行重排序。</p></li></ol><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h2><p><code>synchronized</code> 可以用来修饰方法和代码块。</p><p>1.同步方法（<code>Synchronized Method</code>）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在成员方法声明中使用了 <code>synchronized</code> 关键字，就表示该方法是同步的，也就是说，线程在执行这个方法的时候，其他线程不能同时执行，需要等待锁释放，使用的是<strong>类的对象实例</strong>作为监视器对象 <code>monitor</code>。</p><p>如果是静态方法的话，锁的是这个<strong>类的 Class 对象</strong>，因为静态方法是属于类级别的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.同步代码块 (<code>Synchronized Block</code>)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同步代码块可以减少需要同步的代码量，颗粒度更低，更灵活。</p><p><code>synchronized</code> 后面的括号中指定了要锁定的对象，可以是 <code>this</code>，也可以是自定义对象或者类的 <code>Class</code> 对象（<code>ClassName.class</code>）。</p><p>通常为一个普通的 <code>private</code> 成员变量，如 <code>private Object object = new Object()</code>，这样使用了所有该 <code>object</code> 对象的同步代码块，在任何时候只能存在一个线程访问。</p><p>⚠️注意：</p><ul><li>一把锁只能同时被一个线程获取，没有获得锁的线程只能等待；</li><li>每个实例都对应有自己的一把锁 (<code>this</code>),不同实例之间互不影响；例外：锁对象是 <code>*.class</code> 以及 <code>synchronized</code> 修饰的是 <code>static</code> 方法的时候，所有对象公用同一把锁；</li><li><code>synchronized</code> 修饰的方法，无论方法正常执行完毕还是抛出异常，都会释放锁。</li></ul><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h2>`,19)]))}const l=s(t,[["render",d]]),r=JSON.parse(`{"path":"/knowledge-base/java/concurrent/synchronized.html","title":"synchronized","lang":"zh-CN","frontmatter":{"title":"synchronized","category":["Java"],"tag":["Java 并发编程"],"description":"synchronized 是 Java 中用于实现同步的关键字，它是解决多线程并发访问共享资源时，保证数据一致性的重要手段。synchronized 提供了一种排他性锁的机制，确保同一时间只有一个线程可以访问被同步的代码块或方法。 作用 synchronized 关键字的作用主要体现在三个方面： 原子性 （Atomicity）：确保一段代码作为一个整体...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"synchronized\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-20T07:57:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Shawn\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/knowledge-base/java/concurrent/synchronized.html"}],["meta",{"property":"og:site_name","content":"Shawn's Blog"}],["meta",{"property":"og:title","content":"synchronized"}],["meta",{"property":"og:description","content":"synchronized 是 Java 中用于实现同步的关键字，它是解决多线程并发访问共享资源时，保证数据一致性的重要手段。synchronized 提供了一种排他性锁的机制，确保同一时间只有一个线程可以访问被同步的代码块或方法。 作用 synchronized 关键字的作用主要体现在三个方面： 原子性 （Atomicity）：确保一段代码作为一个整体..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-20T07:57:02.000Z"}],["meta",{"property":"article:tag","content":"Java 并发编程"}],["meta",{"property":"article:modified_time","content":"2025-08-20T07:57:02.000Z"}]]},"git":{"createdTime":1755676622000,"updatedTime":1755676622000,"contributors":[{"name":"Shawn","username":"Shawn","email":"ScoMorii@163.com","commits":1,"url":"https://github.com/Shawn"}]},"readingTime":{"minutes":2.36,"words":707},"filePathRelative":"knowledge-base/java/concurrent/synchronized.md","excerpt":"<p><code>synchronized</code> 是 Java 中用于实现同步的关键字，它是解决多线程并发访问共享资源时，保证数据一致性的重要手段。<code>synchronized</code> 提供了一种排他性锁的机制，确保同一时间只有一个线程可以访问被同步的代码块或方法。</p>\\n<h2>作用</h2>\\n<p><code>synchronized</code> 关键字的作用主要体现在三个方面：</p>\\n<ol>\\n<li>\\n<p>原子性 （<code>Atomicity</code>）：确保一段代码作为一个整体执行，中间不会被其他线程中断。例如，<code>i++</code> 这样的操作看似简单，实际上是读 - 改 - 写三个步骤，不是原子性的。<code>synchronized</code> 可以将这个复合操作锁定，使其成为一个不可分割的原子操作。</p>\\n</li>\\n<li>\\n<p>可见性 （<code>Visibility</code>）：确保当一个线程修改了共享变量后，这个修改能够立即被其他线程看到。<code>synchronized</code> 在释放锁时，会将线程工作内存中的变量刷新到主内存中，在获取锁时，又会从主内存中读取最新的变量值。</p>\\n</li>\\n<li>\\n<p>有序性 （<code>Ordering</code>）：阻止指令重排序。<code>synchronized</code> 提供的内存语义可以防止编译器和处理器对同步代码块内的指令进行重排序。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{l as comp,r as data};
