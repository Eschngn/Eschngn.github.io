import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as n,o as t}from"./app-C2DeqqPS.js";const l={};function e(h,i){return t(),a("div",null,i[0]||(i[0]=[n(`<p>在 Java 中，注解（<code>Annotation</code>） 是一种特殊的元数据，它为代码提供额外的信息，但本身并不会直接影响代码的执行逻辑。注解可以应用于类、方法、字段、参数、局部变量、构造器等程序元素上。</p><p>注解在 Java 5 中引入，主要目的是简化配置、减少样板代码，并提供在编译期或运行时处理代码的机制。</p><h2 id="本质和作用" tabindex="-1"><a class="header-anchor" href="#本质和作用"><span>本质和作用</span></a></h2><p>注解本质上是 Java 代码中的一种标记或元数据，它不包含业务逻辑，但能够被工具、框架或编译器读取和解析，并根据这些信息执行相应的操作。</p><p>其主要作用如下：</p><ol><li><p>编译期检查： 编译器可以根据注解进行错误检查或发出警告。例如，<code>@Override</code> 注解可以确保子类方法正确地重写了父类方法。</p></li><li><p>代码生成： 在编译期或运行时，基于注解信息生成额外的代码（例如，Lombok 使用注解自动生成 <code>getter/setter</code>）。</p></li><li><p>运行时处理： 许多框架（如 Spring、Hibernate、JUnit）在运行时通过反射读取注解信息，并据此调整其行为。例如，Spring 的 <code>@Autowired</code> 注解用于自动装配依赖。</p></li><li><p>简化配置： 相较于 XML 等配置文件，注解将配置信息直接嵌入到代码中，减少了配置的复杂性，提高了可读性。</p></li></ol><h2 id="内置注解" tabindex="-1"><a class="header-anchor" href="#内置注解"><span>内置注解</span></a></h2><p>Java 语言自身提供了一些标准注解，用于编译器或 JVM 的特定行为：</p><ol><li><code>@Override</code>：标记一个方法是重写（覆盖）父类或实现接口中的方法，如果被标记的方法没有正确地重写父类方法（例如，方法名拼写错误、参数不匹配），编译器会报错，以此来帮助开发者避免常见的重写错误，提高代码的健壮性。</li><li><code>@Deprecated</code>：标记一个类、方法或字段是已过时的，当代码中使用了被 <code>@Deprecated</code> 标记的元素时，编译器会发出警告，以此来告知开发者该元素将来可能会被移除或有更好的替代方案，建议不再使用。</li><li><code>@SuppressWarnings</code>：指示编译器抑制（不显示）特定的警告信息，可以接受一个字符串数组作为参数，指定要抑制的警告类型（如 <code>&quot;unchecked&quot;</code>、<code>&quot;rawtypes&quot;</code>、<code>&quot;deprecation&quot;</code> 等）。 在我们确定某些警告是安全且可以忽略时，用于清除编译器的警告，使编译输出更干净。</li><li><code>@FunctionalInterface</code> (Java 8 引入)： 标记一个接口是函数式接口，即只包含一个抽象方法的接口，如果一个接口被 <code>@FunctionalInterface</code> 标记但包含多个抽象方法，编译器会报错。</li><li><code>@SafeVarargs</code> (Java 7 引入)：标记一个方法或构造器使用了可变长参数 （<code>Varargs</code>），并且这些可变长参数在处理时是类型安全的。</li></ol><h2 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解"><span>元注解</span></a></h2><p>元注解 <code>(Meta-Annotations)</code> 是用来注解其他注解的注解。它们定义了自定义注解的行为和属性。</p><p><code>java.lang.annotation</code> 中提供了元注解，可以使用这些注解来定义自己的注解。</p><figure><img src="https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/meta-annotations.png" alt="Java 元注解" tabindex="0" loading="lazy"><figcaption>Java 元注解</figcaption></figure><ol><li><code>@Target</code> ：指定自定义注解可以应用于哪些程序元素上，接受一个 <code>ElementType</code> 枚举数组，如 <code>ElementType.TYPE</code> (类、接口、枚举)、<code>ElementType.METHOD</code> (方法)、<code>ElementType.FIELD</code> (字段) 等。</li><li><code>@Retention</code> ： 指定自定义注解的生命周期，即注解信息在何时可用，接受一个 <code>RetentionPolicy</code> 枚举值： <ul><li><code>RetentionPolicy.SOURCE</code>：注解只保留在源代码中，编译后会被丢弃（如 <code>@Override</code>）。</li><li><code>RetentionPolicy.CLASS</code>：注解保留在 <code>.class</code> 文件中，但在运行时无法通过反射获取（默认值）。</li><li><code>RetentionPolicy.RUNTIME</code>：注解保留在 <code>.class</code> 文件中，并且在运行时可以通过反射获取和处理（如 Spring 的 <code>@Autowired</code>）。</li></ul></li><li><code>@Documented</code>：标记一个自定义注解，表示该注解会被包含在 Javadoc 文档中。</li><li><code>@Inherited</code>：标记一个自定义注解，表示如果一个类被该注解标记，则其子类会继承这个注解，只能应用于类，不能应用于方法或字段。</li><li><code>@Repeatable</code> (Java 8 引入)：标记一个自定义注解，表示该注解可以在同一个程序元素上重复使用。</li></ol><h2 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解"><span>自定义注解</span></a></h2><p>我们可以根据自己的需求创建自定义注解 <code>（Custom Annotations）</code>。</p><p><code>java.lang.reflect.AnnotationElement</code> 接口则提供了拿到我们自定义注解的功能。注解的处理是通过 Java 反射来处理的.<br> 反射相关的类 <code>Class, Method, Field</code> 都实现了 <code>AnnotationElement</code> 接口,如下图所示:</p><figure><img src="https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/annotation-element-implementation-class.png" alt=" 实现类图" tabindex="0" loading="lazy"><figcaption><code>AnnotationElement</code> 实现类图</figcaption></figure><p><code>java.lang.reflect.AnnotationElement</code> 接口中的方法如下,只要我们通过反射拿到 <code>Class, Method, Field</code> 类，就能够通过 <code>getAnnotation(Class)</code> 拿到我们想要的注解并取值。</p><figure><img src="https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/annotation-element-methods.png" alt=" 中的方法" tabindex="0" loading="lazy"><figcaption><code>AnnotationElement</code> 中的方法</figcaption></figure><p>例如下面,自定义一个注解 <code>MyCustomAnnotation</code>,在其中定义了3个元素:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">METHOD</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 应用于方法</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 运行时可见</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Documented</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 包含在 Javadoc 中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;"> MyCustomAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 元素（成员变量)</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> value</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;默认值&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tags</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {}</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 数组类型的元素</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后可以将其注解在方法上:</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MyService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">MyCustomAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;这是一个重要的操作&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> tags</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;core&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;business&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> performOperation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;执行了 MyService 的 performOperation 方法。&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">MyCustomAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;另一个操作&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 只有一个 value 元素时可省略元素名</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> anotherOperation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;执行了 MyService 的 anotherOperation 方法。&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NoSuchMethodException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 通过反射获取注解信息</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MyService</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">serviceClass</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> MyService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Method</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> serviceClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;performOperation&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isAnnotationPresent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyCustomAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            MyCustomAnnotation</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> annotation</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MyCustomAnnotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;方法名: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;注解 value: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> annotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;注解 count: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> annotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;注解 tags: &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tag</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> annotation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tags</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(tag </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot; &quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下:</p><div class="language-tex line-numbers-mode" data-highlighter="shiki" data-ext="tex" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-tex"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">方法名: performOperation</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">注解 value: 这是一个重要的操作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">注解 count: 5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">注解 tags: core business</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际开发应用中,自定义注解通常配合拦截器实现登录校验或者配合 AOP 实现日志打印。</p>`,27)]))}const d=s(l,[["render",e]]),r=JSON.parse(`{"path":"/knowledge-base/java/basis/annotation.html","title":"注解","lang":"zh-CN","frontmatter":{"title":"注解","category":["Java"],"tag":["Java基础"],"description":"在 Java 中，注解（Annotation） 是一种特殊的元数据，它为代码提供额外的信息，但本身并不会直接影响代码的执行逻辑。注解可以应用于类、方法、字段、参数、局部变量、构造器等程序元素上。 注解在 Java 5 中引入，主要目的是简化配置、减少样板代码，并提供在编译期或运行时处理代码的机制。 本质和作用 注解本质上是 Java 代码中的一种标记或...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"注解\\",\\"image\\":[\\"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/meta-annotations.png\\",\\"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/annotation-element-implementation-class.png\\",\\"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/annotation-element-methods.png\\"],\\"dateModified\\":\\"2025-08-14T08:42:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Shawn\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/knowledge-base/java/basis/annotation.html"}],["meta",{"property":"og:site_name","content":"Shawn's Blog"}],["meta",{"property":"og:title","content":"注解"}],["meta",{"property":"og:description","content":"在 Java 中，注解（Annotation） 是一种特殊的元数据，它为代码提供额外的信息，但本身并不会直接影响代码的执行逻辑。注解可以应用于类、方法、字段、参数、局部变量、构造器等程序元素上。 注解在 Java 5 中引入，主要目的是简化配置、减少样板代码，并提供在编译期或运行时处理代码的机制。 本质和作用 注解本质上是 Java 代码中的一种标记或..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/meta-annotations.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-14T08:42:52.000Z"}],["meta",{"property":"article:tag","content":"Java基础"}],["meta",{"property":"article:modified_time","content":"2025-08-14T08:42:52.000Z"}]]},"git":{"createdTime":1755160972000,"updatedTime":1755160972000,"contributors":[{"name":"Shawn","username":"Shawn","email":"ScoMorii@163.com","commits":1,"url":"https://github.com/Shawn"}]},"readingTime":{"minutes":5.03,"words":1509},"filePathRelative":"knowledge-base/java/basis/annotation.md","excerpt":"<p>在 Java 中，注解（<code>Annotation</code>） 是一种特殊的元数据，它为代码提供额外的信息，但本身并不会直接影响代码的执行逻辑。注解可以应用于类、方法、字段、参数、局部变量、构造器等程序元素上。</p>\\n<p>注解在 Java 5 中引入，主要目的是简化配置、减少样板代码，并提供在编译期或运行时处理代码的机制。</p>\\n<h2>本质和作用</h2>\\n<p>注解本质上是 Java 代码中的一种标记或元数据，它不包含业务逻辑，但能够被工具、框架或编译器读取和解析，并根据这些信息执行相应的操作。</p>\\n<p>其主要作用如下：</p>\\n<ol>\\n<li>\\n<p>编译期检查： 编译器可以根据注解进行错误检查或发出警告。例如，<code>@Override</code> 注解可以确保子类方法正确地重写了父类方法。</p>\\n</li>\\n<li>\\n<p>代码生成： 在编译期或运行时，基于注解信息生成额外的代码（例如，Lombok 使用注解自动生成 <code>getter/setter</code>）。</p>\\n</li>\\n<li>\\n<p>运行时处理： 许多框架（如 Spring、Hibernate、JUnit）在运行时通过反射读取注解信息，并据此调整其行为。例如，Spring 的 <code>@Autowired</code> 注解用于自动装配依赖。</p>\\n</li>\\n<li>\\n<p>简化配置： 相较于 XML 等配置文件，注解将配置信息直接嵌入到代码中，减少了配置的复杂性，提高了可读性。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{d as comp,r as data};
