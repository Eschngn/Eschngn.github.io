import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as n,o as a}from"./app-aSNuTS2p.js";const o={};function d(c,i){return a(),e("div",null,i[0]||(i[0]=[n(`<p><code>synchronized</code> 是 Java 中用于实现同步的关键字，它是解决多线程并发访问共享资源时，保证数据一致性的重要手段。<code>synchronized</code> 提供了一种排他性锁的机制，确保同一时间只有一个线程可以访问被同步的代码块或方法。</p><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><p><code>synchronized</code> 关键字的作用主要体现在三个方面：</p><ol><li><p>原子性 （<code>Atomicity</code>）：确保一段代码作为一个整体执行，中间不会被其他线程中断。例如，<code>i++</code> 这样的操作看似简单，实际上是读 - 改 - 写三个步骤，不是原子性的。<code>synchronized</code> 可以将这个复合操作锁定，使其成为一个不可分割的原子操作。</p></li><li><p>可见性 （<code>Visibility</code>）：确保当一个线程修改了共享变量后，这个修改能够立即被其他线程看到。<code>synchronized</code> 在释放锁时，会将线程工作内存中的变量刷新到主内存中，在获取锁时，又会从主内存中读取最新的变量值。</p></li><li><p>有序性 （<code>Ordering</code>）：阻止指令重排序。<code>synchronized</code> 提供的内存语义可以防止编译器和处理器对同步代码块内的指令进行重排序。</p></li></ol><h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法"><span>用法</span></a></h2><p><code>synchronized</code> 可以用来修饰方法和代码块。</p><p>1.同步方法（<code>Synchronized Method</code>）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在成员方法声明中使用了 <code>synchronized</code> 关键字，就表示该方法是同步的，也就是说，线程在执行这个方法的时候，其他线程不能同时执行，需要等待锁释放，使用的是<strong>类的对象实例</strong>作为监视器对象 <code>monitor</code>。</p><p>如果是静态方法的话，锁的是这个<strong>类的 Class 对象</strong>，因为静态方法是属于类级别的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> synchronized</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.同步代码块 (<code>Synchronized Block</code>)</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> increment</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同步代码块可以减少需要同步的代码量，颗粒度更低，更灵活。</p><p><code>synchronized</code> 后面的括号中指定了要锁定的对象，可以是 <code>this</code>，也可以是自定义对象或者类的 <code>Class</code> 对象（<code>ClassName.class</code>）。</p><p>通常为一个普通的 <code>private</code> 成员变量，如 <code>private Object object = new Object()</code>，这样使用了所有该 <code>object</code> 对象的同步代码块，在任何时候只能存在一个线程访问。</p><p>⚠️注意：</p><ul><li>一把锁只能同时被一个线程获取，没有获得锁的线程只能等待；</li><li>每个实例都对应有自己的一把锁 (<code>this</code>),不同实例之间互不影响；例外：锁对象是 <code>*.class</code> 以及 <code>synchronized</code> 修饰的是 <code>static</code> 方法的时候，所有对象公用同一把锁；</li><li><code>synchronized</code> 修饰的方法，无论方法正常执行完毕还是抛出异常，都会释放锁。</li></ul><h2 id="java-对象头" tabindex="-1"><a class="header-anchor" href="#java-对象头"><span>Java 对象头</span></a></h2><p>HotSpot 虚拟机中，对象在内存中存储的布局可以分为三块区域：对象头 <code>（Header）</code>、实例数据 <code>（Instance Data）</code> 和对齐填充 <code>（Padding）</code>。</p><ul><li><p>对象头：关于堆对象的布局、类型、GC 状态、同步状态和标识哈希码的基本信息；</p></li><li><p>实例数据：是对象存储其实际字段值的地方，包含了对象的所有成员变量。JVM 在存储实例数据时，遵循一定的对齐策略，通常先是父类的实例变量，然后是子类的实例变量。字段通常按 <code>longs</code>、<code>doubles</code>、<code>ints</code>、<code>shorts</code>、<code>chars</code>、<code>bytes</code>、<code>booleans</code>、<code>oops</code> （普通对象指针）的顺序存放。</p></li><li><p>对其填充：当对象头和实例数据的大小加起来不是 8 字节的倍数时，JVM 会在对象末尾添加一些额外的字节（这些字节内容是无意义的，只是为了对齐），直到总大小满足 8 字节的倍数。现代 CPU 都是以字 <code>（Word）</code> 为单位读取内存，通常是 8 字节。如果对象不是 8 字节的倍数，CPU 可能需要多次读取才能获取完整的对象，影响性能。除此之外，某些操作需要对齐来保证原子性。</p></li></ul><figure><img src="https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/java-object.png" alt="Java 对象组成" tabindex="0" loading="lazy"><figcaption>Java 对象组成</figcaption></figure><h2 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理"><span>实现原理</span></a></h2><ol><li><p>加锁和释放锁的原理：</p><p>加锁：当线程进入同步块或同步方法时，线程需要获得该对象的监视器锁 （<code>Monitor Lock</code>）。这个锁是由 JVM 内部的对象头中的锁标志位来实现的。当一个线程获得锁后，其他线程就无法进入同一个对象的同步块或同步方法，必须等待锁被释放。</p><p>释放锁：线程退出同步块或同步方法后，会自动释放锁（无论是正常退出还是因异常退出）。锁的释放通知其他等待该锁的线程可以竞争锁，等待线程按照一定的顺序重新获得锁并进入同步块。</p><p>锁的获取和释放过程涉及到 JVM 的 <code>MonitorEnter</code> 和 <code>MonitorExit</code> 指令：</p><ul><li><code>MonitorEnter</code> 指令：当线程进入同步块时，尝试获取锁。</li><li><code>MonitorExit</code> 指令：当线程退出同步块时，释放锁。</li></ul><p>这两个指令我们可以通过查看字节码看到：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> object </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (object) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上 Java 代码的字节码如下图所示：</p><figure><img src="https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/picgo/synchronized-bytecode.png" alt=" 字节码" tabindex="0" loading="lazy"><figcaption><code>synchronized</code> 字节码</figcaption></figure></li><li><p>可重入原理：</p><p><code>synchronized</code> 是可重入的，这意味着同一个线程在持有某个对象的锁时，可以再次进入这个对象上其他被 <code>synchronized</code> 修饰的同步方法或同步块，而不会发生死锁。</p><p>这是通过为每个锁维护一个计数器和线程持有者来实现的：</p><ul><li>当线程第一次获得锁时，计数器加 <code>1</code>，并且记录持有该锁的线程。</li><li>如果同一个线程再次进入同步方法，计数器会再次递增，而不是阻塞。</li><li>当线程退出同步方法时，计数器会递减，直到计数器为 <code>0</code> 时，线程才真正释放锁，其他线程才能获取锁。</li></ul></li><li><p>保证可见性原理</p><p><code>synchronized</code> 还通过内存屏障 （<code>Memory Barrier</code>） 机制确保可见性。当一个线程对共享变量进行修改后，其他线程可以看到最新的值，而不会读取到旧值。</p><ul><li><p>进入同步块前：JVM 会将当前线程对共享变量的所有缓存内容刷新到主内存（对应 <code>MonitorEnter</code> 指令）。</p></li><li><p>退出同步块后：JVM 会将修改过的变量从工作内存同步回主内存，并使其他线程的工作内存中这些变量的缓存失效（对应 <code>MonitorExit</code> 指令）。</p></li></ul></li></ol><p><code>synchronized</code> 同步语句块的实现使用的是 <code>monitorenter</code> 和 <code>monitorexit</code> 指令，其中 <code>monitorenter</code> 指令指向同步代码块的开始位置，<code>monitorexit</code> 指令则指明同步代码块的结束位置。</p><p><code>synchronized</code> 修饰的方法并没有 <code>monitorenter</code> 指令和 <code>monitorexit</code> 指令，取而代之的是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法。如果是实例方法，JVM 会尝试获取实例对象的锁。如果是静态方法，JVM 会尝试获取当前 <code>class</code> 的锁</p><p>不过两者的本质都是对对象监视器 <code>monitor</code> 的获取。</p>`,27)]))}const h=s(o,[["render",d]]),p=JSON.parse(`{"path":"/knowledge-base/java/concurrent/synchronized.html","title":"synchronized","lang":"zh-CN","frontmatter":{"title":"synchronized","category":["Java"],"tag":["Java 并发编程"],"description":"synchronized 是 Java 中用于实现同步的关键字，它是解决多线程并发访问共享资源时，保证数据一致性的重要手段。synchronized 提供了一种排他性锁的机制，确保同一时间只有一个线程可以访问被同步的代码块或方法。 作用 synchronized 关键字的作用主要体现在三个方面： 原子性 （Atomicity）：确保一段代码作为一个整体...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"synchronized\\",\\"image\\":[\\"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/java-object.png\\",\\"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/picgo/synchronized-bytecode.png\\"],\\"dateModified\\":\\"2025-08-25T14:48:00.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Shawn\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/knowledge-base/java/concurrent/synchronized.html"}],["meta",{"property":"og:site_name","content":"Shawn's Blog"}],["meta",{"property":"og:title","content":"synchronized"}],["meta",{"property":"og:description","content":"synchronized 是 Java 中用于实现同步的关键字，它是解决多线程并发访问共享资源时，保证数据一致性的重要手段。synchronized 提供了一种排他性锁的机制，确保同一时间只有一个线程可以访问被同步的代码块或方法。 作用 synchronized 关键字的作用主要体现在三个方面： 原子性 （Atomicity）：确保一段代码作为一个整体..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://chengliuxiang.oss-cn-hangzhou.aliyuncs.com/blog/java-object.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-25T14:48:00.000Z"}],["meta",{"property":"article:tag","content":"Java 并发编程"}],["meta",{"property":"article:modified_time","content":"2025-08-25T14:48:00.000Z"}]]},"git":{"createdTime":1756133280000,"updatedTime":1756133280000,"contributors":[{"name":"Summer Snow","username":"","email":"ScoMorii@163.com","commits":1}]},"readingTime":{"minutes":6.01,"words":1803},"filePathRelative":"knowledge-base/java/concurrent/synchronized.md","excerpt":"<p><code>synchronized</code> 是 Java 中用于实现同步的关键字，它是解决多线程并发访问共享资源时，保证数据一致性的重要手段。<code>synchronized</code> 提供了一种排他性锁的机制，确保同一时间只有一个线程可以访问被同步的代码块或方法。</p>\\n<h2>作用</h2>\\n<p><code>synchronized</code> 关键字的作用主要体现在三个方面：</p>\\n<ol>\\n<li>\\n<p>原子性 （<code>Atomicity</code>）：确保一段代码作为一个整体执行，中间不会被其他线程中断。例如，<code>i++</code> 这样的操作看似简单，实际上是读 - 改 - 写三个步骤，不是原子性的。<code>synchronized</code> 可以将这个复合操作锁定，使其成为一个不可分割的原子操作。</p>\\n</li>\\n<li>\\n<p>可见性 （<code>Visibility</code>）：确保当一个线程修改了共享变量后，这个修改能够立即被其他线程看到。<code>synchronized</code> 在释放锁时，会将线程工作内存中的变量刷新到主内存中，在获取锁时，又会从主内存中读取最新的变量值。</p>\\n</li>\\n<li>\\n<p>有序性 （<code>Ordering</code>）：阻止指令重排序。<code>synchronized</code> 提供的内存语义可以防止编译器和处理器对同步代码块内的指令进行重排序。</p>\\n</li>\\n</ol>","autoDesc":true}`);export{h as comp,p as data};
